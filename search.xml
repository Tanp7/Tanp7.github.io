<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Codeforces-832Div2_A-D题解</title>
      <link href="/project/2022/11/22/Codeforces-832Div2-A-D%E9%A2%98%E8%A7%A3/"/>
      <url>/project/2022/11/22/Codeforces-832Div2-A-D%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个长度为n的数组，你需要将其分为两组，求|sum(s1)-sum(s2)|最大</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>贪心。<br>我们只需要把正、负各放到两组里，答案就是两组之差绝对值.</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> n; std::cin &gt;&gt; n;<br><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br>ll s1 = <span class="hljs-number">0</span>, s2 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br>std::cin &gt;&gt; a[i];<br><span class="hljs-keyword">if</span>(a[i] &lt; <span class="hljs-number">0</span>) s1 += (-a[i]);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i] &gt; <span class="hljs-number">0</span>) s2 += a[i];<br>}<br>std::cout &lt;&lt; std::<span class="hljs-built_in">max</span>(s1 - s2, s2 - s1) &lt;&lt; <span class="hljs-string">'\n'</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>一串由n个”BAN”组成的字符串，你可以交换任意次si和sj使得其不存在一个子序列为”BAN”</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>贪心+双指针。<br>一个指针从前往后，一个指针从后往前，交换前面的B和后面的N，<br>注意字符串的奇偶性会影响交换次数，但交换的方法不变，偶数的交换次数是n/2，奇数则还要+1.</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">int</span> n; std::cin &gt;&gt; n;<br>    <span class="hljs-keyword">if</span>(n &amp; <span class="hljs-number">1</span>) {<br>        std::cout &lt;&lt; n / <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">'\n'</span>;<br>    } <span class="hljs-keyword">else</span> {<br>        std::cout &lt;&lt; n / <span class="hljs-number">2</span> &lt;&lt; <span class="hljs-string">'\n'</span>;<br>    }<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = n * <span class="hljs-number">3</span>; i &lt; j; i += <span class="hljs-number">3</span>, j -= <span class="hljs-number">3</span>) {<br>        std::cout &lt;&lt; i &lt;&lt; <span class="hljs-string">' '</span> &lt;&lt; j &lt;&lt; <span class="hljs-string">'\n'</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>Alice和Bob玩一个游戏，首先出现$a_1 = 1$者输。<br>每轮现对$a_1 - 1$, 然后从2-n中选择一个数与$a_1$交换。</p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p>可以分为两种情况讨论：</p><ol><li>$a_1$ != *std::min_element(all(a))</li><li>$a_1$ = *std::min_element(all(a))</li></ol><p>如果是第一种情况，Alice必胜，因为Alice每轮都可以将最小的数换到$a_1$,这样一定是Bob最先进入必败态</p><p>如果是第二种情况，Bob必胜，Bob每轮将最小的数换到$a_1$,Alice先进入必败态</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">int</span> n; std::cin &gt;&gt; n;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br>        std::cin &gt;&gt; a[i];<br>    }<br>    <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>] == *std::<span class="hljs-built_in">min_element</span>(<span class="hljs-built_in">all</span>(a))) {<br>        std::cout &lt;&lt; <span class="hljs-string">"Bob\n"</span>;<br>    } <span class="hljs-keyword">else</span> {<br>        std::cout &lt;&lt; <span class="hljs-string">"Alice\n"</span>;<br>    }<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><h2 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个长度为n的序列a，q个询问，对于每个独立询问给定l，r。你可以对a进行若干次操作使得a[l:r]都为0，求出最小操作次数，不能则输出-1.</p><blockquote><p>选定一个在[l:r]之间的奇数长度区间[L:R]，将a[L:R]替换为其所有元素的XOR</p></blockquote><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><p>看了好多篇题解才搞明白。</p><ol><li>操作改变不了异或和，所以区间异或和必须为0</li><li>操作偶数个数的序列可以拆分为两个奇数长度的序列，两个子序列异或和都为0</li></ol><p>判断：</p><ol><li>全为0 -&gt; 0</li><li>异或不完/长度小于3 -&gt; -1</li><li>奇数个 -&gt; 1</li><li>存在前缀0或后缀0 -&gt; 1</li><li>偶数长序列拆成两个异或和都为0的奇数序列 -&gt; 2</li><li>拆不了 -&gt; -1</li></ol><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> n, q;<br>std::cin &gt;&gt; n &gt;&gt; q;<br><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span>, <span class="hljs-title">x</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span>, <span class="hljs-title">z</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span>, <span class="hljs-title">pre</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>std::map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp[<span class="hljs-number">2</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) {<br>std::cin &gt;&gt; a[i];<br>x[i] = a[i];<br><span class="hljs-keyword">if</span>(a[i] == <span class="hljs-number">0</span>) z[i] = z[i - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> z[i] = <span class="hljs-number">0</span>;<br>x[i] ^= x[i - <span class="hljs-number">1</span>];<br>pre[i] = mp[i &amp; <span class="hljs-number">1</span>][x[i]];<br>mp[i &amp; <span class="hljs-number">1</span>][x[i - <span class="hljs-number">1</span>]] = i;<br>}<br><br><span class="hljs-keyword">while</span>(q--) {<br><span class="hljs-type">int</span> l, r;<br>std::cin &gt;&gt; l &gt;&gt; r;<br><span class="hljs-comment">// 全0</span><br><span class="hljs-keyword">if</span>(z[r] &gt;= r - l + <span class="hljs-number">1</span>) {<br>std::cout &lt;&lt; <span class="hljs-string">"0\n"</span>;<br><span class="hljs-keyword">continue</span>;<br>}<br><span class="hljs-comment">// 异或不干净或长度小于3</span><br><span class="hljs-keyword">if</span>(x[r] ^ x[l - <span class="hljs-number">1</span>] <span class="hljs-keyword">or</span> r - l &lt; <span class="hljs-number">2</span>) {<br>std::cout &lt;&lt; <span class="hljs-string">"-1\n"</span>;<br><span class="hljs-keyword">continue</span>;<br>}<br><span class="hljs-comment">// 区间长度为奇数</span><br><span class="hljs-keyword">if</span>((r - l + <span class="hljs-number">1</span>) &amp; <span class="hljs-number">1</span>) {<br>std::cout &lt;&lt; <span class="hljs-string">"1\n"</span>;<br><span class="hljs-keyword">continue</span>;<br>}<br><span class="hljs-comment">// 偶数长度</span><br><span class="hljs-comment">// 存在前缀0或后缀0</span><br><span class="hljs-keyword">if</span>(a[l] == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> a[r] == <span class="hljs-number">0</span>) {<br>std::cout &lt;&lt; <span class="hljs-string">"1\n"</span>;<br><span class="hljs-keyword">continue</span>;<br>}<br><span class="hljs-comment">// 上一个a[r] ^ a[l - 1] == 0的位置大于l</span><br><span class="hljs-keyword">if</span>(pre[r] &gt; l) std::cout &lt;&lt; <span class="hljs-string">"2\n"</span>;<br><span class="hljs-keyword">else</span> std::cout &lt;&lt; <span class="hljs-string">"-1\n"</span>;<br>}<br>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces-829Div2_A-D题解</title>
      <link href="/project/2022/10/27/Codeforces-829Div2-A-D%E9%A2%98%E8%A7%A3/"/>
      <url>/project/2022/10/27/Codeforces-829Div2-A-D%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你一串长度为n的字符串s，其中s中只有’Q’,’A’.其中s的首字母必定为’Q’,且每个Q之后至少对应一个A，判断每个’Q’是否存在对应至少1个’A’.</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>我的做法是用两个vector来记录Q和A的位置，用vis数组来记录当前位置的’A’是否用过。<br>对于每个Q，二分出第一个比’Q’位置大且没有用过的’A’,并让vis[p]为1.</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Author: Tanp7 {{{</span><br><span class="hljs-comment"> * Blog: https://zhengzihan.me }}}*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;deque&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) begin(x),end(x) <span class="hljs-comment">//{{{</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for (int i = l; i &lt; n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>; <span class="hljs-comment">//}}}</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">int</span> n; std::cin &gt;&gt; n;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; pos[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br>        <span class="hljs-type">char</span> x; std::cin &gt;&gt; x;<br>        <span class="hljs-keyword">if</span>(x == <span class="hljs-string">'A'</span>) pos[<span class="hljs-number">0</span>].<span class="hljs-built_in">push_back</span>(i);<br>        <span class="hljs-keyword">else</span> pos[<span class="hljs-number">1</span>].<span class="hljs-built_in">push_back</span>(i);<br>    }<br>    <span class="hljs-type">int</span> len = pos[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">if</span>(!len) {<br>        std::cout &lt;&lt; <span class="hljs-string">"NO\n"</span>;<br>        <span class="hljs-keyword">return</span>;<br>    }<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">vis</span><span class="hljs-params">(len)</span></span>;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : pos[<span class="hljs-number">1</span>]) {<br>        <span class="hljs-type">int</span> p = std::<span class="hljs-built_in">upper_bound</span>(<span class="hljs-built_in">all</span>(pos[<span class="hljs-number">0</span>]), i) - pos[<span class="hljs-number">0</span>].<span class="hljs-built_in">begin</span>();<br>        <span class="hljs-keyword">while</span>(vis[p] &amp;&amp; p &lt; len) p++;<br>        <span class="hljs-keyword">if</span>(p == len) {<br>            std::cout &lt;&lt; <span class="hljs-string">"NO\n"</span>;<br>            <span class="hljs-keyword">return</span>;<br>        }<br>        vis[p] = <span class="hljs-number">1</span>;<br>    }<br>    std::cout &lt;&lt; <span class="hljs-string">"YES\n"</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-type">int</span> T; std::cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span>(T--) {<br>        <span class="hljs-built_in">solve</span>();<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>你需要重新排列一个长度为n的排列组合使得每个相邻两项之差的绝对值最大.</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>很简单直接上代码</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">int</span> n; std::cin &gt;&gt; n;<br>    <span class="hljs-keyword">if</span>(n &amp; <span class="hljs-number">1</span>) {<br>    <span class="hljs-type">int</span> i, j;<br>    <span class="hljs-keyword">for</span> (i = n / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, j = n; i &gt; <span class="hljs-number">0</span>, j &gt; n / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>; i--, j--) {<br>    std::cout &lt;&lt; i &lt;&lt; <span class="hljs-string">' '</span> &lt;&lt; j &lt;&lt; <span class="hljs-string">' '</span>;<br>    }<br>    std::cout &lt;&lt; i &lt;&lt; <span class="hljs-string">' '</span>;<br>    } <span class="hljs-keyword">else</span> {<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n / <span class="hljs-number">2</span>, j = n; i &gt; <span class="hljs-number">0</span>, j &gt; n / <span class="hljs-number">2</span>; i--, j--) {<br>    std::cout &lt;&lt; i &lt;&lt; <span class="hljs-string">' '</span> &lt;&lt; j &lt;&lt; <span class="hljs-string">' '</span>;<br>    }<br>    }<br>    std::cout &lt;&lt; <span class="hljs-string">'\n'</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br><span class="hljs-type">int</span> T = <span class="hljs-number">1</span>;<br>    std::cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span>(T--) {<br>        <span class="hljs-built_in">solve</span>();<br>}<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="C1"><a href="#C1" class="headerlink" title="C1"></a>C1</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你一个长度为n的数组a，a中只有-1或者1.你可以让a划分为多个连续的区间，每段区间按照以下方法计算贡献值：<br>(1, 4) = a1-a2+a3-a4<br>首先判断是否存在一种划分方法使得整个数组的贡献值和为0，如果不存在则输出-1，否则就输出方案数以及每个具体的区间端点.</p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p>贪心。<br>首先当n为奇数时答案不存在，偶数时则一定存在。<br>奇数时不存在答案很显然不用解释，我们来看为什么偶数时一定存在答案。<br>我们可以两两来看，每一对数只存在以下两种情况。</p><ul><li>a[i] = a[i + 1]</li><li>a[i] != a[i + 1]</li></ul><p>而这两种情况我们都可以使之贡献值为0, 具体来说：<br>如果$a[i] = a[i + 1]$，那么我们就让$[i, i + 1]$成为答案的一个区间,这样贡献值就是0。<br>如果$a[i] != a[i + 1]$, 那么我们就让$[i, i]$和$[i + 1, i + 1]$都成为答案的区间。这显然是对的.</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">int</span> n; std::cin &gt;&gt; n;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) {<br>        std::cin &gt;&gt; a[i];<br>    }<br>    <span class="hljs-keyword">if</span>(n &amp; <span class="hljs-number">1</span>) {<br>        std::cout &lt;&lt; <span class="hljs-string">"-1\n"</span>;<br>        <span class="hljs-keyword">return</span>;<br>    }<br>    std::vector&lt;PII&gt; ans;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i+=<span class="hljs-number">2</span>) {<br>        <span class="hljs-keyword">if</span>(a[i] == a[i + <span class="hljs-number">1</span>]) {<br>            ans.<span class="hljs-built_in">emplace_back</span>(i, i + <span class="hljs-number">1</span>);<br>        } <span class="hljs-keyword">else</span> {<br>            ans.<span class="hljs-built_in">emplace_back</span>(i, i);<br>            ans.<span class="hljs-built_in">emplace_back</span>(i + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>);<br>        }<br>    }<br>    std::cout &lt;&lt; ans.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-string">'\n'</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [k, x] : ans) {<br>        std::cout &lt;&lt; k &lt;&lt; <span class="hljs-string">' '</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">'\n'</span>;<br>    }<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> T = <span class="hljs-number">1</span>;<br>    std::cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span>(T--) {<br>        <span class="hljs-built_in">solve</span>();<br>    }<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="C2"><a href="#C2" class="headerlink" title="C2"></a>C2</h1><h2 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h2><p>C2与C1不同的是，数组中允许存在0，-1，1.</p><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><p>官方题解说实话没有看懂，原谅我英语太烂。<br>我们考虑两个非0数a,b(a在数组中的位置小于b). a和b中间隔k个0（可能为0个）.</p><p>此时无解的情况就是数对$(a, b)$只有a没有b。具体为什么这么说看完有解的情况就清楚了。</p><p>我们先定义对于a,b这对数他们的区间为$[l, r]$存在以下几种情况：</p><ol><li>a != b, 我们可以划分为$[l, r - 1]$和$[r, r]$。</li><li>a = b, 有两种情况<ol><li>如果$[l, r]$中没有0，那么就和C1一样也就是划分为$[l, r]$</li><li>如果$[l, r]$中有0，那么我们就划分为$(a, 0, 0, ..)$和$(0, b)$.其中前者可以没有0，但后者一定要是$(0, b)$ 这样就可以保证贡献值为0.</li></ol></li></ol><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">/* Author: Tanp7 {{{</span><br><span class="hljs-comment"> * Blog: https://zhengzihan.me }}}*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first  <span class="hljs-comment">//{{{</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PLL std::pair<span class="hljs-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> edl std::cout &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> llinf 9223372036854775807</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3c3c3c3c <span class="hljs-comment">// 1010580540, 7f7f7f7f:2139062143</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pl std::cout &lt;&lt; <span class="hljs-string">"\n---------\n"</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for(int i = (int)l; i &lt; (int)n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a) std::cout &lt;&lt; #a &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; (a) &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticases() int T;std::cin&gt;&gt;T;while(T--)solve();</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> cmuticases() int T;scanf(<span class="hljs-string">"%d"</span>,&amp;T);while(T--)solve();</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FAST std::cin.tie(nullptr)-&gt;std::ios_base::sync_with_stdio(false)</span><br><span class="hljs-function">std::mt19937_64 <span class="hljs-title">mrand</span><span class="hljs-params">(std::random_device{}())</span></span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> ull = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> ll mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rnd</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-built_in">mrand</span>() % x;}<br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a,ll b)</span> </span>{ <span class="hljs-keyword">return</span> b?<span class="hljs-built_in">gcd</span>(b,a%b):a;}<br><span class="hljs-function">ll <span class="hljs-title">lcm</span><span class="hljs-params">(ll a, ll b)</span> </span>{ <span class="hljs-keyword">return</span> a / <span class="hljs-built_in">gcd</span>(a, b) * b; }<br><span class="hljs-function">ll <span class="hljs-title">powmod</span><span class="hljs-params">(ll a,ll b)</span> </span>{ll res=<span class="hljs-number">1</span>;a%=mod; <span class="hljs-built_in">assert</span>(b&gt;=<span class="hljs-number">0</span>); <span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>){<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)res=res*a%mod;a=a*a%mod;}<span class="hljs-keyword">return</span> res;}<br><span class="hljs-comment">//using namespace std;</span><br><span class="hljs-comment">//#define int long long  //}}}</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">int</span> n, k;<br>    std::cin &gt;&gt; n;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-type">bool</span> ok = <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">-1</span>;<br>    std::vector&lt;PII&gt; ans;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br>        std::cin &gt;&gt; a[i];<br>        <span class="hljs-keyword">if</span>(!ok) {<br>            <span class="hljs-keyword">if</span>(a[i] == <span class="hljs-number">0</span>) {<br>                ans.<span class="hljs-built_in">pb</span>({i + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>});<br>            } <span class="hljs-keyword">else</span> {<br>                ok = <span class="hljs-literal">true</span>;<br>                p = i;<br>            }<br>            <span class="hljs-keyword">continue</span>;<br>        }<br>        <span class="hljs-keyword">if</span>(a[i] != <span class="hljs-number">0</span>) {<br>            ok = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span>(a[p] != a[i]) {<br>                ans.<span class="hljs-built_in">pb</span>({p + <span class="hljs-number">1</span>, i});<br>                ans.<span class="hljs-built_in">pb</span>({i + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>});<br>            } <span class="hljs-keyword">else</span> {<br>                <span class="hljs-keyword">if</span>(p + <span class="hljs-number">1</span> == i) {<br>                    ans.<span class="hljs-built_in">pb</span>({p + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>});<br>                } <span class="hljs-keyword">else</span> {<br>                    ans.<span class="hljs-built_in">pb</span>({p + <span class="hljs-number">1</span>, i - <span class="hljs-number">1</span>});<br>                    ans.<span class="hljs-built_in">pb</span>({i, i + <span class="hljs-number">1</span>});<br>                }<br>            }<br>        }<br>    }<br>    <span class="hljs-keyword">if</span>(ok) {<br>        std::cout &lt;&lt; <span class="hljs-string">"-1\n"</span>;<br>        <span class="hljs-keyword">return</span>;<br>    }<br>    std::cout &lt;&lt; ans.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-string">'\n'</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [k, x] : ans) {<br>        std::cout &lt;&lt; k &lt;&lt; <span class="hljs-string">' '</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">'\n'</span>;<br>    }<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    FAST;<br>    <span class="hljs-built_in">muticases</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><h2 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你长度为n的数组a，其中a的元素都小于x。判断a中元素的阶乘和是否整除x。</p><h2 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h2><p>我们可以用一个cnt数组来记录每个需要计算的阶乘的个数。<br>中学数学：$(k + 1) * k! = (k + 1)!$<br>通过这个简单的数学推导我们可以发现，如果每个小于x的数k如果其cnt值为k+1那么就会一直进位直到x的cnt+1.而答案正式要我们让阶乘和整除x，所以我们只需要从小到大判断每个小于x的i其cnt值是否为$i+1$的倍数即可，如果不是那么输出”NO”,否则就一直进位下去。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br>ll cnt[<span class="hljs-number">1000000</span>], n, x;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>std::cin &gt;&gt; n &gt;&gt; x;<br><span class="hljs-keyword">for</span> (ll i = <span class="hljs-number">1</span>; i &lt;= n; i++) {<br>ll t; std::cin &gt;&gt; t;<br>cnt[t]++;<br>}<br><span class="hljs-keyword">for</span> (ll i = <span class="hljs-number">1</span>; i &lt; x; i++) {<br><span class="hljs-keyword">if</span> (cnt[i] % (i + <span class="hljs-number">1</span>) != <span class="hljs-number">0</span>) {<br>std::cout &lt;&lt; <span class="hljs-string">"No\n"</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br>cnt[i + <span class="hljs-number">1</span>] += cnt[i] / (i + <span class="hljs-number">1</span>);<br>}<br>std::cout &lt;&lt; <span class="hljs-string">"Yes\n"</span>;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces-824Div2_A-D题解</title>
      <link href="/project/2022/10/08/Codeforces-824Div2-A-D%E9%A2%98%E8%A7%A3/"/>
      <url>/project/2022/10/08/Codeforces-824Div2-A-D%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>你需要从第一天工作到第n天，但是你可以给自己放三天假，保证任意两天不能相邻（注意是成环的）.<br>当这三天确定后，就形成了三段l1, l2, l3.<br>求min(|l1 - l2|, |l2 - l3|, |l3 - l1|)最大值。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先我们可以把这放假的三天去掉，那么要求的就变成了求如何分配三段让结果最大，那么问题就变成了如何构造这三段来使得答案最大，一种可行的策略就是使得这三段存在单调性，赛时就猜了一个(n - 6) / 3就对了。。 具体解释可以看官方的。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Author: Tanp7 {{{</span><br><span class="hljs-comment"> * Blog: https://zhengzihan.me }}}*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) begin(x),end(x) <span class="hljs-comment">//{{{</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for (int i = l; i &lt; n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>; <span class="hljs-comment">//}}}</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> n; std::cin &gt;&gt; n;<br>n -= <span class="hljs-number">6</span>;<br>std::cout &lt;&lt; n / <span class="hljs-number">3</span> &lt;&lt; <span class="hljs-string">'\n'</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><span class="hljs-type">int</span> T; std::cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span>(T--) {<br>        <span class="hljs-built_in">solve</span>();<br>    }<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定一个序列a，你需要进行以下操作使得a数组不存在任意一对x，y满足2x &lt;= y.</p><ul><li>你可以让一个a[i]拆分成任意两整数份</li></ul><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>不妨大胆贪心以下，把所有大于2倍最小值的a[i]都拆掉。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Author: Tanp7 {{{</span><br><span class="hljs-comment"> * Blog: https://zhengzihan.me }}}*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) begin(x),end(x) <span class="hljs-comment">//{{{</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for (int i = l; i &lt; n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>; <span class="hljs-comment">//}}}</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">int</span> n; std::cin &gt;&gt; n;<br><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;i : a) {<br>std::cin &gt;&gt; i;<br>}<br><span class="hljs-type">int</span> min = *std::<span class="hljs-built_in">min_element</span>(<span class="hljs-built_in">all</span>(a));<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : a) {<br><span class="hljs-keyword">if</span>(i &gt;= <span class="hljs-number">2</span> * min) {<br><span class="hljs-type">int</span> cnt = i / (<span class="hljs-number">2</span> * min - <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(i % (<span class="hljs-number">2</span> * min - <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) cnt--;<br>ans += cnt;<br>}<br>}<br>std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">'\n'</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><span class="hljs-type">int</span> T; std::cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span>(T--) {<br>        <span class="hljs-built_in">solve</span>();<br>    }<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定一个被加密的字符串，你需要任意排列26个字母的顺序使得还原的原字符串字典序最小。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>我们发现，我们需要排列的这26个字母决定了字答案。<br>那么如何来排列呢？<br>在进行排列之前，不妨把每个字母想像成图中的一个点，每个点有且只有一个入度和出度。那么我们需要在满足这一条件的情况下排列。<br>开始具体排列时，我们发现我们可以贪心地让位置前的字母更小，这样答案就是对的，但是前提是排列的字母需要构成环并且不能与原字母重复。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Author: Tanp7 {{{</span><br><span class="hljs-comment"> * Blog: https://zhengzihan.me }}}*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) begin(x),end(x) <span class="hljs-comment">//{{{</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for (int i = l; i &lt; n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>; <span class="hljs-comment">//}}}</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">UF</span> {<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; fa, sz;<br>    <span class="hljs-built_in">UF</span>(<span class="hljs-type">int</span> n) : <span class="hljs-built_in">fa</span>(n), <span class="hljs-built_in">sz</span>(n, <span class="hljs-number">1</span>) { <span class="hljs-built_in">iota</span>(fa.<span class="hljs-built_in">begin</span>(), fa.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>); }<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>{ <span class="hljs-keyword">return</span> fa[x] == x ? x : fa[x] = <span class="hljs-built_in">find</span>(fa[x]); }<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">same</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(x) == <span class="hljs-built_in">find</span>(y); }<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">join</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>{<br>        x = <span class="hljs-built_in">find</span>(x), y = <span class="hljs-built_in">find</span>(y);<br>        <span class="hljs-keyword">if</span> (x == y) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (sz[x] &gt; sz[y]) std::<span class="hljs-built_in">swap</span>(x, y);<br>        fa[x] = y;<br>        sz[y] += sz[x];<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    }<br>};<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">int</span> n; std::cin &gt;&gt; n;<br>std::string s; std::cin &gt;&gt; s;<br>std::map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">char</span>&gt; mp;<br><span class="hljs-type">int</span> vis[<span class="hljs-number">26</span>] = {<span class="hljs-number">0</span>};<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-function">UF <span class="hljs-title">uf</span><span class="hljs-params">(<span class="hljs-number">26</span>)</span></span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;i : s) {<br><span class="hljs-keyword">if</span>(!mp.<span class="hljs-built_in">count</span>(i)) {<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">26</span>; j++) {<br><span class="hljs-comment">// 未用过的字母 且 （最后一个字母或者不在环中），我们就用他</span><br><span class="hljs-keyword">if</span>(!vis[j] &amp;&amp; (cnt == <span class="hljs-number">25</span> || !uf.<span class="hljs-built_in">same</span>(i - <span class="hljs-string">'a'</span>, j))) {<br>uf.<span class="hljs-built_in">join</span>(i - <span class="hljs-string">'a'</span>, j);<br>mp[i] = <span class="hljs-string">'a'</span> + j;<br>vis[j] = <span class="hljs-number">1</span>;<br>cnt++;<br><span class="hljs-keyword">break</span>;<br>}<br>}<br>}<br>i = mp[i];<br>}<br>std::cout &lt;&lt; s &lt;&lt; <span class="hljs-string">'\n'</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><span class="hljs-type">int</span> T; std::cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span>(T--) {<br>        <span class="hljs-built_in">solve</span>();<br>    }<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure><h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h3><p>你有n张卡片， 每张卡片有k个维度。<br>set的定义是对于每一张卡片的每个维度中，每个卡牌都两两不同或者全部相同。<br>meta-set的定义是包含至少两个set的5张卡片的组合。<br>求meta-set的数量</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>5张牌个中要有2个set，也就是说有一个牌被使用了两次，我们可以以这个必然被用两次的牌为出发点，看看其他的哪两张牌和他组合可以组成一个set.<br>比如卡牌[0, 1, 2]和[2, 1, 2]，那么和他匹配的卡是[1, 1, 2]，这个如何快速算呢？我们发现对应维度上每个数和 % 3必须等于0。</p><ol><li>我们可以先进行暴力O(n^2)枚举两张卡片，求出能与这两张卡片组成set的第三张卡片，并用map记录下来其数量。</li><li>对于每个能成为第三张卡的卡，答案加上$C_{cnt}^{2}$ (为什么？因为一个meta-set需要两个set)</li></ol><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Author: Tanp7 {{{</span><br><span class="hljs-comment"> * Blog: https://zhengzihan.me }}}*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) begin(x),end(x) <span class="hljs-comment">//{{{</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for (int i = l; i &lt; n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>; <span class="hljs-comment">//}}}</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> n, k; std::cin &gt;&gt; n &gt;&gt; k;<br><span class="hljs-function">std::vector <span class="hljs-title">c</span><span class="hljs-params">(n, std::vector&lt;<span class="hljs-type">int</span>&gt; (k, <span class="hljs-number">0</span>))</span></span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; k; j++) {<br>std::cin &gt;&gt; c[i][j];<br>}<br>}<br><br><span class="hljs-keyword">auto</span> get = [&amp;](std::vector&lt;<span class="hljs-type">int</span>&gt; a, std::vector&lt;<span class="hljs-type">int</span>&gt; b) {<br>std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-built_in">res</span>(k);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) {<br>res[i] = (<span class="hljs-number">6</span> - a[i] - b[i]) % <span class="hljs-number">3</span>;<br>}<br><span class="hljs-keyword">return</span> res;<br>};<br><br>std::map&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;, <span class="hljs-type">int</span>&gt; cnt;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++) {<br><span class="hljs-keyword">auto</span> comp = <span class="hljs-built_in">get</span>(c[i], c[j]);<br>cnt[comp]++;<br>}<br>}<br><br>ll ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : c) {<br>ans += <span class="hljs-number">1ll</span> * cnt[i] * (cnt[i] - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>}<br><br>std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">'\n'</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br><span class="hljs-type">int</span> T = <span class="hljs-number">1</span>;<br><span class="hljs-comment">// std::cin &gt;&gt; T;</span><br><span class="hljs-keyword">while</span>(T--) {<br><span class="hljs-built_in">solve</span>();<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces-Global-Round-22_A-D题解</title>
      <link href="/project/2022/10/02/Codeforces-Global-Round-22-A-D%E9%A2%98%E8%A7%A3/"/>
      <url>/project/2022/10/02/Codeforces-Global-Round-22-A-D%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>为了督促我补题，以后每场CF都会上传题解。</p><h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p>模拟题，题目大意是给你两种属性的技能，且每一种技能都有n个不同的伤害，当且仅当当前释放的技能属性与上一个技能属性不同时，当前技能伤害<em>2，求如何安排这2</em>n个以达到最大值。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>我们令第一个技能为ai，第二个技能为bi。<br>那么很显然，答案要么是先ai再bi再ai…，要么就是先bi再ai再bi…。<br>两者取max即是答案。****</p><blockquote><p>需要注意可能会爆int。</p></blockquote><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">/* Author: Tanp7 {{{</span><br><span class="hljs-comment"> * Blog: https://zhengzihan.me }}}*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first  <span class="hljs-comment">//{{{</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PLL std::pair<span class="hljs-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> edl std::cout &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> llinf 9223372036854775807</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3c3c3c3c <span class="hljs-comment">// 1010580540, 7f7f7f7f:2139062143</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pl std::cout &lt;&lt; <span class="hljs-string">"\n---------\n"</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for(int i = (int)l; i &lt; (int)n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a) std::cout &lt;&lt; #a &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; (a) &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticases() int T;std::cin&gt;&gt;T;while(T--)solve();</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> cmuticases() int T;scanf(<span class="hljs-string">"%d"</span>,&amp;T);while(T--)solve();</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FAST std::cin.tie(nullptr)-&gt;std::ios_base::sync_with_stdio(false)</span><br><span class="hljs-function">std::mt19937_64 <span class="hljs-title">mrand</span><span class="hljs-params">(std::random_device{}())</span></span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> ull = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> ll mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rnd</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-built_in">mrand</span>() % x;}<br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a,ll b)</span> </span>{ <span class="hljs-keyword">return</span> b?<span class="hljs-built_in">gcd</span>(b,a%b):a;}<br><span class="hljs-function">ll <span class="hljs-title">lcm</span><span class="hljs-params">(ll a, ll b)</span> </span>{ <span class="hljs-keyword">return</span> a / <span class="hljs-built_in">gcd</span>(a, b) * b; }<br><span class="hljs-function">ll <span class="hljs-title">powmod</span><span class="hljs-params">(ll a,ll b)</span> </span>{ll res=<span class="hljs-number">1</span>;a%=mod; <span class="hljs-built_in">assert</span>(b&gt;=<span class="hljs-number">0</span>); <span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>){<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)res=res*a%mod;a=a*a%mod;}<span class="hljs-keyword">return</span> res;}<br><span class="hljs-comment">//using namespace std;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long  <span class="hljs-comment">//}}}</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> n; std::cin &gt;&gt; n;<br><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>std::cin &gt;&gt; a[i];<br>std::vector&lt;<span class="hljs-type">int</span>&gt; v1, v2;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br><span class="hljs-type">int</span> x; std::cin &gt;&gt; x;<br><span class="hljs-keyword">if</span>(a[i] == <span class="hljs-number">0</span>) v1.<span class="hljs-built_in">push_back</span>(x);<br><span class="hljs-keyword">else</span> v2.<span class="hljs-built_in">push_back</span>(x);<br>}<br><span class="hljs-type">int</span> len1 = v1.<span class="hljs-built_in">size</span>(), len2 = v2.<span class="hljs-built_in">size</span>();<br>std::<span class="hljs-built_in">sort</span>(<span class="hljs-built_in">all</span>(v1),std::<span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;());<br>std::<span class="hljs-built_in">sort</span>(<span class="hljs-built_in">all</span>(v2),std::<span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;());<br><span class="hljs-type">int</span> len = std::<span class="hljs-built_in">min</span>(len1, len2);<br>ll ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(len1 &gt; len) {<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) {<br><span class="hljs-keyword">if</span>(v1[i]) ans += <span class="hljs-number">2</span> * v1[i];<br><span class="hljs-keyword">if</span>(v2[i]) ans += <span class="hljs-number">2</span> * v2[i];<br>}<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = len; i &lt; len1; i++)<br>ans += v1[i];<br>}<br><span class="hljs-keyword">if</span>(len2 &gt; len) {<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) {<br><span class="hljs-keyword">if</span>(v1[i]) ans += <span class="hljs-number">2</span> * v1[i];<br><span class="hljs-keyword">if</span>(v2[i]) ans += <span class="hljs-number">2</span> * v2[i];<br>}<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = len; i &lt; len2; i++)<br>ans += v2[i];<br>}<br><span class="hljs-keyword">if</span>(len1 == len2) {<br><span class="hljs-keyword">if</span>(v1[len1 - <span class="hljs-number">1</span>] &lt;= v2[len1 - <span class="hljs-number">1</span>]) {<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>ans += <span class="hljs-number">2</span> * v1[i] + <span class="hljs-number">2</span> * v2[i];<br>ans -= v1[len1 - <span class="hljs-number">1</span>];<br>} <span class="hljs-keyword">else</span> {<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>ans += <span class="hljs-number">2</span> * v1[i] + <span class="hljs-number">2</span> * v2[i];<br>ans -= v2[len2 - <span class="hljs-number">1</span>];<br>}<br>}<br>std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">'\n'</span>;<br>}<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    FAST;<br>    <span class="hljs-built_in">muticases</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><p>简单贪心。给定一个后k个的前缀和，求能否还原出一个不递减的原数组。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>我们可以发现，题目只要让我们判断是否有解。</p><ul><li>当k=1时，始终有解（可以思考一下）。</li></ul><p>首先，对于一个已知的后k个前缀和，我们可以还原出n-k+2，n-k+3…n这几个元素（前缀和的本质），对于这些元素，如果并不是不递减序列，那么答案显然为NO。<br>其次，对于需要构造的第1，第2，第3…第n-k+1，这些元素来说，他们的前缀和已知，而要想构造出不递减的原数组，每个元素存在一个最大值a[n-k+2],为什么这么说呢？（其实很显然）。所以我们只需要判断前n-k+1个元素假设都为a[n-k+2]的话，其和我们令他为sum，这个sum是我们能构造的最大的不递减子序列的前n-k+1项之和，如果题目给定的s[n-k+1]比这个还要大的话，那么答案为NO，否则为YES。</p><blockquote><p>需要注意可能会爆int</p></blockquote><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">/* Author: Tanp7 {{{</span><br><span class="hljs-comment"> * Blog: https://zhengzihan.me }}}*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first  <span class="hljs-comment">//{{{</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PLL std::pair<span class="hljs-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> edl std::cout &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> llinf 9223372036854775807</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3c3c3c3c <span class="hljs-comment">// 1010580540, 7f7f7f7f:2139062143</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pl std::cout &lt;&lt; <span class="hljs-string">"\n---------\n"</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for(int i = (int)l; i &lt; (int)n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a) std::cout &lt;&lt; #a &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; (a) &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticases() int T;std::cin&gt;&gt;T;while(T--)solve();</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> cmuticases() int T;scanf(<span class="hljs-string">"%d"</span>,&amp;T);while(T--)solve();</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FAST std::cin.tie(nullptr)-&gt;std::ios_base::sync_with_stdio(false)</span><br><span class="hljs-function">std::mt19937_64 <span class="hljs-title">mrand</span><span class="hljs-params">(std::random_device{}())</span></span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> ull = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> ll mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rnd</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-built_in">mrand</span>() % x;}<br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a,ll b)</span> </span>{ <span class="hljs-keyword">return</span> b?<span class="hljs-built_in">gcd</span>(b,a%b):a;}<br><span class="hljs-function">ll <span class="hljs-title">lcm</span><span class="hljs-params">(ll a, ll b)</span> </span>{ <span class="hljs-keyword">return</span> a / <span class="hljs-built_in">gcd</span>(a, b) * b; }<br><span class="hljs-function">ll <span class="hljs-title">powmod</span><span class="hljs-params">(ll a,ll b)</span> </span>{ll res=<span class="hljs-number">1</span>;a%=mod; <span class="hljs-built_in">assert</span>(b&gt;=<span class="hljs-number">0</span>); <span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>){<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)res=res*a%mod;a=a*a%mod;}<span class="hljs-keyword">return</span> res;}<br><span class="hljs-comment">//using namespace std;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long  <span class="hljs-comment">//}}}</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> n, k; std::cin &gt;&gt; n &gt;&gt; k;<br><span class="hljs-function">std::vector&lt;ll&gt; <span class="hljs-title">s</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - k + <span class="hljs-number">1</span>; i &lt;= n; i++)<br>std::cin &gt;&gt; s[i];<br><span class="hljs-function">std::vector&lt;ll&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - k + <span class="hljs-number">2</span>; i &lt;= n; i++) <br>a[i] = s[i] - s[i - <span class="hljs-number">1</span>];<br><br><span class="hljs-keyword">if</span>(k == <span class="hljs-number">1</span>) {<br>std::cout &lt;&lt; <span class="hljs-string">"YES\n"</span>;<br><span class="hljs-keyword">return</span>;<br>}<br><br>ll sum = <span class="hljs-number">0</span>;<br>sum = <span class="hljs-number">1ll</span> * (n - k + <span class="hljs-number">1</span>) * a[n - k + <span class="hljs-number">2</span>];<br><span class="hljs-keyword">if</span>(!std::<span class="hljs-built_in">is_sorted</span>(a.<span class="hljs-built_in">begin</span>() + n - k + <span class="hljs-number">2</span>, a.<span class="hljs-built_in">end</span>()) || s[n - k + <span class="hljs-number">1</span>] &gt; sum) {<br>std::cout &lt;&lt; <span class="hljs-string">"NO\n"</span>;<br>} <span class="hljs-keyword">else</span> {<br>std::cout &lt;&lt; <span class="hljs-string">"YES\n"</span>;<br>}<br>}<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>FAST;<br><span class="hljs-built_in">muticases</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><p>博弈论，Alice和Bob轮流在长度为n的序列中取数，直到取完游戏结束，若Alice取到的数之和为偶数则Alice赢，否则Bob赢。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>传统做法是写DP记忆化，但我们发现最优策略之后就可以分类讨论，这里我两种方法都讲一遍。</p><ol><li>记忆化搜索，由于题目数据很小并且可以离线打表，所以考虑记忆化，令dp[i][j][a][b] = 还剩i个奇数没拿，j个偶数没拿，现在是玩家a取，Alice手上数的奇偶性为b的情况Alice能否赢，转移也很简单，只要枚举当前玩家取奇数或者取偶数即可。</li></ol><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Author: Tanp7 {{{</span><br><span class="hljs-comment"> * Blog: https://zhengzihan.me }}}*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) begin(x), end(x) <span class="hljs-comment">//{{{</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i, l, n) for (int i = l; i &lt; n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;  <span class="hljs-comment">//}}}</span><br><br><span class="hljs-type">int</span> dp[<span class="hljs-number">110</span>][<span class="hljs-number">110</span>][<span class="hljs-number">2</span>][<span class="hljs-number">2</span>];<br><span class="hljs-comment">// dp[i][j][a][b] = 还剩i个奇数没拿，j个偶数没拿，当前为a玩家，Alice手上有奇数/偶数（b=0，b=1）个奇数</span><br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> even, <span class="hljs-type">int</span> odd, <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>{  <span class="hljs-comment">// 返回1代表Alice赢，返回0代表Bob赢</span><br><span class="hljs-keyword">if</span> (dp[even][odd][a][b] != <span class="hljs-number">-1</span>)<span class="hljs-comment">//记忆化</span><br><span class="hljs-keyword">return</span> dp[even][odd][a][b];<br><span class="hljs-keyword">if</span> (!odd &amp;&amp; !even) <span class="hljs-comment">//游戏结束</span><br><span class="hljs-keyword">return</span> dp[even][odd][a][b] = <span class="hljs-number">1</span> - b; <span class="hljs-comment">// Alice手里是偶数就返回1，否则返回0</span><br><span class="hljs-keyword">if</span> (a == <span class="hljs-number">1</span>){ <span class="hljs-comment">//当前轮到Bob</span><br><span class="hljs-keyword">if</span> (even &gt; <span class="hljs-number">0</span> &amp;&amp; (<span class="hljs-built_in">dfs</span>(even - <span class="hljs-number">1</span>, odd, <span class="hljs-number">1</span> - a, b) == <span class="hljs-number">0</span>) || odd &gt; <span class="hljs-number">0</span> &amp;&amp; (<span class="hljs-built_in">dfs</span>(even, odd - <span class="hljs-number">1</span>, <span class="hljs-number">1</span> - a, b) == <span class="hljs-number">0</span>))<br><span class="hljs-comment">// Bob拿偶数并且这种局面是Bob赢                       或 Bob拿奇数并且这种局面是Bob赢</span><br><span class="hljs-keyword">return</span> dp[even][odd][a][b] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> dp[even][odd][a][b] = <span class="hljs-number">1</span>;<br>}<br><span class="hljs-keyword">else</span> { <span class="hljs-comment">//当前轮到Alice</span><br><span class="hljs-keyword">if</span> ((even &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">dfs</span>(even - <span class="hljs-number">1</span>, odd, <span class="hljs-number">1</span> - a, b) == <span class="hljs-number">1</span>) || odd &gt; <span class="hljs-number">0</span> &amp;&amp; (<span class="hljs-built_in">dfs</span>(even, odd - <span class="hljs-number">1</span>, <span class="hljs-number">1</span> - a, <span class="hljs-number">1</span> - b) == <span class="hljs-number">1</span>))<br><span class="hljs-comment">// Alice拿偶数并且这种局面是Alice赢                   或 Alice拿奇数并且这种局面是Alice赢</span><br><span class="hljs-keyword">return</span> dp[even][odd][a][b] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> dp[even][odd][a][b] = <span class="hljs-number">0</span>;<br>}<br>}<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> n;<br>std::cin &gt;&gt; n;<br><span class="hljs-type">int</span> odd = <span class="hljs-number">0</span>, even = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br><span class="hljs-type">int</span> x;<br>std::cin &gt;&gt; x;<br><span class="hljs-keyword">if</span> (x &amp; <span class="hljs-number">1</span>)<br>odd++;<br><span class="hljs-keyword">else</span><br>even++;<br>}<br>std::cout &lt;&lt; (<span class="hljs-built_in">dfs</span>(odd, even, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) ? <span class="hljs-string">"Alice\n"</span> : <span class="hljs-string">"Bob\n"</span>);<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(dp));<br><span class="hljs-type">int</span> T;<br>std::cin &gt;&gt; T;<br><span class="hljs-keyword">while</span> (T--) {<br><span class="hljs-built_in">solve</span>();<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><ol start="2"><li>结论。分析奇数个数的奇偶性和偶数个数的奇偶性即可得出答案，官方题解就是这种解法并且说的也很详细，有兴趣的可以去看看。为了简化一下过程，我们令Bob的最优策略就是拿和Alice奇偶性相同的数。<ol><li>当偶数为奇数个时，我们先取偶数，那么到了奇数时Bob先手，此时Alice会输的情况就是（odd % 4 = 2），Bob先手的情况下，Alice不能配成偶数必须经过四的倍数轮-2，（可以思考下为什么），其他情况都是Alice赢。</li><li>当偶数的个数为偶数时，我们还是先取偶数，那么到了奇数时Alice先手，此时Alice会输的情况就是（odd % 4 = 1 or odd % 4 = 2），其他情况都是Alice赢。</li></ol></li></ol><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-comment">/* Author: Tanp7 {{{</span><br><span class="hljs-comment"> * Blog: https://zhengzihan.me }}}*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first  <span class="hljs-comment">//{{{</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PLL std::pair<span class="hljs-string">&lt;ll, ll&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> edl std::cout &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> llinf 9223372036854775807</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3c3c3c3c <span class="hljs-comment">// 1010580540, 7f7f7f7f:2139062143</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pl std::cout &lt;&lt; <span class="hljs-string">"\n---------\n"</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for(int i = (int)l; i &lt; (int)n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a) std::cout &lt;&lt; #a &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; (a) &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticases() int T;std::cin&gt;&gt;T;while(T--)solve();</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> cmuticases() int T;scanf(<span class="hljs-string">"%d"</span>,&amp;T);while(T--)solve();</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FAST std::cin.tie(nullptr)-&gt;std::ios_base::sync_with_stdio(false)</span><br><span class="hljs-function">std::mt19937_64 <span class="hljs-title">mrand</span><span class="hljs-params">(std::random_device{}())</span></span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> ull = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> ll mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rnd</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-built_in">mrand</span>() % x;}<br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a,ll b)</span> </span>{ <span class="hljs-keyword">return</span> b?<span class="hljs-built_in">gcd</span>(b,a%b):a;}<br><span class="hljs-function">ll <span class="hljs-title">lcm</span><span class="hljs-params">(ll a, ll b)</span> </span>{ <span class="hljs-keyword">return</span> a / <span class="hljs-built_in">gcd</span>(a, b) * b; }<br><span class="hljs-function">ll <span class="hljs-title">powmod</span><span class="hljs-params">(ll a,ll b)</span> </span>{ll res=<span class="hljs-number">1</span>;a%=mod; <span class="hljs-built_in">assert</span>(b&gt;=<span class="hljs-number">0</span>); <span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>){<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)res=res*a%mod;a=a*a%mod;}<span class="hljs-keyword">return</span> res;}<br><span class="hljs-comment">//using namespace std;</span><br><span class="hljs-comment">//#define int long long  //}}}</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> n; std::cin &gt;&gt; n;<br><span class="hljs-type">int</span> odd = <span class="hljs-number">0</span>, even = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br><span class="hljs-type">int</span> x; std::cin &gt;&gt; x;<br><span class="hljs-keyword">if</span>(x &amp; <span class="hljs-number">1</span>) odd++;<br><span class="hljs-keyword">else</span> even++;<br>}<br><span class="hljs-type">bool</span> ok = <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// 2 2 1</span><br><span class="hljs-comment">// 2 2 1 1 1</span><br><span class="hljs-comment">// 2 1 1 1</span><br><span class="hljs-comment">// 2 1</span><br><span class="hljs-comment">// 2轮也就是4个奇数</span><br><span class="hljs-comment">// odd % 4 == 2 -&gt; Bob win</span><br><span class="hljs-comment">// else Alice win</span><br><br><span class="hljs-keyword">if</span>(even &amp; <span class="hljs-number">1</span>) {<br><span class="hljs-comment">// Bob first</span><br><span class="hljs-keyword">if</span>(odd % <span class="hljs-number">4</span> == <span class="hljs-number">2</span>) ok = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">else</span> ok = <span class="hljs-literal">true</span>;<br>} <span class="hljs-keyword">else</span> {<br><span class="hljs-comment">// Alice first</span><br><span class="hljs-keyword">if</span>(odd % <span class="hljs-number">4</span> == <span class="hljs-number">2</span> || odd % <span class="hljs-number">4</span> == <span class="hljs-number">1</span>) ok = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">else</span> ok = <span class="hljs-literal">true</span>;<br>}<br>std::cout &lt;&lt; (ok ? <span class="hljs-string">"Alice\n"</span> : <span class="hljs-string">"Bob\n"</span>);<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>FAST;<br><span class="hljs-built_in">muticases</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure><h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><p>模拟题吧，主要是题意比较难理解，给定一个长度为n的a排列，并且通过以下方法构造出b。</p><blockquote><p>对于数组 [1, n] 的ai，我们令ai = x，并且给定一个阈值k。<br><br>如果x &lt;= k, 让bx也就是b(a[i]) = 最后一个大于k的aj(1 &lt;= j &lt; i), 如果不存在这个aj那么令bx = n + 1 <br><br>如果x &gt; k, 让bx = a中最后一个小于等于k的aj(1 &lt;= j &lt; i), 如果不存在这个aj则令bx = 0</p></blockquote><p>题目给你b，让你还原出一种可能的a和k</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p><strong>先看看如何k</strong>：<br>根据题意有 a[i] &lt;= k = b[a[i]] &gt; k<br>因为a是排列，所以正好有k个a[i]满足a[i]≤k<br>意味着正好有k个b[i]满足b[i]&gt;i<br>就是说只要统计b[i]&gt;i的数量，就是k的大小</p><p><strong>再看看如何求a</strong>：<br>a[i] &lt;= k  = b[a[i]] &gt; k<br>a[i] &gt; k = b[a[i]] &lt;= k<br>可以发现a[i]与b[a[i]]在关于k的关系这件事上是相反的<br>抛去a数组看b数组<br>就是说b[i]与i在关于k的关系上是相反的<br>那么就可以转换为图上的问题<br>在b[i]与i间连边，这样最后的图是一颗树(可以试着画几个样例)<br>优先遍历没有儿子的节点(意味着不是题目里的last)，放进a里<br>其实就是拓扑排序</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b[N], n;<br>std::vector&lt;<span class="hljs-type">int</span>&gt; g[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>{<br>std::cin &gt;&gt; n;<br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n + <span class="hljs-number">1</span>; i++) {<br>g[i].<span class="hljs-built_in">clear</span>();<br>}<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) {<br>std::cin &gt;&gt; b[i];<br><span class="hljs-keyword">if</span>(b[i] &gt; i) k++;<br>g[b[i]].<span class="hljs-built_in">push_back</span>(i);<br>}<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n + <span class="hljs-number">1</span>; i++) {<br>std::<span class="hljs-built_in">sort</span>(<span class="hljs-built_in">all</span>(g[i]),[&amp;](<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) -&gt; <span class="hljs-type">bool</span> {<br><span class="hljs-keyword">return</span> g[a].<span class="hljs-built_in">size</span>() &lt; g[b].<span class="hljs-built_in">size</span>();<br>});<br>}<br><br>std::vector&lt;<span class="hljs-type">int</span>&gt; a;<br><span class="hljs-keyword">if</span>(g[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>()) a.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">else</span> a.<span class="hljs-built_in">push_back</span>(n+<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">while</span>(a.<span class="hljs-built_in">size</span>() &lt; n + <span class="hljs-number">1</span>) {<br><span class="hljs-type">int</span> x = a.<span class="hljs-built_in">back</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : g[x]) {<br>a.<span class="hljs-built_in">push_back</span>(i);<br>}<br>}<br><br>std::cout &lt;&lt; k &lt;&lt; <span class="hljs-string">'\n'</span>;<br>n = a.<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) {<br>std::cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">" \n"</span>[i == n - <span class="hljs-number">1</span>];<br>}<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br><span class="hljs-type">int</span> T = <span class="hljs-number">1</span>;<br>std::cin &gt;&gt; T;<br><span class="hljs-keyword">while</span>(T--) {<br><span class="hljs-built_in">solve</span>();<br>}<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>字符串算法H&amp;K&amp;Z&amp;M&amp;A + Kuangbin题单题解</title>
      <link href="/project/2022/08/30/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95H-K-Z-M-A/"/>
      <url>/project/2022/08/30/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95H-K-Z-M-A/</url>
      
        <content type="html"><![CDATA[<h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><blockquote><p>时间复杂度O(n + m) //模式串的长度和匹配串的长度</p></blockquote><h3 id="什么是KMP？"><a href="#什么是KMP？" class="headerlink" title="什么是KMP？"></a>什么是KMP？</h3><p>Knuth-Morris-Pratt字符串查找算法（簡稱為KMP算法）可在一個字符串S內查找一個字W的出現位置。一個詞在不匹配時本身就包含足夠的信息來確定下一個匹配可能的開始位置，此算法利用這一特性以避免重新檢查先前配對的字符 — 维基百科</p><p>通常KMP用于解决模式串匹配问题，即某个字符串在另一个字符串出现的次数，也可以解决最小循环节的问题等等。</p><p>KMP的思想也可以在AC自动机里体现</p><h3 id="KMP算法简介"><a href="#KMP算法简介" class="headerlink" title="KMP算法简介"></a>KMP算法简介</h3><p><a href="https://zh.wikipedia.org/zh-hant/KMP%E7%AE%97%E6%B3%95"> 具体可以看这里 </a></p><h3 id="板子"><a href="#板子" class="headerlink" title="板子"></a>板子</h3><h4 id="1base字符串"><a href="#1base字符串" class="headerlink" title="1base字符串"></a>1base字符串</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s%s"</span>, s + <span class="hljs-number">1</span>, p + <span class="hljs-number">1</span>);<br><span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>), m = <span class="hljs-built_in">strlen</span>(p + <span class="hljs-number">1</span>); <span class="hljs-comment">// p是模式串</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>, j = <span class="hljs-number">0</span>; i &lt;= m; i++) {<br><span class="hljs-keyword">while</span>(j &amp;&amp; p[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];<br><span class="hljs-keyword">if</span>(p[i] == p[j + <span class="hljs-number">1</span>]) j++;<br>ne[i] = j;<br>}<br><br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>; <span class="hljs-comment">// p在s中出现的次数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>, j = <span class="hljs-number">0</span>; i &lt;= n; i++) {<br><span class="hljs-keyword">while</span>(j &amp;&amp; s[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];<br><span class="hljs-keyword">if</span>(s[i] == p[j + <span class="hljs-number">1</span>]) {<br>j++;<br><span class="hljs-keyword">if</span>(j == m) {<br>cnt++;<br>}<br>}<br>}<br><br><br><span class="hljs-comment">// 合并写法</span><br><br>p[m + <span class="hljs-number">1</span>] = <span class="hljs-string">'#'</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = m + <span class="hljs-number">2</span>; i &lt;= n; i++) p[j] = s[i];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>, j = <span class="hljs-number">0</span>; i &lt;= n + m + <span class="hljs-number">1</span>; i++) {<br><span class="hljs-keyword">while</span>(j &amp;&amp; p[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];<br><span class="hljs-keyword">if</span>(p[i] == p[j + <span class="hljs-number">1</span>]) j++;<br>ne[i] = j;<br>}<br><br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = m + <span class="hljs-number">2</span>; i &lt;= n + m + <span class="hljs-number">1</span>; i++) {<br><span class="hljs-keyword">if</span>(ne[i] == m) { <span class="hljs-comment">// 找到了</span><br>ans++;<br>}<br>}<br><br></code></pre></td></tr></tbody></table></figure><h4 id="0base字符串"><a href="#0base字符串" class="headerlink" title="0base字符串"></a>0base字符串</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> n = s.<span class="hljs-built_in">length</span>();<br><span class="hljs-built_in">memset</span>(ne, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(ne)); <span class="hljs-comment">// 0base需要把next数组初始化为-1是因为0base字符串匹配一直失败后需要满足 j + 1 = 0。</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">-1</span>; i &lt; n; i++) {<br>    <span class="hljs-keyword">while</span>(j != <span class="hljs-number">-1</span> &amp;&amp; s[i] != s[j + <span class="hljs-number">1</span>]) j = ne[j];<br>    <span class="hljs-keyword">if</span>(s[i] == s[j + <span class="hljs-number">1</span>]) j++;<br>    ne[i] = j;<br>}<br><br><span class="hljs-comment">// 或者你也可以这样写</span><br><br><span class="hljs-type">int</span> n = s.<span class="hljs-built_in">length</span>();<br>ne[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">-1</span>; i &lt; n; i++) {<br>    <span class="hljs-keyword">while</span>(j != <span class="hljs-number">-1</span> &amp;&amp; s[i] != s[j + <span class="hljs-number">1</span>]) j = ne[j];<br>    ne[i] = (s[i] == s[j + <span class="hljs-number">1</span>]) ? ++j : <span class="hljs-number">-1</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="最后奉上neal-wu的KMP板子"><a href="#最后奉上neal-wu的KMP板子" class="headerlink" title="最后奉上neal_wu的KMP板子"></a>最后奉上neal_wu的KMP板子</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;array&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cassert&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">namespace</span> KMP {<br>    <span class="hljs-comment">// Returns the next length to search from (the longest suffix of the current string that is a prefix of the pattern)</span><br>    <span class="hljs-comment">// after starting from the prefix `len` and adding char `c`.</span><br>    <span class="hljs-comment">// Runs in worst case O(len) but amortizes to O(1) in most situations.</span><br>    <span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">typename</span> T_elem&gt;</span><br><span class="hljs-function">    <span class="hljs-type">int</span> <span class="hljs-title">get_link</span><span class="hljs-params">(<span class="hljs-type">const</span> T &amp;pattern, <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt; &amp;fail, <span class="hljs-type">int</span> len, <span class="hljs-type">const</span> T_elem &amp;c)</span> </span>{<br>        <span class="hljs-keyword">while</span> (len &gt; <span class="hljs-number">0</span> &amp;&amp; pattern[len] != c)<br>            len = fail[len];<br><br>        <span class="hljs-keyword">if</span> (pattern[len] == c)<br>            len++;<br><br>        <span class="hljs-keyword">return</span> len;<br>    }<br><br>    <span class="hljs-comment">// Computes the failure function on `pattern` so that we can search for it in future strings.</span><br>    <span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function">    vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">compute_failure_function</span><span class="hljs-params">(<span class="hljs-type">const</span> T &amp;pattern)</span> </span>{<br>        <span class="hljs-comment">// fail[i] = for the prefix [0, i) of `pattern`, the length of the longest proper prefix that is also a suffix.</span><br>        <span class="hljs-type">int</span> n = <span class="hljs-built_in">int</span>(pattern.<span class="hljs-built_in">size</span>());<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">fail</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) {<br>            len = <span class="hljs-built_in">get_link</span>(pattern, fail, len, pattern[i]);<br>            fail[i + <span class="hljs-number">1</span>] = len;<br>        }<br><br>        <span class="hljs-keyword">return</span> fail;<br>    }<br><br>    <span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function">    vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">find_matches</span><span class="hljs-params">(<span class="hljs-type">const</span> T &amp;pattern, <span class="hljs-type">const</span> T &amp;text, <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt; &amp;fail)</span> </span>{<br>        <span class="hljs-keyword">if</span> (pattern.<span class="hljs-built_in">size</span>() &gt; text.<span class="hljs-built_in">size</span>())<br>            <span class="hljs-keyword">return</span> {};<br><br>        vector&lt;<span class="hljs-type">int</span>&gt; matches;<br>        <span class="hljs-type">int</span> n = <span class="hljs-built_in">int</span>(pattern.<span class="hljs-built_in">size</span>()), m = <span class="hljs-built_in">int</span>(text.<span class="hljs-built_in">size</span>());<br>        <span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) {<br>            len = <span class="hljs-built_in">get_link</span>(pattern, fail, len, text[i]);<br><br>            <span class="hljs-comment">// Check for a match whose last character is at index i.</span><br>            <span class="hljs-keyword">if</span> (len == n) {<br>                matches.<span class="hljs-built_in">push_back</span>(i - (n - <span class="hljs-number">1</span>));<br>                len = fail[len];<br>            }<br>        }<br><br>        <span class="hljs-keyword">return</span> matches;<br>    }<br><br>    <span class="hljs-comment">// Finds all indices where `pattern` occurs within `text`.</span><br>    <span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function">    vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">find_matches</span><span class="hljs-params">(<span class="hljs-type">const</span> T &amp;pattern, <span class="hljs-type">const</span> T &amp;text)</span> </span>{<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">find_matches</span>(pattern, text, <span class="hljs-built_in">compute_failure_function</span>(pattern));<br>    }<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> NEAL_DEBUG</span><br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    string pattern, text;<br>    cin &gt;&gt; pattern &gt;&gt; text;<br>    vector&lt;<span class="hljs-type">int</span>&gt; matches = KMP::<span class="hljs-built_in">find_matches</span>(pattern, text);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> match : matches)<br>        cout &lt;&lt; match &lt;&lt; <span class="hljs-string">'\n'</span>;<br>}<br><br><br></code></pre></td></tr></tbody></table></figure><h2 id="EXKMP-Z算法"><a href="#EXKMP-Z算法" class="headerlink" title="EXKMP(Z算法)"></a>EXKMP(Z算法)</h2><blockquote><p>时间复杂度O(n)</p></blockquote><h3 id="什么是EXKMP？"><a href="#什么是EXKMP？" class="headerlink" title="什么是EXKMP？"></a>什么是EXKMP？</h3><p>Z算法（Z-Algorithm）是一种字符串算法，在国内也常常被叫做拓展KMP算法。</p><p>我们知道，KMP算法的核心就是那张部分匹配表，其实它也被称为前缀函数，记作 \pi 。对一个字符串而言，我们定义既是它前缀又是它后缀的字符串是它的border，那 \pi(i) 就表示 s[0..i] 的最长border的长度。或者说， \pi(i) 是满足 s[0..x-1]=s[i-x+1..i] 的最大的 x （特别地，令 \pi(0)=0 ）。</p><p>而Z算法的核心是Z函数，它的定义与 \pi 非常相似。 Z(i) 定义为 s 与 s[i..n-1] 的最长公共前缀（LCP）。或者说，Z(i) 是满足 s[0..x-1]=s[i..i+x-1] 的最大的 x （特别地，令 Z(0)=0 [1]）。</p><h3 id="EXKMP简介"><a href="#EXKMP简介" class="headerlink" title="EXKMP简介"></a>EXKMP简介</h3><p><a href="https://zhuanlan.zhihu.com/p/403256847#:~:text=Z%E7%AE%97%E6%B3%95%EF%BC%88Z%2DAlgorithm%EF%BC%89,%E6%9C%80%E9%95%BFborder%E7%9A%84%E9%95%BF%E5%BA%A6%E3%80%82"> 具体可以看这里 </a></p><h3 id="EXKMP板子"><a href="#EXKMP板子" class="headerlink" title="EXKMP板子"></a>EXKMP板子</h3><h4 id="1base字符串-1"><a href="#1base字符串-1" class="headerlink" title="1base字符串"></a>1base字符串</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>, s + <span class="hljs-number">1</span>);<br><span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br><span class="hljs-type">int</span> L = <span class="hljs-number">1</span>, R = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) {<br>    <span class="hljs-keyword">if</span>(i &gt; R) z[i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> z[i] = std::<span class="hljs-built_in">min</span>(z[i - L + <span class="hljs-number">1</span>], R - i + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">while</span>(i + z[i] &lt;= n &amp;&amp; s[z[i] + <span class="hljs-number">1</span>] == s[i + z[i]]) z[i]++;<br>    <span class="hljs-keyword">if</span>(i + z[i] - <span class="hljs-number">1</span> &gt; R) L = i, R = i + z[i] - <span class="hljs-number">1</span>;<br>}<br><br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) {<br>    <span class="hljs-keyword">if</span>(i + z[i] == <span class="hljs-number">0</span>) <span class="hljs-comment">// 结尾为n的后缀与前缀相同</span><br>        ans = std::<span class="hljs-built_in">max</span>(ans, z[i]);<br>}<br><br><span class="hljs-comment">// ans = 最长后缀 = 前缀</span><br><br></code></pre></td></tr></tbody></table></figure><h4 id="0base字符串-1"><a href="#0base字符串-1" class="headerlink" title="0base字符串"></a>0base字符串</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br>std::string s; std::cin &gt;&gt; s;<br><span class="hljs-type">int</span> n = s.<span class="hljs-built_in">length</span>();<br><span class="hljs-type">int</span> L = <span class="hljs-number">0</span>, R = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) {<br>    <span class="hljs-keyword">if</span>(i &gt;= R) z[i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> z[i] = std::<span class="hljs-built_in">min</span>(z[i - L], R - i);<br>    <span class="hljs-keyword">while</span>(i + z[i] &lt; n &amp;&amp; s[z[i]] == s[i + z[i]]) z[i]++;<br>    <span class="hljs-keyword">if</span>(i + z[i] &gt; R) L = i, R = i + z[i];<br>}<br><br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br>    <span class="hljs-keyword">if</span>(i + z[i] == <span class="hljs-number">0</span>) <span class="hljs-comment">// 结尾为n的后缀与前缀相同</span><br>        ans = std::<span class="hljs-built_in">max</span>(ans, z[i]);<br>}<br><br><br></code></pre></td></tr></tbody></table></figure><h4 id="最后奉上neal-wu的EXKMP板子"><a href="#最后奉上neal-wu的EXKMP板子" class="headerlink" title="最后奉上neal_wu的EXKMP板子"></a>最后奉上neal_wu的EXKMP板子</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;array&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cassert&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-comment">// Also known as "extended KMP"</span><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;</span><br><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">z_algorithm</span><span class="hljs-params">(<span class="hljs-type">const</span> T &amp;pattern)</span> </span>{<br>    <span class="hljs-comment">// Z[i] = for the suffix [i, n) of pattern, the longest prefix that is also a prefix of pattern.</span><br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">int</span>(pattern.<span class="hljs-built_in">size</span>());<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">Z</span><span class="hljs-params">(n, <span class="hljs-number">0</span>)</span></span>;<br>    Z[<span class="hljs-number">0</span>] = n;<br>    <span class="hljs-type">int</span> loc = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) {<br>        <span class="hljs-keyword">if</span> (i &lt; loc + Z[loc])<br>            Z[i] = std::<span class="hljs-built_in">min</span>(Z[i - loc], loc + Z[loc] - i);<br><br>        <span class="hljs-keyword">while</span> (i + Z[i] &lt; n &amp;&amp; pattern[Z[i]] == pattern[i + Z[i]])<br>            Z[i]++;<br><br>        <span class="hljs-comment">// Find the location with the furthest-reaching umbrella.</span><br>        <span class="hljs-keyword">if</span> (i + Z[i] &gt; loc + Z[loc])<br>            loc = i;<br>    }<br><br>    <span class="hljs-keyword">return</span> Z;<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> NEAL_DEBUG</span><br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    std::string pattern, text;<br>    std::cin &gt;&gt; pattern &gt;&gt; text;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">int</span>(pattern.<span class="hljs-built_in">size</span>()), m = <span class="hljs-built_in">int</span>(text.<span class="hljs-built_in">size</span>());<br><br>    std::vector&lt;<span class="hljs-type">int</span>&gt; Z = <span class="hljs-built_in">z_algorithm</span>(pattern + text);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        <span class="hljs-keyword">if</span> (Z[i + n] &gt;= n)<br>            <span class="hljs-comment">// Found a match starting at index i of text</span><br>            std::cout &lt;&lt; i &lt;&lt; <span class="hljs-string">'\n'</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure><h2 id="Manacher算法（马拉车算法）"><a href="#Manacher算法（马拉车算法）" class="headerlink" title="Manacher算法（马拉车算法）"></a>Manacher算法（马拉车算法）</h2><blockquote><p>时间复杂度O(n)</p></blockquote><h3 id="什么是马拉车？"><a href="#什么是马拉车？" class="headerlink" title="什么是马拉车？"></a>什么是马拉车？</h3><p>马拉车算法（英语：Manacher’s algorithm）利用回文字符串和子回文字符串中观察到的一些特点，以在线性时间内找出字符串的最长回文子串。</p><p>首先我们观察一下回文字符串可知，回文字符串都是对称的。而且如果一个长回文字符串的对称点左面包含一个小的回文字符串，那么对称过去到右面也必然会包含一个小的回文字符串，比如“dacabacad”这个字符串中，对称点b左面有一个回文字符串“aca”，右面也会对称出一个回文字符串“aca”。<br>— 维基百科</p><h3 id="马拉车简介"><a href="#马拉车简介" class="headerlink" title="马拉车简介"></a>马拉车简介</h3><p><a href="https://oi-wiki.org/string/manacher/#manacher-%E7%AE%97%E6%B3%95"> 具体可以看这里 </a></p><h3 id="manacher板子"><a href="#manacher板子" class="headerlink" title="manacher板子"></a>manacher板子</h3><h4 id="1base字符串-2"><a href="#1base字符串-2" class="headerlink" title="1base字符串"></a>1base字符串</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-comment">/* Author: Tanp7 {{{</span><br><span class="hljs-comment"> * Blog: https://zhengzihan.me }}}*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) begin(x),end(x) <span class="hljs-comment">//{{{</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> LOCAL <span class="hljs-comment">// https://github.com/p-ranav/pprint</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> de(...)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> de2(...)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>; <span class="hljs-comment">//}}}</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-type">char</span> s[N], t[N + N];<br><span class="hljs-type">int</span> p[N + N]; <span class="hljs-comment">// 类似Z算法（exkmp），记录当前下标最大的回文半径</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">manacher</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br><span class="hljs-type">int</span> m = <span class="hljs-number">0</span>;<br>t[++m] = <span class="hljs-string">'$'</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) t[++m] = s[i], t[++m] = <span class="hljs-string">'$'</span>;<br><br><span class="hljs-type">int</span> M = <span class="hljs-number">0</span>, R = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) {<br><span class="hljs-keyword">if</span>(i &gt; R) p[i] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> p[i] = std::<span class="hljs-built_in">min</span>(p[<span class="hljs-number">2</span> * M - i], R - i + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">while</span>(i - p[i] &gt; <span class="hljs-number">0</span> &amp;&amp; t[i - p[i]] == t[i + p[i]]) p[i]++;<br><span class="hljs-keyword">if</span>(i + p[i] - <span class="hljs-number">1</span> &gt; R) M = i, R = i + p[i] - <span class="hljs-number">1</span>;<br>}<br><br><span class="hljs-type">int</span> Longest = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>Longest = std::<span class="hljs-built_in">max</span>(Longest, p[i]);<br><br>Longest -= <span class="hljs-number">1</span>; <span class="hljs-comment">// 去掉带符号</span><br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br><span class="hljs-built_in">manacher</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><br></code></pre></td></tr></tbody></table></figure><h4 id="0base字符串-2"><a href="#0base字符串-2" class="headerlink" title="0base字符串"></a>0base字符串</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">char</span> s1[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">manacher_init</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> s[], <span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; l)</span> </span>{<br>s1[<span class="hljs-number">0</span>] = <span class="hljs-string">'#'</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l; i += <span class="hljs-number">1</span>) {<br>s1[(i &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>] = s[i];<br>s1[(i &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">2</span>] = <span class="hljs-string">'#'</span>;<br>}<br>}<br><br><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">manacher</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> s[], <span class="hljs-type">int</span> l)</span> </span>{<br><span class="hljs-built_in">manacher_init</span>(s, l);<br><br>l += l + <span class="hljs-number">1</span>;<br><br><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">p</span><span class="hljs-params">(l)</span></span>;<br><span class="hljs-type">int</span> M = <span class="hljs-number">0</span>, R = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l; i += <span class="hljs-number">1</span>) {<br><span class="hljs-keyword">if</span> (i &lt; R) p[i] = std::<span class="hljs-built_in">min</span>(p[<span class="hljs-number">2</span> * M - i], R - i);<br><span class="hljs-keyword">else</span> p[i] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (i - p[i] &gt;= <span class="hljs-number">0</span> &amp;&amp; i + p[i] &lt; l &amp;&amp; s1[i - p[i]] == s1[i + p[i]]) ++p[i];<br><span class="hljs-keyword">if</span> (R &lt; i + p[i]) M = i, R = i + p[i];<br>}<br><br><span class="hljs-keyword">return</span> p;<br>}<br><br></code></pre></td></tr></tbody></table></figure><h4 id="最后奉上neal-wu的manacher板子"><a href="#最后奉上neal-wu的manacher板子" class="headerlink" title="最后奉上neal_wu的manacher板子"></a>最后奉上neal_wu的manacher板子</h4><blockquote><p>没有。。</p></blockquote><h2 id="kuangbin带你飞-专题十六-KMP-amp-扩展KMP-amp-Manacher-题解"><a href="#kuangbin带你飞-专题十六-KMP-amp-扩展KMP-amp-Manacher-题解" class="headerlink" title="[kuangbin带你飞]专题十六 KMP &amp; 扩展KMP &amp; Manacher 题解"></a>[kuangbin带你飞]专题十六 KMP &amp; 扩展KMP &amp; Manacher 题解</h2><h3 id="A-Number-SequenceHDU-1711"><a href="#A-Number-SequenceHDU-1711" class="headerlink" title="A - Number SequenceHDU - 1711"></a>A - Number SequenceHDU - 1711</h3><p>Given two sequences of numbers : a[1], a[2], …… , a[N], and b[1], b[2], …… , b[M] (1 &lt;= M &lt;= 10000, 1 &lt;= N &lt;= 1000000). Your task is to find a number K which make a[K] = b[1], a[K + 1] = b[2], …… , a[K + M - 1] = b[M]. If there are more than one K exist, output the smallest one.</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>The first line of input is a number T which indicate the number of cases. Each case contains three lines. The first line is two numbers N and M (1 &lt;= M &lt;= 10000, 1 &lt;= N &lt;= 1000000). The second line contains N integers which indicate a[1], a[2], …… , a[N]. The third line contains M integers which indicate b[1], b[2], …… , b[M]. All integers are in the range of [-1000000, 1000000].</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>For each test case, you should output one line which only contain K described above. If no such K exists, output -1 instead.</p><h5 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h5><h6 id="Inputcopy"><a href="#Inputcopy" class="headerlink" title="Inputcopy"></a>Inputcopy</h6><p>2<br>13 5<br>1 2 1 2 3 1 2 3 1 3 2 1 2<br>1 2 3 1 3<br>13 5<br>1 2 1 2 3 1 2 3 1 3 2 1 2<br>1 2 3 2 1</p><h6 id="Outputcopy"><a href="#Outputcopy" class="headerlink" title="Outputcopy"></a>Outputcopy</h6><p>6<br>-1</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>KMP裸题</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-comment">//#pragma GCC target("avx,avx2,fma")</span><br><span class="hljs-comment">//#pragma GCC optimize("unroll-loops,Ofast")</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> ne[N+N];<br><span class="hljs-type">int</span> a[N], b[N+N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test_case</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> n, m;<br>std::cin &gt;&gt; n &gt;&gt; m;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) std::cin &gt;&gt; a[i];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) std::cin &gt;&gt; b[i];<br>b[m + <span class="hljs-number">1</span>] = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = m + <span class="hljs-number">2</span>; i &lt;= n; i++, j++) b[j] = a[i];<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n + m + <span class="hljs-number">1</span>; i++) {<br><span class="hljs-keyword">while</span>(j &amp;&amp; b[i] != b[j + <span class="hljs-number">1</span>]) j = ne[j];<br><span class="hljs-keyword">if</span>(b[i] == b[j + <span class="hljs-number">1</span>]) j++;<br>ne[i] = j;<br>}<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = m + <span class="hljs-number">1</span>; i &lt;= n + m + <span class="hljs-number">1</span>; i++) <br><span class="hljs-keyword">if</span>(ne[i] == m) {<br>std::cout &lt;&lt; i - <span class="hljs-number">2</span> * m &lt;&lt; <span class="hljs-string">'\n'</span>;<br><span class="hljs-keyword">return</span>;<br>}<br>std::cout &lt;&lt; <span class="hljs-string">"-1\n"</span>;<br>};<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><span class="hljs-type">int</span> T = <span class="hljs-number">1</span>;<br>std::cin &gt;&gt; T;<br><span class="hljs-keyword">while</span> (T--) {<br><span class="hljs-built_in">test_case</span>();<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><br></code></pre></td></tr></tbody></table></figure><h3 id="B-Oulipo-HDU-1686"><a href="#B-Oulipo-HDU-1686" class="headerlink" title="B - Oulipo HDU - 1686"></a>B - Oulipo HDU - 1686</h3><p>The French author Georges Perec (1936�C1982) once wrote a book, La disparition, without the letter ‘e’. He was a member of the Oulipo group. A quote from the book:</p><p>Tout avait Pair normal, mais tout s’affirmait faux. Tout avait Fair normal, d’abord, puis surgissait l’inhumain, l’affolant. Il aurait voulu savoir où s’articulait l’association qui l’unissait au roman : stir son tapis, assaillant à tout instant son imagination, l’intuition d’un tabou, la vision d’un mal obscur, d’un quoi vacant, d’un non-dit : la vision, l’avision d’un oubli commandant tout, où s’abolissait la raison : tout avait l’air normal mais…</p><p>Perec would probably have scored high (or rather, low) in the following contest. People are asked to write a perhaps even meaningful text on some subject with as few occurrences of a given “word” as possible. Our task is to provide the jury with a program that counts these occurrences, in order to obtain a ranking of the competitors. These competitors often write very long texts with nonsense meaning; a sequence of 500,000 consecutive ‘T’s is not unusual. And they never use spaces.</p><p>So we want to quickly find out how often a word, i.e., a given string, occurs in a text. More formally: given the alphabet {‘A’, ‘B’, ‘C’, …, ‘Z’} and two finite strings over that alphabet, a word W and a text T, count the number of occurrences of W in T. All the consecutive characters of W must exactly match consecutive characters of T. Occurrences may overlap.</p><h4 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h4><p>The first line of the input file contains a single number: the number of test cases to follow. Each test case has the following format:</p><p>One line with the word W, a string over {‘A’, ‘B’, ‘C’, …, ‘Z’}, with 1 ≤ |W| ≤ 10,000 (here |W| denotes the length of the string W).<br>One line with the text T, a string over {‘A’, ‘B’, ‘C’, …, ‘Z’}, with |W| ≤ |T| ≤ 1,000,000.</p><h4 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h4><p>For every test case in the input file, the output should contain a single number, on a single line: the number of occurrences of the word W in the text T.</p><h5 id="Sample-1"><a href="#Sample-1" class="headerlink" title="Sample"></a>Sample</h5><h6 id="Inputcopy-1"><a href="#Inputcopy-1" class="headerlink" title="Inputcopy"></a>Inputcopy</h6><p>3<br>BAPC<br>BAPC<br>AZA<br>AZAZAZA<br>VERDI<br>AVERDXIVYERDIAN</p><h6 id="Outputcopy-1"><a href="#Outputcopy-1" class="headerlink" title="Outputcopy"></a>Outputcopy</h6><p>1<br>3<br>0</p><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>一眼kmp，求p在s中出现的次数</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-comment">/* Author: Tanp7 {{{</span><br><span class="hljs-comment"> * Blog: https://zhengzihan.me }}}*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) begin(x),end(x) <span class="hljs-comment">//{{{</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for (int i = l; i &lt; n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>; <span class="hljs-comment">//}}}</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e6</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-type">char</span> a[N + N], b[N];<br><span class="hljs-type">int</span> ne[N + N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s %s"</span>, a + <span class="hljs-number">1</span>, b + <span class="hljs-number">1</span>);<br><span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(a + <span class="hljs-number">1</span>), m = <span class="hljs-built_in">strlen</span>(b + <span class="hljs-number">1</span>);<br>a[n + <span class="hljs-number">1</span>] = <span class="hljs-string">'#'</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = n + <span class="hljs-number">2</span>; i &lt;= m; i++, j++) a[j] = b[i];<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n + m + <span class="hljs-number">1</span>; i++) {<br><span class="hljs-keyword">while</span>(j &amp;&amp; a[i] != a[j + <span class="hljs-number">1</span>]) j = ne[j];<br><span class="hljs-keyword">if</span>(a[i] == a[j + <span class="hljs-number">1</span>]) j++;<br>ne[i] = j;<br>}<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n + <span class="hljs-number">2</span>; i &lt;= n + m + <span class="hljs-number">1</span>; i++) {<br><span class="hljs-keyword">if</span>(ne[i] == n) ans++;<br>}<br>std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">'\n'</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> T; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;T);<br>    <span class="hljs-keyword">while</span>(T--) {<br>        <span class="hljs-built_in">solve</span>();<br>    }<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><br></code></pre></td></tr></tbody></table></figure><h3 id="C-剪花布条-HDU-2087"><a href="#C-剪花布条-HDU-2087" class="headerlink" title="C - 剪花布条 HDU - 2087"></a>C - 剪花布条 HDU - 2087</h3><p>一块花布条，里面有些图案，另有一块直接可用的小饰条，里面也有一些图案。对于给定的花布条和小饰条，计算一下能从花布条中尽可能剪出几块小饰条来呢？</p><h4 id="Input-2"><a href="#Input-2" class="headerlink" title="Input"></a>Input</h4><p>输入中含有一些数据，分别是成对出现的花布条和小饰条，其布条都是用可见ASCII字符表示的，可见的ASCII字符有多少个，布条的花纹也有多少种花样。花纹条和小饰条不会超过1000个字符长。如果遇见#字符，则不再进行工作。 </p><h4 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a>Output</h4><p>输出能从花纹布中剪出的最多小饰条个数，如果一块都没有，那就老老实实输出0，每个结果之间应换行。</p><h5 id="Sample-2"><a href="#Sample-2" class="headerlink" title="Sample"></a>Sample</h5><h6 id="Inputcopy-2"><a href="#Inputcopy-2" class="headerlink" title="Inputcopy"></a>Inputcopy</h6><p>abcde a3<br>aaaaaa  aa</p><h6 id="Outputcopy-2"><a href="#Outputcopy-2" class="headerlink" title="Outputcopy"></a>Outputcopy</h6><p>0<br>3</p><h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>kmp一下，然后每次ne[i] = m时，i += m - 1即可</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Author: Tanp7 {{{</span><br><span class="hljs-comment"> * Blog: https://zhengzihan.me }}}*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) begin(x),end(x) <span class="hljs-comment">//{{{</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for (int i = l; i &lt; n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>; <span class="hljs-comment">//}}}</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">char</span> a[N], b[N + N];<br><span class="hljs-type">int</span> ne[N + N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-keyword">while</span>(std::cin &gt;&gt; a + <span class="hljs-number">1</span> &gt;&gt; b + <span class="hljs-number">1</span>) {<br><span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>] == <span class="hljs-string">'#'</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memset</span>(ne, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(ne));<br><span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(a + <span class="hljs-number">1</span>), m = <span class="hljs-built_in">strlen</span>(b + <span class="hljs-number">1</span>);<br>b[m + <span class="hljs-number">1</span>] = <span class="hljs-string">'#'</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = m + <span class="hljs-number">2</span>; i &lt;= n; i++, j++) b[j] = a[i];<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n + m + <span class="hljs-number">1</span>; i++) {<br><span class="hljs-keyword">while</span>(j &amp;&amp; b[i] != b[j + <span class="hljs-number">1</span>]) j = ne[j];<br><span class="hljs-keyword">if</span>(b[i] == b[j + <span class="hljs-number">1</span>]) j++;<br>ne[i] = j;<br>}<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = m + <span class="hljs-number">1</span>; i &lt;= n + m + <span class="hljs-number">1</span>; i++) {<br><span class="hljs-keyword">if</span>(ne[i] == m) ans++, i += m - <span class="hljs-number">1</span>;<br>}<br>std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">'\n'</span>;<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure><h3 id="D-Cyclic-Nacklace-HDU-3746"><a href="#D-Cyclic-Nacklace-HDU-3746" class="headerlink" title="D - Cyclic Nacklace HDU - 3746"></a>D - Cyclic Nacklace HDU - 3746</h3><p>CC always becomes very depressed at the end of this month, he has checked his credit card yesterday, without any surprise, there are only 99.9 yuan left. he is too distressed and thinking about how to tide over the last days. Being inspired by the entrepreneurial spirit of “HDU CakeMan”, he wants to sell some little things to make money. Of course, this is not an easy task.</p><p>As Christmas is around the corner, Boys are busy in choosing christmas presents to send to their girlfriends. It is believed that chain bracelet is a good choice. However, Things are not always so simple, as is known to everyone, girl’s fond of the colorful decoration to make bracelet appears vivid and lively, meanwhile they want to display their mature side as college students. after CC understands the girls demands, he intends to sell the chain bracelet called CharmBracelet. The CharmBracelet is made up with colorful pearls to show girls’ lively, and the most important thing is that it must be connected by a cyclic chain which means the color of pearls are cyclic connected from the left to right. And the cyclic count must be more than one. If you connect the leftmost pearl and the rightmost pearl of such chain, you can make a CharmBracelet. Just like the pictrue below, this CharmBracelet’s cycle is 9 and its cyclic count is 2:</p><p>Now CC has brought in some ordinary bracelet chains, he wants to buy minimum number of pearls to make CharmBracelets so that he can save more money. but when remaking the bracelet, he can only add color pearls to the left end and right end of the chain, that is to say, adding to the middle is forbidden.<br>CC is satisfied with his ideas and ask you for help.</p><h4 id="Input-3"><a href="#Input-3" class="headerlink" title="Input"></a>Input</h4><p>The first line of the input is a single integer T ( 0 &lt; T &lt;= 100 ) which means the number of test cases.<br>Each test case contains only one line describe the original ordinary chain to be remade. Each character in the string stands for one pearl and there are 26 kinds of pearls being described by ‘a’ ~’z’ characters. The length of the string Len: ( 3 &lt;= Len &lt;= 100000 ).</p><h4 id="Output-3"><a href="#Output-3" class="headerlink" title="Output"></a>Output</h4><p>For each case, you are required to output the minimum count of pearls added to make a CharmBracelet.</p><h5 id="Sample-3"><a href="#Sample-3" class="headerlink" title="Sample"></a>Sample</h5><h6 id="Inputcopy-3"><a href="#Inputcopy-3" class="headerlink" title="Inputcopy"></a>Inputcopy</h6><p>3<br>aaa<br>abca<br>abcde</p><h6 id="Outputcopy-3"><a href="#Outputcopy-3" class="headerlink" title="Outputcopy"></a>Outputcopy</h6><p>0<br>2<br>5</p><h4 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h4><p>这题利用了next数组的性质，即 n - ne[n] = 最小循环节<br>如果不能理解的可以自己举几个例子手推一下，这个结论还是很有用的</p><p>这道题要求我们把字符串s补成循环节的倍数，因为可以从头、尾插入，所以只需要求一遍正串的答案，再求一遍反串的答案，两者取min即为最终答案。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-comment">/* Author: Tanp7 {{{</span><br><span class="hljs-comment"> * Blog: https://zhengzihan.me }}}*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) begin(x),end(x) <span class="hljs-comment">//{{{</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for (int i = l; i &lt; n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>; <span class="hljs-comment">//}}}</span><br><br><span class="hljs-type">char</span> s[<span class="hljs-number">100010</span>];<br><span class="hljs-type">char</span> r[<span class="hljs-number">100010</span>];<br><span class="hljs-type">int</span> ne[<span class="hljs-number">100010</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>{<br>std::cin &gt;&gt; s + <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = n; i &lt;= n; i++, j--) r[i] = s[j];<br><span class="hljs-built_in">memset</span>(ne, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> ne);<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) {<br><span class="hljs-keyword">while</span>(j &amp;&amp; s[i] != s[j + <span class="hljs-number">1</span>]) j = ne[j];<br><span class="hljs-keyword">if</span>(s[i] == s[j + <span class="hljs-number">1</span>]) j++;<br>ne[i] = j;<br>}<br><span class="hljs-type">int</span> ans = n - ne[n];<br><span class="hljs-keyword">if</span>(n % ans != <span class="hljs-number">0</span> || ans == n) {<br><span class="hljs-type">int</span> p = ans;<br><span class="hljs-keyword">while</span>(ans &lt;= n) ans += p;<br>ans -= n;<br>} <span class="hljs-keyword">else</span> {<br>ans = <span class="hljs-number">0</span>;<br>}<br><span class="hljs-built_in">memset</span>(ne, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(ne));<br>j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) {<br><span class="hljs-keyword">while</span>(j &amp;&amp; r[i] != r[j + <span class="hljs-number">1</span>]) j = ne[j];<br><span class="hljs-keyword">if</span>(r[i] == r[j + <span class="hljs-number">1</span>]) j++;<br>ne[i] = j;<br>}<br><span class="hljs-type">int</span> res = n - ne[n];<br><span class="hljs-keyword">if</span>(n % res != <span class="hljs-number">0</span> || res == n) {<br><span class="hljs-type">int</span> p = res;<br><span class="hljs-keyword">while</span>(res &lt;= n)  <br>res += p;<br>res -= n;<br>} <span class="hljs-keyword">else</span> {<br>res = <span class="hljs-number">0</span>;<br>}<br>std::cout &lt;&lt; std::<span class="hljs-built_in">min</span>(res, ans) &lt;&lt; <span class="hljs-string">'\n'</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><span class="hljs-type">int</span> T; std::cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span>(T--) {<br>        <span class="hljs-built_in">solve</span>();<br>    }<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><br><br></code></pre></td></tr></tbody></table></figure><h3 id="E-Period-HDU-1358"><a href="#E-Period-HDU-1358" class="headerlink" title="E - Period HDU - 1358"></a>E - Period HDU - 1358</h3><p>For each prefix of a given string S with N characters (each character has an ASCII code between 97 and 126, inclusive), we want to know whether the prefix is a periodic string. That is, for each i (2 &lt;= i &lt;= N) we want to know the largest K &gt; 1 (if there is one) such that the prefix of S with length i can be written as AK , that is A concatenated K times, for some string A. Of course, we also want to know the period K.</p><h4 id="Input-4"><a href="#Input-4" class="headerlink" title="Input"></a>Input</h4><p>The input file consists of several test cases. Each test case consists of two lines. The first one contains N (2 &lt;= N &lt;= 1 000 000) �C the size of the string S. The second line contains the string S. The input file ends with a line, having the number zero on it.</p><h4 id="Output-4"><a href="#Output-4" class="headerlink" title="Output"></a>Output</h4><p>For each test case, output “Test case #” and the consecutive test case number on a single line; then, for each prefix with length i that has a period K &gt; 1, output the prefix size i and the period K separated by a single space; the prefix sizes must be in increasing order. Print a blank line after each test case.</p><h5 id="Sample-4"><a href="#Sample-4" class="headerlink" title="Sample"></a>Sample</h5><h6 id="Inputcopy-4"><a href="#Inputcopy-4" class="headerlink" title="Inputcopy"></a>Inputcopy</h6><p>3<br>aaa<br>12<br>aabaabaabaab<br>0</p><h6 id="Outputcopy-4"><a href="#Outputcopy-4" class="headerlink" title="Outputcopy"></a>Outputcopy</h6><p>Test case #1<br>2 2<br>3 3</p><p>Test case #2<br>2 2<br>6 2<br>9 3<br>12 4</p><h4 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h4><p>和上一题类似，求对于每个i的最大循环节以及长度</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-comment">/* Author: Tanp7 {{{</span><br><span class="hljs-comment"> * Blog: https://zhengzihan.me }}}*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) begin(x),end(x) <span class="hljs-comment">//{{{</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> LOCAL <span class="hljs-comment">// https://github.com/p-ranav/pprint</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> de(...)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> de2(...)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>; <span class="hljs-comment">//}}}</span><br><br><span class="hljs-type">char</span> s[<span class="hljs-number">1000010</span>];<br><span class="hljs-type">int</span> ne[<span class="hljs-number">1000010</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> n, idx = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(std::cin &gt;&gt; n) {<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>, s + <span class="hljs-number">1</span>);<br><span class="hljs-built_in">memset</span>(ne, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(ne));<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) {<br><span class="hljs-keyword">while</span>(j &amp;&amp; s[i] != s[j + <span class="hljs-number">1</span>]) j = ne[j];<br><span class="hljs-keyword">if</span>(s[i] == s[j + <span class="hljs-number">1</span>]) j++;<br>ne[i] = j;<br>}<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Test case #%d\n"</span>, idx++);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) {<br><span class="hljs-type">int</span> len = i - ne[i];<br><span class="hljs-keyword">if</span>(len &gt;= <span class="hljs-number">1</span> &amp;&amp; i % len == <span class="hljs-number">0</span> &amp;&amp; ne[i] &gt; <span class="hljs-number">0</span>) {<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d %d\n"</span>, i, i / len);<br>}<br>}<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">""</span>);<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><br></code></pre></td></tr></tbody></table></figure><h3 id="F-Power-Strings-POJ-2406"><a href="#F-Power-Strings-POJ-2406" class="headerlink" title="F - Power Strings POJ - 2406"></a>F - Power Strings POJ - 2406</h3><p>Given two strings a and b we define a<em>b to be their concatenation. For example, if a = “abc” and b = “def” then a</em>b = “abcdef”. If we think of concatenation as multiplication, exponentiation by a non-negative integer is defined in the normal way: a^0 = “” (the empty string) and a^(n+1) = a*(a^n).</p><h4 id="Input-5"><a href="#Input-5" class="headerlink" title="Input"></a>Input</h4><p>Each test case is a line of input representing s, a string of printable characters. The length of s will be at least 1 and will not exceed 1 million characters. A line containing a period follows the last test case.</p><h4 id="Output-5"><a href="#Output-5" class="headerlink" title="Output"></a>Output</h4><p>For each s you should print the largest n such that s = a^n for some string a.</p><h5 id="Sample-5"><a href="#Sample-5" class="headerlink" title="Sample"></a>Sample</h5><h6 id="Inputcopy-5"><a href="#Inputcopy-5" class="headerlink" title="Inputcopy"></a>Inputcopy</h6><p>abcd<br>aaaa<br>ababab<br>.</p><h6 id="Outputcopy-5"><a href="#Outputcopy-5" class="headerlink" title="Outputcopy"></a>Outputcopy</h6><p>1<br>4<br>3</p><h4 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h4><p>POJ 的c++版本是真的低。。万能头不能用，auto也不能用好折磨</p><p>和前两题类似，求一下每个字符串的最大循环节的个数</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-comment">/* Author: Tanp7 {{{</span><br><span class="hljs-comment"> * Blog: https://zhengzihan.me }}}*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e7</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">char</span> s[N];<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ne[N], n, j, i;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>, s + <span class="hljs-number">1</span>) != EOF) {<br><span class="hljs-keyword">if</span>(s[<span class="hljs-number">1</span>] == <span class="hljs-string">'.'</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>n = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; i++) ne[i] = <span class="hljs-number">0</span>;<br>j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">2</span>; i &lt;= n; i++) {<br><span class="hljs-keyword">while</span>(j &amp;&amp; s[i] != s[j + <span class="hljs-number">1</span>]) j = ne[j];<br><span class="hljs-keyword">if</span>(s[i] == s[j + <span class="hljs-number">1</span>]) j++;<br>ne[i] = j;<br>}<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(n % (n - ne[n]) == <span class="hljs-number">0</span>) ans = n / (n - ne[n]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld\n"</span>, ans);<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><br></code></pre></td></tr></tbody></table></figure><h3 id="G-Seek-the-Name-Seek-the-Fame-POJ-2752"><a href="#G-Seek-the-Name-Seek-the-Fame-POJ-2752" class="headerlink" title="G - Seek the Name, Seek the Fame POJ - 2752"></a>G - Seek the Name, Seek the Fame POJ - 2752</h3><p>The little cat is so famous, that many couples tramp over hill and dale to Byteland, and asked the little cat to give names to their newly-born babies. They seek the name, and at the same time seek the fame. In order to escape from such boring job, the innovative little cat works out an easy but fantastic algorithm:</p><p>Step1. Connect the father’s name and the mother’s name, to a new string S.<br>Step2. Find a proper prefix-suffix string of S (which is not only the prefix, but also the suffix of S).</p><p>Example: Father=’ala’, Mother=’la’, we have S = ‘ala’+’la’ = ‘alala’. Potential prefix-suffix strings of S are {‘a’, ‘ala’, ‘alala’}. Given the string S, could you help the little cat to write a program to calculate the length of possible prefix-suffix strings of S? (He might thank you by giving your baby a name:)</p><h4 id="Input-6"><a href="#Input-6" class="headerlink" title="Input"></a>Input</h4><p>The input contains a number of test cases. Each test case occupies a single line that contains the string S described above.</p><p>Restrictions: Only lowercase letters may appear in the input. 1 &lt;= Length of S &lt;= 400000.</p><h4 id="Output-6"><a href="#Output-6" class="headerlink" title="Output"></a>Output</h4><p>For each test case, output a single line with integer numbers in increasing order, denoting the possible length of the new baby’s name.</p><h5 id="Sample-6"><a href="#Sample-6" class="headerlink" title="Sample"></a>Sample</h5><h6 id="Inputcopy-6"><a href="#Inputcopy-6" class="headerlink" title="Inputcopy"></a>Inputcopy</h6><p>ababcababababcabab<br>aaaaa</p><h6 id="Outputcopy-6"><a href="#Outputcopy-6" class="headerlink" title="Outputcopy"></a>Outputcopy</h6><p>2 4 9 18<br>1 2 3 4 5</p><h4 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h4><p>exkmp的z数组，满足即是后缀也是前缀就输出z[i]也就是前后缀相同的长度</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-comment">/* Author: Tanp7 {{{</span><br><span class="hljs-comment"> * Blog: https://zhengzihan.me }}}*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">4e5</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">char</span> s[N];<br><span class="hljs-type">int</span> z[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>, s + <span class="hljs-number">1</span>) != EOF) {<br><span class="hljs-type">int</span> L = <span class="hljs-number">1</span>, R = <span class="hljs-number">0</span>, n = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br><span class="hljs-built_in">memset</span>(z, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(z));<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) {<br><span class="hljs-keyword">if</span>(i &gt; R) z[i] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span> z[i] = std::<span class="hljs-built_in">min</span>(z[i - L  + <span class="hljs-number">1</span>], R - i + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">while</span>(i + z[i] &lt;= n &amp;&amp; s[z[i] + <span class="hljs-number">1</span>] == s[i + z[i]]) z[i]++;<br><span class="hljs-keyword">if</span>(i + z[i] - <span class="hljs-number">1</span> &gt; R) L = i, R = i + z[i] - <span class="hljs-number">1</span>;<br>}<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i--) <span class="hljs-keyword">if</span>(i+z[i]<span class="hljs-number">-1</span>==n) <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>, z[i]); <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, n);<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure><h3 id="H-Blue-Jeans-POJ-3080"><a href="#H-Blue-Jeans-POJ-3080" class="headerlink" title="H - Blue Jeans POJ - 3080"></a>H - Blue Jeans POJ - 3080</h3><p>The Genographic Project is a research partnership between IBM and The National Geographic Society that is analyzing DNA from hundreds of thousands of contributors to map how the Earth was populated.</p><p>As an IBM researcher, you have been tasked with writing a program that will find commonalities amongst given snippets of DNA that can be correlated with individual survey information to identify new genetic markers.</p><p>A DNA base sequence is noted by listing the nitrogen bases in the order in which they are found in the molecule. There are four bases: adenine (A), thymine (T), guanine (G), and cytosine (C). A 6-base DNA sequence could be represented as TAGACC.</p><p>Given a set of DNA base sequences, determine the longest series of bases that occurs in all of the sequences.</p><h4 id="Input-7"><a href="#Input-7" class="headerlink" title="Input"></a>Input</h4><p>Input to this problem will begin with a line containing a single integer n indicating the number of datasets. Each dataset consists of the following components:<br>A single positive integer m (2 &lt;= m &lt;= 10) indicating the number of base sequences in this dataset.<br>m lines each containing a single base sequence consisting of 60 bases.</p><h4 id="Output-7"><a href="#Output-7" class="headerlink" title="Output"></a>Output</h4><p>For each dataset in the input, output the longest base subsequence common to all of the given base sequences. If the longest common subsequence is less than three bases in length, display the string “no significant commonalities” instead. If multiple subsequences of the same longest length exist, output only the subsequence that comes first in alphabetical order.</p><h5 id="Sample-7"><a href="#Sample-7" class="headerlink" title="Sample"></a>Sample</h5><h6 id="Inputcopy-7"><a href="#Inputcopy-7" class="headerlink" title="Inputcopy"></a>Inputcopy</h6><p>3<br>2<br>GATACCAGATACCAGATACCAGATACCAGATACCAGATACCAGATACCAGATACCAGATA<br>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<br>3<br>GATACCAGATACCAGATACCAGATACCAGATACCAGATACCAGATACCAGATACCAGATA<br>GATACTAGATACTAGATACTAGATACTAAAGGAAAGGGAAAAGGGGAAAAAGGGGGAAAA<br>GATACCAGATACCAGATACCAGATACCAAAGGAAAGGGAAAAGGGGAAAAAGGGGGAAAA<br>3<br>CATCATCATCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC<br>ACATCATCATAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<br>AACATCATCATTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT</p><h6 id="Outputcopy-7"><a href="#Outputcopy-7" class="headerlink" title="Outputcopy"></a>Outputcopy</h6><p>no significant commonalities<br>AGATAC<br>CATCATCAT</p><h4 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h4><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h4 id="Input-8"><a href="#Input-8" class="headerlink" title="Input"></a>Input</h4><h4 id="Output-8"><a href="#Output-8" class="headerlink" title="Output"></a>Output</h4><h5 id="Sample-8"><a href="#Sample-8" class="headerlink" title="Sample"></a>Sample</h5><h6 id="Inputcopy-8"><a href="#Inputcopy-8" class="headerlink" title="Inputcopy"></a>Inputcopy</h6><h6 id="Outputcopy-8"><a href="#Outputcopy-8" class="headerlink" title="Outputcopy"></a>Outputcopy</h6><h4 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a>题解</h4><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h4 id="Input-9"><a href="#Input-9" class="headerlink" title="Input"></a>Input</h4><h4 id="Output-9"><a href="#Output-9" class="headerlink" title="Output"></a>Output</h4><h5 id="Sample-9"><a href="#Sample-9" class="headerlink" title="Sample"></a>Sample</h5><h6 id="Inputcopy-9"><a href="#Inputcopy-9" class="headerlink" title="Inputcopy"></a>Inputcopy</h6><h6 id="Outputcopy-9"><a href="#Outputcopy-9" class="headerlink" title="Outputcopy"></a>Outputcopy</h6><h4 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a>题解</h4><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><h4 id="Input-10"><a href="#Input-10" class="headerlink" title="Input"></a>Input</h4><h4 id="Output-10"><a href="#Output-10" class="headerlink" title="Output"></a>Output</h4><h5 id="Sample-10"><a href="#Sample-10" class="headerlink" title="Sample"></a>Sample</h5><h6 id="Inputcopy-10"><a href="#Inputcopy-10" class="headerlink" title="Inputcopy"></a>Inputcopy</h6><h6 id="Outputcopy-10"><a href="#Outputcopy-10" class="headerlink" title="Outputcopy"></a>Outputcopy</h6><h4 id="题解-10"><a href="#题解-10" class="headerlink" title="题解"></a>题解</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>暑假总结</title>
      <link href="/project/2022/08/25/%E6%9A%91%E5%81%87%E6%80%BB%E7%BB%93/"/>
      <url>/project/2022/08/25/%E6%9A%91%E5%81%87%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>今天是8月25日，2个月的暑假马上结束。暑假前还想着CF上蓝，结果只上了100分。<br>div2打了很多，3题左右的水平，有些时候很简单的模拟题都会wa，牛客多校11场，可以说是完全单挑吧。<br>像我这种菜逼单挑就是签完到罚坐，有时签到都不会。如果凡事都要有意义的话，那是不是可以认为我在做一件没有意义的事情呢？<br>在弱校，你没有队友愿意和你一起训练刷题，也没有老师会给你讲解题目，所有的算法几乎都靠自学，当然你也可以选择买一些课程，这里推荐代码源和Acwing，wls、dls、yxc都是很厉害的老师，跟着他们学算法是不错的选择。<br>比赛打得越多越觉得自己的基础不行，暑假基本上刷完了算法基础课，wls初级包还差一点。<br>三伏盛夏，每天早起赶到实验室写代码，学新算法，写模版题，刷套题，打比赛····。暑假刚开始实验室加上我有三个人，其中一个与我同届，另一个是学弟，后来牛客多校开始后，实验室人多到10个人，再后来大概是多校中期之后一点吧，坚持来实验室的就只有3人了。最后到8.20左右吧，也就是牛客多校快结束的时候，自那开始实验室就只有我一个人了。<br>马上网络赛了，人生第一场XCPC，寄!<br>菜就多练，好好准备个人赛吧。</p><p>upd1 -// 2022/09/01</p><p>其实并不是没有意义，最起码考研数据结构这块没啥问题了。。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ABC261D</title>
      <link href="/project/2022/07/27/ABC261D/"/>
      <url>/project/2022/07/27/ABC261D/</url>
      
        <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>Takahashi will toss a coin N times. He also has a counter, which initially shows 0.</p><p>Depending on the result of the i-th coin toss, the following happens:</p><ul><li>If it heads: Takahashi increases the counter’s value by 1 and receives Xi yen (Japanese currency).</li><li>If it tails: he resets the counter’s value to 0, without receiving money.<br>Additionally, there are M kinds of streak bonuses. The i-th kind of streak bonus awards Yi yen each time the counter shows Ci.</li></ul><p>Find the maximum amount of money that Takahashi can receive.</p><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><ul><li>1≤M≤N≤5000</li><li>1&lt;=Xi&lt;=1e9</li><li>1&lt;=Ci&lt;=N</li><li>1&lt;=Yi&lt;=1e9</li><li>C1,C2,…,CM are all different.</li><li>All values in input are integers.</li></ul><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>每个硬币，你可以选择翻或者不翻，翻的话会获得Xi的金钱，并且你会有一个连续翻硬币的计数器，当计数器的数字达到Ci时，你会获得Yi的金钱</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><ul><li>非常经典一道DP题</li></ul><p>我们可以设dp[i][j]代表第i个硬币，计数器为j时的最大金钱数</p><p>特殊的：对于每个dp[i][j]，我们发现，当j不等于0时，dp[i][j]只能通过dp[i-1][j-1]转移过来，而dp[i][0]则可以由dp[i-1][0], dp[i-1][1], dp[i-1][2] … dp[i-1][j-1]转移过来。</p><p>所以：</p><p>$$<br>dp[i][j] = \left{<br>  \begin{array}{lr}<br>    dp[i-1][j-1] &amp;  x &gt; 0\<br>    max(dp[i-1][j], dp[i][0]) &amp;  x = 0 &amp; 0\leq j \leq i-1<br>  \end{array}<br>\right.<br>$$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* Author: Tanp7 {{{</span><br><span class="hljs-comment"> * Blog: https://zhengzihan.me }}}*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) begin(x),end(x) <span class="hljs-comment">//{{{</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> LOCAL <span class="hljs-comment">// https://github.com/p-ranav/pprint</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> de(...)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> de2(...)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>; <span class="hljs-comment">//}}}</span><br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> a[<span class="hljs-number">5010</span>];<br>ll dp[<span class="hljs-number">5010</span>][<span class="hljs-number">5010</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    std::ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    std::cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        std::cin &gt;&gt; a[i];<br><br>    std::map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) {<br>        <span class="hljs-type">int</span> x, y; std::cin &gt;&gt; x &gt;&gt; y;<br>        mp[x] = y;<br>    }<br><br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) {<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++)<br>            dp[i][j] = dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>] + a[i] + mp[j];<br>        dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)<br>            dp[i][<span class="hljs-number">0</span>] = std::<span class="hljs-built_in">max</span>(dp[i][<span class="hljs-number">0</span>], dp[i<span class="hljs-number">-1</span>][j]);<br>    }<br><br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++)<br>        ans = std::<span class="hljs-built_in">max</span>(ans, dp[n][i]);<br>    std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">'\n'</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> abc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF795div2 A-D题解</title>
      <link href="/project/2022/06/01/CF795div2-A-D%E9%A2%98%E8%A7%A3/"/>
      <url>/project/2022/06/01/CF795div2-A-D%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="A-Beat-The-Odds"><a href="#A-Beat-The-Odds" class="headerlink" title="A. Beat The Odds"></a>A. Beat The Odds</h2><p>Given a sequence 𝑎1,𝑎2,…,𝑎𝑛, find the minimum number of elements to remove from the sequence such that after the removal, the sum of every 2 consecutive elements is even.</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><blockquote><p>其实就是求数列中的奇数和偶数的最小值，快速签到</p></blockquote><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for(int i = (int)l; i &lt; (int)n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FAST std::cin.tie(nullptr)-&gt;std::ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> edl std::cout &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a) std::cout &lt;&lt; #a &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; (a) &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3c3c3c3c <span class="hljs-comment">// 1010580540, 7f7f7f7f:2139062143</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> llinf 9223372036854775807</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> cmuticases() int T;scanf(<span class="hljs-string">"%d"</span>,&amp;T);while(T--)solve();</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticases() int T;std::cin&gt;&gt;T;while(T--)solve();</span><br><span class="hljs-function">std::mt19937_64 <span class="hljs-title">mrand</span><span class="hljs-params">(std::random_device{}())</span></span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> ull = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> ll mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rnd</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-built_in">mrand</span>() % x;}<br><span class="hljs-function">ll <span class="hljs-title">powmod</span><span class="hljs-params">(ll a,ll b)</span> </span>{ll res=<span class="hljs-number">1</span>;a%=mod; <span class="hljs-built_in">assert</span>(b&gt;=<span class="hljs-number">0</span>); <span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>){<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)res=res*a%mod;a=a*a%mod;}<span class="hljs-keyword">return</span> res;}<br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a,ll b)</span> </span>{ <span class="hljs-keyword">return</span> b?<span class="hljs-built_in">gcd</span>(b,a%b):a;}<br><span class="hljs-comment">//using namespace std;</span><br><span class="hljs-comment">//#define int long long</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> n;<br>std::cin &gt;&gt; n;<br><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br><span class="hljs-type">int</span> cnt1 = <span class="hljs-number">0</span>, cnt2 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;i : a) {<br>std::cin &gt;&gt; i;<br><span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>cnt1++;<br><span class="hljs-keyword">else</span><br>cnt2++;<br>}<br>std::cout &lt;&lt; std::<span class="hljs-built_in">min</span>(cnt1,cnt2) &lt;&lt; <span class="hljs-string">'\n'</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    FAST;<br>    <span class="hljs-built_in">muticases</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="B-Shoe-Shuffling"><a href="#B-Shoe-Shuffling" class="headerlink" title="B. Shoe Shuffling"></a>B. Shoe Shuffling</h2><p>A class of students got bored wearing the same pair of shoes every day, so they decided to shuffle their shoes among themselves. In this problem, a pair of shoes is inseparable and is considered as a single object.</p><p>There are 𝑛 students in the class, and you are given an array 𝑠 in non-decreasing order, where 𝑠𝑖 is the shoe size of the 𝑖-th student. A shuffling of shoes is valid only if no student gets their own shoes and if every student gets shoes of size greater than or equal to their size.</p><p>You have to output a permutation 𝑝 of {1,2,…,𝑛} denoting a valid shuffling of shoes, where the 𝑖-th student gets the shoes of the 𝑝𝑖-th student (𝑝𝑖≠𝑖). And output −1 if a valid shuffling does not exist.</p><p>A permutation is an array consisting of 𝑛<br>distinct integers from 1 to 𝑛 in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (𝑛=3 but there is 4 in the array).</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>可以发现只有当给定数组中每个数的数量都大于1的时候才成立，输出顺序可以是[n,1,2,…,n-1]<br>否则的话就输出-1</p><blockquote><p>没有看到题目中的sorted卡了一会</p></blockquote><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i, l, n) for (int i = (int)l; i &lt; (int)n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FAST std::cin.tie(nullptr)-&gt;std::ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> edl std::cout &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a) std::cout &lt;&lt; #a &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; (a) &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3c3c3c3c <span class="hljs-comment">// 1010580540, 7f7f7f7f:2139062143</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> llinf 9223372036854775807</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> cmuticases()                                                           \</span><br><span class="hljs-meta">  int T;                                                                       \</span><br><span class="hljs-meta">  scanf(<span class="hljs-string">"%d"</span>, &amp;T);                                                             \</span><br><span class="hljs-meta">  while (T--)                                                                  \</span><br><span class="hljs-meta">    solve();</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticases()                                                            \</span><br><span class="hljs-meta">  int T;                                                                       \</span><br><span class="hljs-meta">  std::cin &gt;&gt; T;                                                               \</span><br><span class="hljs-meta">  while (T--)                                                                  \</span><br><span class="hljs-meta">    solve();</span><br><span class="hljs-function">std::mt19937_64 <span class="hljs-title">mrand</span><span class="hljs-params">(std::random_device{}())</span></span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> ull = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> ll mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rnd</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-built_in">mrand</span>() % x; }<br><span class="hljs-function">ll <span class="hljs-title">powmod</span><span class="hljs-params">(ll a, ll b)</span> </span>{<br>  ll res = <span class="hljs-number">1</span>;<br>  a %= mod;<br>  <span class="hljs-built_in">assert</span>(b &gt;= <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">for</span> (; b; b &gt;&gt;= <span class="hljs-number">1</span>) {<br>    <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>      res = res * a % mod;<br>    a = a * a % mod;<br>  }<br>  <span class="hljs-keyword">return</span> res;<br>}<br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a, ll b)</span> </span>{ <span class="hljs-keyword">return</span> b ? <span class="hljs-built_in">gcd</span>(b, a % b) : a; }<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> n; std::cin &gt;&gt; n;<br>std::map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br><span class="hljs-function">std::vector&lt;PII&gt; <span class="hljs-title">a</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>) {<br>std::cin &gt;&gt; a[i].se;<br>mp[a[i].se]++;<br>a[i].fi = i;<br>}<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [x,cnt] : mp) {<br><span class="hljs-keyword">if</span>(cnt == <span class="hljs-number">1</span>) {<br>std::cout &lt;&lt; <span class="hljs-string">"-1\n"</span>;<br><span class="hljs-keyword">return</span>;<br>}<br>}<br><br><span class="hljs-type">int</span> fi = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) {<br><span class="hljs-keyword">if</span>(a[i].se != a[i+<span class="hljs-number">1</span>].se &amp;&amp; i+<span class="hljs-number">1</span> &lt;= n) {<br>std::cout &lt;&lt; i &lt;&lt; <span class="hljs-string">' '</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = fi; j &lt; i; j++)<br>std::cout &lt;&lt; j &lt;&lt; <span class="hljs-string">' '</span>;<br>fi = i+<span class="hljs-number">1</span>;<br>}<br><span class="hljs-keyword">if</span>(i == n) {<br>std::cout &lt;&lt; i &lt;&lt; <span class="hljs-string">' '</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = fi; j &lt; i; j++)<br>std::cout &lt;&lt; j &lt;&lt; <span class="hljs-string">' '</span>;<br>}<br>}<br>std::cout &lt;&lt; <span class="hljs-string">'\n'</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>  FAST;<br>  <span class="hljs-built_in">muticases</span>();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure><h2 id="C-Sum-of-Substrings"><a href="#C-Sum-of-Substrings" class="headerlink" title="C. Sum of Substrings"></a>C. Sum of Substrings</h2><p>You are given a binary string 𝑠 of length 𝑛.<br>Let’s define 𝑑𝑖 as the number whose decimal representation is 𝑠𝑖𝑠𝑖+1 (possibly, with a leading zero). We define 𝑓(𝑠) to be the sum of all the valid 𝑑𝑖. In other words, 𝑓(𝑠)=∑𝑖=1𝑛−1𝑑𝑖.</p><p>For example, for the string 𝑠=1011:</p><ul><li>𝑑1=10(ten);</li><li>𝑑2=01(one)</li><li>𝑑3=11(eleven);</li><li>𝑓(𝑠)=10+01+11=22.</li></ul><p>In one operation you can swap any two adjacent elements of the string. Find the minimum value of 𝑓(𝑠)<br>that can be achieved if at most 𝑘 operations are allowed.</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><ul><li>不难发现除了开头和末尾的1，其余的1的贡献值都为1，所以处理从开头第一个1到末尾往前第一个1所在的区间。</li><li>若末尾和开头都为0，那么将一个1移到末尾能减少10的贡献，移到开头能减少1的贡献，所以每次操作尽量往右移</li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-type">char</span> s[<span class="hljs-number">300005</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">int</span> T;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;T);<br>    <span class="hljs-keyword">while</span>(T--) {<br>        <span class="hljs-type">int</span> n, k;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d%d%s"</span>, &amp;n, &amp;k, s+<span class="hljs-number">1</span>);<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>, l = <span class="hljs-number">-1</span>, r;<br>        <br>        <span class="hljs-comment">// 先以每个1为11的贡献计算初始值，后续减去处理的。</span><br>        <span class="hljs-comment">// l到r表示以1开始并以1结尾的字符串区间</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) {<br>            <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">'1'</span>) {<br>                ans += <span class="hljs-number">11</span>;<br>                <span class="hljs-keyword">if</span>(l == <span class="hljs-number">-1</span>)<br>                    l = i;<br>                r = i;<br>            }<br>        }<br>        <br>        <span class="hljs-keyword">if</span>(l != <span class="hljs-number">-1</span>) {<br>            <span class="hljs-keyword">if</span>(l == r) {<br>                <span class="hljs-keyword">if</span>(n - r &lt;= k)<br>                    k -= (n - r), ans -= <span class="hljs-number">10</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l - <span class="hljs-number">1</span> &lt;= k)<br>                    ans--;<br>            }<br>            <span class="hljs-keyword">else</span> {<br>                <span class="hljs-keyword">if</span>(n - r &lt;= k)<br>                    k -= (n - r), ans -= <span class="hljs-number">10</span>;<br>                <span class="hljs-keyword">if</span>(l - <span class="hljs-number">1</span> &lt;= k)<br>                    ans--;<br>            }<br>        }<br>        <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>, ans);<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure><h2 id="D-Max-GEQ-Sum"><a href="#D-Max-GEQ-Sum" class="headerlink" title="D. Max GEQ Sum"></a>D. Max GEQ Sum</h2><p>You are given an array 𝑎 of 𝑛 integers. You are asked to find out if the inequality</p><blockquote><p>$max(𝑎𝑖,𝑎𝑖+1,…,𝑎𝑗−1,𝑎𝑗)≥𝑎𝑖+𝑎𝑖+1+⋯+𝑎𝑗−1+𝑎𝑗$</p></blockquote><p>holds for all pairs of indices (𝑖,𝑗), where 1≤𝑖≤𝑗≤𝑛.</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>单调栈维护某个点找到前边第一个大于他的值，找到后边第一个大于他的值<br>然后找他前边最大前缀和是否大于0，后边最大后缀和是否大于零</p><blockquote><p>jls的代码非常的清爽</p></blockquote><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> i64 = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-type">int</span> n;<br>    std::cin &gt;&gt; n;<br>    <br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br>        std::cin &gt;&gt; a[i];<br>    }<br>    <br>    <span class="hljs-function">std::vector&lt;i64&gt; <span class="hljs-title">s</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br>        s[i + <span class="hljs-number">1</span>] = s[i] + a[i];<br>    }<br>    <br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">lc</span><span class="hljs-params">(n, <span class="hljs-number">-1</span>)</span>, <span class="hljs-title">rc</span><span class="hljs-params">(n, <span class="hljs-number">-1</span>)</span></span>;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; stack;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br>        <span class="hljs-keyword">while</span> (!stack.<span class="hljs-built_in">empty</span>() &amp;&amp; a[i] &gt; a[stack.<span class="hljs-built_in">back</span>()]) {<br>            <span class="hljs-type">int</span> x = stack.<span class="hljs-built_in">back</span>();<br>            rc[x] = lc[i];<br>            lc[i] = x;<br>            stack.<span class="hljs-built_in">pop_back</span>();<br>        }<br>        stack.<span class="hljs-built_in">push_back</span>(i);<br>    }<br>    <br>    <span class="hljs-keyword">while</span> (stack.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>) {<br>        <span class="hljs-type">int</span> x = stack.<span class="hljs-built_in">back</span>();<br>        stack.<span class="hljs-built_in">pop_back</span>();<br>        rc[stack.<span class="hljs-built_in">back</span>()] = x;<br>    }<br>    <br>    <span class="hljs-type">bool</span> nice = <span class="hljs-literal">true</span>;<br>    <br>    <span class="hljs-function">std::vector&lt;i64&gt; <span class="hljs-title">min</span><span class="hljs-params">(n)</span>, <span class="hljs-title">max</span><span class="hljs-params">(n)</span></span>;<br>    <br>    std::function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; dfs = [&amp;](<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r) {<br>        <span class="hljs-keyword">if</span> (l &gt; r) {<br>            <span class="hljs-keyword">return</span>;<br>        }<br>        <span class="hljs-built_in">dfs</span>(lc[x], l, x - <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">dfs</span>(rc[x], x + <span class="hljs-number">1</span>, r);<br>        <br>        min[x] = s[x];<br>        max[x] = s[x + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> (lc[x] != <span class="hljs-number">-1</span>) {<br>            min[x] = std::<span class="hljs-built_in">min</span>(min[x], min[lc[x]]);<br>        }<br>        <span class="hljs-keyword">if</span> (rc[x] != <span class="hljs-number">-1</span>) {<br>            max[x] = std::<span class="hljs-built_in">max</span>(max[x], max[rc[x]]);<br>        }<br>        <span class="hljs-keyword">if</span> (max[x] - min[x] &gt; a[x]) {<br>            nice = <span class="hljs-literal">false</span>;<br>        }<br>        <span class="hljs-keyword">if</span> (rc[x] != <span class="hljs-number">-1</span>) {<br>            min[x] = std::<span class="hljs-built_in">min</span>(min[x], min[rc[x]]);<br>        }<br>        <span class="hljs-keyword">if</span> (lc[x] != <span class="hljs-number">-1</span>) {<br>            max[x] = std::<span class="hljs-built_in">max</span>(max[x], max[lc[x]]);<br>        }<br>    };<br>    <span class="hljs-built_in">dfs</span>(stack[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">if</span> (nice) {<br>        std::cout &lt;&lt; <span class="hljs-string">"YES\n"</span>;<br>    } <span class="hljs-keyword">else</span> {<br>        std::cout &lt;&lt; <span class="hljs-string">"NO\n"</span>;<br>    }<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>    <br>    <span class="hljs-type">int</span> t;<br>    std::cin &gt;&gt; t;<br>    <br>    <span class="hljs-keyword">while</span> (t--) {<br>        <span class="hljs-built_in">solve</span>();<br>    }<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ABC253 A-E题解</title>
      <link href="/project/2022/05/29/ABC253-A-E%E9%A2%98%E8%A7%A3/"/>
      <url>/project/2022/05/29/ABC253-A-E%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Median"><a href="#A-Median" class="headerlink" title="A - Median?"></a>A - Median?</h1><h2 id="Problem-Statement"><a href="#Problem-Statement" class="headerlink" title="Problem Statement"></a>Problem Statement</h2><p>Given integers a, b, and c, determine if b is the median of these integers.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><p>1≤a,b,c≤100<br>All values in input are integers.</p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定三个数，问中间那个数是否为中间值</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>非常简单的签到</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for(int i = (int)l; i &lt; (int)n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FAST std::cin.tie(nullptr)-&gt;std::ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> edl std::cout &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a) std::cout &lt;&lt; #a &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; (a) &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3c3c3c3c <span class="hljs-comment">// 1010580540, 7f7f7f7f:2139062143</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> llinf 9223372036854775807</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> cmuticases() int T;scanf(<span class="hljs-string">"%d"</span>,&amp;T);while(T--)solve();</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticases() int T;std::cin&gt;&gt;T;while(T--)solve();</span><br><span class="hljs-function">std::mt19937_64 <span class="hljs-title">mrand</span><span class="hljs-params">(std::random_device{}())</span></span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> ull = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> ll mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rnd</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-built_in">mrand</span>() % x;}<br><span class="hljs-function">ll <span class="hljs-title">powmod</span><span class="hljs-params">(ll a,ll b)</span> </span>{ll res=<span class="hljs-number">1</span>;a%=mod; <span class="hljs-built_in">assert</span>(b&gt;=<span class="hljs-number">0</span>); <span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>){<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)res=res*a%mod;a=a*a%mod;}<span class="hljs-keyword">return</span> res;}<br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a,ll b)</span> </span>{ <span class="hljs-keyword">return</span> b?<span class="hljs-built_in">gcd</span>(b,a%b):a;}<br><span class="hljs-comment">//using namespace std;</span><br><span class="hljs-comment">//#define int long long</span><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    FAST;<br><span class="hljs-type">int</span> a, b, c;<br>std::cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>std::cout &lt;&lt; ((b&gt;=a&amp;&amp;b&lt;=c)||(b&gt;=c&amp;&amp;b&lt;=a) ? <span class="hljs-string">"Yes"</span>:<span class="hljs-string">"No"</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure><h1 id="B-Distance-Between-Tokens"><a href="#B-Distance-Between-Tokens" class="headerlink" title="B - Distance Between Tokens"></a>B - Distance Between Tokens</h1><h2 id="Problem-Statement-1"><a href="#Problem-Statement-1" class="headerlink" title="Problem Statement"></a>Problem Statement</h2><p>There is a grid with H horizontal rows and W vertical columns, in which two distinct squares have a piece.</p><p>The state of the squares is represented by H strings S1,…,SH of length W. Si,j= o means that there is a piece in the square at the i-th row from the top and j-th column from the left; Si,j= - means that the square does not have a piece. Here, Si,j denotes the j-th character of the string Si.</p><p>Consider repeatedly moving one of the pieces to one of the four adjacent squares. It is not allowed to move the piece outside the grid. How many moves are required at minimum for the piece to reach the square with the other piece?</p><h2 id="Constraints-1"><a href="#Constraints-1" class="headerlink" title="Constraints"></a>Constraints</h2><p>2≤H,W≤100<br>H and W are integers.<br>Si(1≤i≤H) is a string of length W consisting of o and -.<br>There exist exactly two pairs of integers 1≤i≤H,1≤j≤W such that Si,j= o.</p><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>给定两个点，每次可以往四个方向移动一个点，求使得两个点重合的最小步数</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>很明显两个点的x，y坐标之差即为最小步数</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for(int i = (int)l; i &lt; (int)n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FAST std::cin.tie(nullptr)-&gt;std::ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> edl std::cout &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a) std::cout &lt;&lt; #a &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; (a) &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3c3c3c3c <span class="hljs-comment">// 1010580540, 7f7f7f7f:2139062143</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> llinf 9223372036854775807</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> cmuticases() int T;scanf(<span class="hljs-string">"%d"</span>,&amp;T);while(T--)solve();</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticases() int T;std::cin&gt;&gt;T;while(T--)solve();</span><br><span class="hljs-function">std::mt19937_64 <span class="hljs-title">mrand</span><span class="hljs-params">(std::random_device{}())</span></span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> ull = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> ll mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rnd</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-built_in">mrand</span>() % x;}<br><span class="hljs-function">ll <span class="hljs-title">powmod</span><span class="hljs-params">(ll a,ll b)</span> </span>{ll res=<span class="hljs-number">1</span>;a%=mod; <span class="hljs-built_in">assert</span>(b&gt;=<span class="hljs-number">0</span>); <span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>){<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)res=res*a%mod;a=a*a%mod;}<span class="hljs-keyword">return</span> res;}<br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a,ll b)</span> </span>{ <span class="hljs-keyword">return</span> b?<span class="hljs-built_in">gcd</span>(b,a%b):a;}<br><span class="hljs-comment">//using namespace std;</span><br><span class="hljs-comment">//#define int long long</span><br><br><br><span class="hljs-type">char</span> a[<span class="hljs-number">110</span>][<span class="hljs-number">110</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    FAST;<br>    <span class="hljs-type">int</span> n, m;<br>    std::cin &gt;&gt; n &gt;&gt; m;<br>    std::vector&lt;PII&gt; p;<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,n) <span class="hljs-built_in">rep</span>(j,<span class="hljs-number">0</span>,m) {<br>    std::cin &gt;&gt; a[i][j];<br>    <span class="hljs-keyword">if</span>(a[i][j] == <span class="hljs-string">'o'</span>) p.<span class="hljs-built_in">pb</span>({i,j});<br>    }<br>    std::cout &lt;&lt; std::<span class="hljs-built_in">abs</span>(p[<span class="hljs-number">0</span>].fi-p[<span class="hljs-number">1</span>].fi)+std::<span class="hljs-built_in">abs</span>(p[<span class="hljs-number">0</span>].se-p[<span class="hljs-number">1</span>].se);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="C-Max-Min-Query"><a href="#C-Max-Min-Query" class="headerlink" title="C - Max - Min Query"></a>C - Max - Min Query</h1><h2 id="Problem-Statement-2"><a href="#Problem-Statement-2" class="headerlink" title="Problem Statement"></a>Problem Statement</h2><p>We have a multiset of integers S, which is initially empty.</p><p>Given Q queries, process them in order.Each query is of one of the following types.</p><ul><li><p>1 x: Insert an x into S.</p></li><li><p>2 x c: Remove an x from S m times, where m min (c, the number of x’s contained in S))</p></li><li><p>3: Print maximum value of S) -minimum value of S). It is guaranteed that S is not empty when this query is given.</p></li></ul><h2 id="Constraints-2"><a href="#Constraints-2" class="headerlink" title="Constraints"></a>Constraints</h2><p>1≤Q≤2×10^5 ·0≤≤10^9 ·1≤c≤Q</p><p>When a query of type 3 is given, S is not empty.</p><p>All values in input are integers.</p><h2 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h2><p>模拟3种操作，1.插入x到S，2.从S中移除x min(c, the number of x’s contained in S)次，3.打印S中最大值和最小值之差</p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p>模拟题<br>这题我wa了3发，后面D题做完想到的一个不完全正确的写法交了一发居然过了。<br>赛后看榜好多人不会C题。。。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for(int i = (int)l; i &lt; (int)n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FAST std::cin.tie(nullptr)-&gt;std::ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> edl std::cout &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a) std::cout &lt;&lt; #a &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; (a) &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3c3c3c3c <span class="hljs-comment">// 1010580540, 7f7f7f7f:2139062143</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> llinf 9223372036854775807</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> cmuticases() int T;scanf(<span class="hljs-string">"%d"</span>,&amp;T);while(T--)solve();</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticases() int T;std::cin&gt;&gt;T;while(T--)solve();</span><br><span class="hljs-function">std::mt19937_64 <span class="hljs-title">mrand</span><span class="hljs-params">(std::random_device{}())</span></span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> ull = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> ll mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rnd</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-built_in">mrand</span>() % x;}<br><span class="hljs-function">ll <span class="hljs-title">powmod</span><span class="hljs-params">(ll a,ll b)</span> </span>{ll res=<span class="hljs-number">1</span>;a%=mod; <span class="hljs-built_in">assert</span>(b&gt;=<span class="hljs-number">0</span>); <span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>){<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)res=res*a%mod;a=a*a%mod;}<span class="hljs-keyword">return</span> res;}<br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a,ll b)</span> </span>{ <span class="hljs-keyword">return</span> b?<span class="hljs-built_in">gcd</span>(b,a%b):a;}<br><span class="hljs-comment">//using namespace std;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><br><span class="hljs-type">int</span> Q;<br>std::unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    FAST;<br>    std::cin &gt;&gt; Q;<br>    std::priority_queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    std::priority_queue&lt;<span class="hljs-type">int</span>, std::vector&lt;<span class="hljs-type">int</span>&gt;, std::greater&lt;<span class="hljs-type">int</span>&gt;&gt; q1;<br>    <span class="hljs-keyword">while</span>(Q--) {<br>    <span class="hljs-type">int</span> op;<br>    std::cin &gt;&gt; op;<br>    <span class="hljs-keyword">if</span>(op == <span class="hljs-number">1</span>) {<br>    <span class="hljs-type">int</span> x; std::cin &gt;&gt; x;<br>    mp[x]++;<br>    q.<span class="hljs-built_in">push</span>(x);<br>    q1.<span class="hljs-built_in">push</span>(x);<br>    }<br>    <span class="hljs-keyword">if</span>(op == <span class="hljs-number">2</span>) {<br>    <span class="hljs-type">int</span> x, c;<br>    std::cin &gt;&gt; x &gt;&gt; c;<br>    mp[x] -= std::<span class="hljs-built_in">min</span>(mp[x],c);<br>    }<br>    <span class="hljs-keyword">if</span>(op == <span class="hljs-number">3</span>) {<br><span class="hljs-keyword">while</span>(!mp[q.<span class="hljs-built_in">top</span>()]) {<br>q.<span class="hljs-built_in">pop</span>();<br>}<br><span class="hljs-keyword">while</span>(!mp[q1.<span class="hljs-built_in">top</span>()]) {<br>q1.<span class="hljs-built_in">pop</span>();<br>}<br>std::cout &lt;&lt; q.<span class="hljs-built_in">top</span>() - q1.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">'\n'</span>;<br>    }<br>    }<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="D-FizzBuzz-Sum-Hard"><a href="#D-FizzBuzz-Sum-Hard" class="headerlink" title="D - FizzBuzz Sum Hard"></a>D - FizzBuzz Sum Hard</h1><h2 id="Problem-Statement-3"><a href="#Problem-Statement-3" class="headerlink" title="Problem Statement"></a>Problem Statement</h2><p>Find the sum of integers between 1 and N  (inclusive) that are not multiples of A or B.</p><h2 id="Constraints-3"><a href="#Constraints-3" class="headerlink" title="Constraints"></a>Constraints</h2><p>1≤N, A, B≤10^9</p><p>All values in input are integers.</p><h2 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h2><p>对1～N中不包括A，B的倍数的累加求和。</p><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><p>以为暴力能过结果TLE一个点，一个点啊！！！<br>但是其实也很简单，高中数学等差数列O(n)解决</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for(int i = (int)l; i &lt; (int)n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FAST std::cin.tie(nullptr)-&gt;std::ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> edl std::cout &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a) std::cout &lt;&lt; #a &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; (a) &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3c3c3c3c <span class="hljs-comment">// 1010580540, 7f7f7f7f:2139062143</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> llinf 9223372036854775807</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> cmuticases() int T;scanf(<span class="hljs-string">"%d"</span>,&amp;T);while(T--)solve();</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticases() int T;std::cin&gt;&gt;T;while(T--)solve();</span><br><span class="hljs-function">std::mt19937_64 <span class="hljs-title">mrand</span><span class="hljs-params">(std::random_device{}())</span></span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> ull = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> ll mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rnd</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-built_in">mrand</span>() % x;}<br><span class="hljs-function">ll <span class="hljs-title">powmod</span><span class="hljs-params">(ll a,ll b)</span> </span>{ll res=<span class="hljs-number">1</span>;a%=mod; <span class="hljs-built_in">assert</span>(b&gt;=<span class="hljs-number">0</span>); <span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>){<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)res=res*a%mod;a=a*a%mod;}<span class="hljs-keyword">return</span> res;}<br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a,ll b)</span> </span>{ <span class="hljs-keyword">return</span> b?<span class="hljs-built_in">gcd</span>(b,a%b):a;}<br><span class="hljs-comment">//using namespace std;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">bool</span> mp[N];<br>ll a, b, n;<br>ll sum;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%lld%lld%lld"</span>, &amp;n, &amp;a, &amp;b);<br>    sum = <span class="hljs-number">1ll</span>*((<span class="hljs-number">1</span>+n)*n*<span class="hljs-number">1ll</span>)/<span class="hljs-number">2</span>;<br>    <br>    <span class="hljs-type">int</span> numa = n/a, numb = n/b;<br>    ll suba = (<span class="hljs-number">1ll</span>*numa*(a+numa*a*<span class="hljs-number">1ll</span>))/<span class="hljs-number">2</span>;<br>    ll subb = (<span class="hljs-number">1ll</span>*numb*(b+numb*b*<span class="hljs-number">1ll</span>))/<span class="hljs-number">2</span>;<br>    ll s = (a / <span class="hljs-built_in">gcd</span>(a, b)) * b;<br>    <span class="hljs-keyword">if</span>(s &lt;= n) {<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s; i &lt;= n; i+=s) {<br>    sum += i;<br>    }<br>}<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld"</span>, sum-suba-subb);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="E-Distance-Sequence"><a href="#E-Distance-Sequence" class="headerlink" title="E - Distance Sequence"></a>E - Distance Sequence</h1><h2 id="Problem-Statement-4"><a href="#Problem-Statement-4" class="headerlink" title="Problem Statement"></a>Problem Statement</h2><p>How many integer sequences A  (A1,…, An) of length N satisfy all the conditions below?</p><p>·1≤A, ≤M (1≤i≤N)</p><p>·A-A+1≥K (1≤i≤N-1)</p><p>Since the count can be enormous, find it modulo 998244353.</p><h2 id="Constraints-4"><a href="#Constraints-4" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>2≤N≤1000</li><li>1≤M≤5000</li><li>0≤K≤M−1</li><li>All values in input are integers.</li></ul><h2 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h2><p>求满足A-A+1≥K (1≤i≤N-1)的数组个数</p><h2 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h2><p>设dp是确定A的前i项使其第i项为7的方法的数量。这个dp的过渡为:</p><p>Dp [i+1] [= (Dp [[1+..]+dp [i-K]) + (dp [i+K+..]+ dpM)</p><p>注意，对于1&gt; -K或+K M的转换略有不同。这个DP有O (NM)态，计算每个元素的成本为O (M)，因此总体时间复杂度为O (NM2)，不符合时间限制。</p><p>相反，我们可以在考虑到dpi1的过渡之前找到dpi的累加和，这样每个过渡现在可以在O(1)时间内执行，因此问题的求解总共需要O (NM)时间，这已经足够快了。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for(int i = (int)l; i &lt; (int)n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FAST std::cin.tie(nullptr)-&gt;std::ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> edl std::cout &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a) std::cout &lt;&lt; #a &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; (a) &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3c3c3c3c <span class="hljs-comment">// 1010580540, 7f7f7f7f:2139062143</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> llinf 9223372036854775807</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> cmuticases() int T;scanf(<span class="hljs-string">"%d"</span>,&amp;T);while(T--)solve();</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticases() int T;std::cin&gt;&gt;T;while(T--)solve();</span><br><span class="hljs-function">std::mt19937_64 <span class="hljs-title">mrand</span><span class="hljs-params">(std::random_device{}())</span></span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> ull = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> ll mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rnd</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-built_in">mrand</span>() % x;}<br><span class="hljs-function">ll <span class="hljs-title">powmod</span><span class="hljs-params">(ll a,ll b)</span> </span>{ll res=<span class="hljs-number">1</span>;a%=mod; <span class="hljs-built_in">assert</span>(b&gt;=<span class="hljs-number">0</span>); <span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>){<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)res=res*a%mod;a=a*a%mod;}<span class="hljs-keyword">return</span> res;}<br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a,ll b)</span> </span>{ <span class="hljs-keyword">return</span> b?<span class="hljs-built_in">gcd</span>(b,a%b):a;}<br><span class="hljs-comment">//using namespace std;</span><br><span class="hljs-comment">//#define int long long</span><br><br><span class="hljs-type">int</span> dp[<span class="hljs-number">1005</span>][<span class="hljs-number">5005</span>];<br><span class="hljs-type">int</span> pre[<span class="hljs-number">1005</span>][<span class="hljs-number">5005</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br>    <span class="hljs-type">int</span> n,m,k;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d %d %d"</span>,&amp;n,&amp;m,&amp;k);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i&lt;=m;i++){<br>        dp[<span class="hljs-number">1</span>][i]=<span class="hljs-number">1</span>;<br>        pre[<span class="hljs-number">1</span>][i]=i;<br>    }<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++){<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j&lt;=m;j++){<br>            <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<br>            dp[i][j]=pre[i<span class="hljs-number">-1</span>][m];<br>            <span class="hljs-keyword">else</span>{<br>                dp[i][j]=(pre[i<span class="hljs-number">-1</span>][std::<span class="hljs-built_in">max</span>(j-k,<span class="hljs-number">0</span>)]+pre[i<span class="hljs-number">-1</span>][m]-pre[i<span class="hljs-number">-1</span>][std::<span class="hljs-built_in">min</span>(j+k<span class="hljs-number">-1</span>,m)])%mod;<br>                dp[i][j]=(dp[i][j]%mod+mod)%mod;<br>            }<br>        }   <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j&lt;=m;j++){<br>            pre[i][j]=(pre[i][j<span class="hljs-number">-1</span>]+dp[i][j])%mod;<br>        }<br>    }<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d\n"</span>,pre[n][m]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> abc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use gcc instead of clang on macOS</title>
      <link href="/project/2022/05/20/How-to-use-gcc-instead-of-clang-on-macOS/"/>
      <url>/project/2022/05/20/How-to-use-gcc-instead-of-clang-on-macOS/</url>
      
        <content type="html"><![CDATA[<ol><li><p>Install g++ through home-brew. </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">brew install gcc<br></code></pre></td></tr></tbody></table></figure><p>OR gcc@12</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">brew install gcc@12<br></code></pre></td></tr></tbody></table></figure></li><li><p>Check out the version you just installed, probably 11th or 10th, (let’s suppose it’s the 11th version).</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">gcc-11 -v<br></code></pre></td></tr></tbody></table></figure><p>OR</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">gcc-12 -v<br></code></pre></td></tr></tbody></table></figure></li><li><p>link gcc</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">brew link gcc<br></code></pre></td></tr></tbody></table></figure><p>OR</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">brew link gcc@12<br></code></pre></td></tr></tbody></table></figure></li><li><p>make a symbolic link from g++-11/g++-12 to g++</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">sudo ln -s $(which g++-11) /usr/local/bin/g++<br></code></pre></td></tr></tbody></table></figure><p>OR</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">sudo ln -s $(which g++-12) /usr/local/bin/g++<br></code></pre></td></tr></tbody></table></figure></li><li><p>Optional</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">sudo ln -s $(which gcc-12) /usr/local/bin/gcc<br></code></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ABC251 A-F题解</title>
      <link href="/project/2022/05/16/ABC251-A-F%E9%A2%98%E8%A7%A3/"/>
      <url>/project/2022/05/16/ABC251-A-F%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Six-Characters"><a href="#A-Six-Characters" class="headerlink" title="A.Six Characters"></a>A.Six Characters</h1><h2 id="Problem-Statement"><a href="#Problem-Statement" class="headerlink" title="Problem Statement"></a>Problem Statement</h2><p>You are given a string S consisting of lowercase English characters. The length of S is between 1 and 3, inclusive.</p><p>Print the string of length 6 that is a repetition of S.</p><p>It can be shown that there uniquely exists such a string under the Constraints of this problem.</p><h2 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h2><p>S is a string consisting of lowercase English characters of length between 1 and 3, inclusive.</p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一个长度在1到3之间到字符串，要求重复打印直到总长度为6</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>很简单</p><span id="more"></span><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for(int i = (int)l; i &lt; (int)n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FAST std::cin.tie(nullptr)-&gt;std::ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> edl std::cout &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a) std::cout &lt;&lt; #a &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; (a) &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3c3c3c3c <span class="hljs-comment">// 1010580540, 7f7f7f7f:2139062143</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> llinf 9223372036854775807</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> cmuticases() int T;scanf(<span class="hljs-string">"%d"</span>,&amp;T);while(T--)solve();</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticases() int T;std::cin&gt;&gt;T;while(T--)solve();</span><br><span class="hljs-function">std::mt19937_64 <span class="hljs-title">mrand</span><span class="hljs-params">(std::random_device{}())</span></span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> ull = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> ll mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rnd</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-built_in">mrand</span>() % x;}<br><span class="hljs-function">ll <span class="hljs-title">powmod</span><span class="hljs-params">(ll a,ll b)</span> </span>{ll res=<span class="hljs-number">1</span>;a%=mod; <span class="hljs-built_in">assert</span>(b&gt;=<span class="hljs-number">0</span>); <span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>){<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)res=res*a%mod;a=a*a%mod;}<span class="hljs-keyword">return</span> res;}<br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a,ll b)</span> </span>{ <span class="hljs-keyword">return</span> b?<span class="hljs-built_in">gcd</span>(b,a%b):a;}<br><span class="hljs-comment">//------------------------------------</span><br><span class="hljs-comment">//--------------zzh-------------------</span><br><span class="hljs-comment">//------------------------------------</span><br><span class="hljs-comment">//using namespace std;</span><br><span class="hljs-comment">//#define int long long</span><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    FAST;<br>    std::string s; std::cin &gt;&gt; s;<br><span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">length</span>() == <span class="hljs-number">3</span>) {<br>std::cout &lt;&lt; s &lt;&lt; s;<br>} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">length</span>() == <span class="hljs-number">2</span>) {<br>std::cout &lt;&lt; s &lt;&lt; s &lt;&lt; s;<br>} <span class="hljs-keyword">else</span> {<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>) std::cout &lt;&lt; s;<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br></code></pre></td></tr></tbody></table></figure><h1 id="B-At-Most-3-Judge-ver"><a href="#B-At-Most-3-Judge-ver" class="headerlink" title="B.  At Most 3 (Judge ver.)"></a>B.  At Most 3 (Judge ver.)</h1><h2 id="Problem-Statement-1"><a href="#Problem-Statement-1" class="headerlink" title="Problem Statement"></a>Problem Statement</h2><p>There are N weights called Weight 1, Weight 2, …, Weight N. Weight i has a mass of Ai​.<br>Let us say a positive integer n is a good integer if the following condition is satisfied:</p><ul><li>We can choose at most 3 different weights so that they have a total mass of n.</li></ul><p>How many positive integers less than or equal to W are good integers?</p><h2 id="Constraints-1"><a href="#Constraints-1" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1≤N≤300</li><li>1≤W≤1e6</li><li>1≤Ai​≤1e6</li><li>All values in input are integers.</li></ul><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>在给定一串数组中找到3个数之和n小于等于w，求n的个数。</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>因为数据范围比较小，所以暴力搜一下也是可以过的</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for(int i = (int)l; i &lt; (int)n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FAST std::cin.tie(nullptr)-&gt;std::ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> edl std::cout &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a) std::cout &lt;&lt; #a &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; (a) &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3c3c3c3c <span class="hljs-comment">// 1010580540, 7f7f7f7f:2139062143</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> llinf 9223372036854775807</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> cmuticases() int T;scanf(<span class="hljs-string">"%d"</span>,&amp;T);while(T--)solve();</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticases() int T;std::cin&gt;&gt;T;while(T--)solve();</span><br><span class="hljs-function">std::mt19937_64 <span class="hljs-title">mrand</span><span class="hljs-params">(std::random_device{}())</span></span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> ull = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> ll mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rnd</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-built_in">mrand</span>() % x;}<br><span class="hljs-function">ll <span class="hljs-title">powmod</span><span class="hljs-params">(ll a,ll b)</span> </span>{ll res=<span class="hljs-number">1</span>;a%=mod; <span class="hljs-built_in">assert</span>(b&gt;=<span class="hljs-number">0</span>); <span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>){<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)res=res*a%mod;a=a*a%mod;}<span class="hljs-keyword">return</span> res;}<br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a,ll b)</span> </span>{ <span class="hljs-keyword">return</span> b?<span class="hljs-built_in">gcd</span>(b,a%b):a;}<br><span class="hljs-comment">//------------------------------------</span><br><span class="hljs-comment">//--------------zzh-------------------</span><br><span class="hljs-comment">//------------------------------------</span><br><span class="hljs-comment">//using namespace std;</span><br><span class="hljs-comment">//#define int long long</span><br><span class="hljs-type">int</span> n, w;<br>ll ans = <span class="hljs-number">0</span>;<br>std::vector&lt;<span class="hljs-type">int</span>&gt; v;<br><span class="hljs-type">bool</span> vis[<span class="hljs-number">3010000</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    FAST;<br>    std::cin &gt;&gt; n &gt;&gt; w;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-built_in">sizeof</span>(vis));<br>    <span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,n) {<br>    <span class="hljs-type">int</span> x; std::cin &gt;&gt; x;<br>    v.<span class="hljs-built_in">pb</span>(x);<br>    <span class="hljs-keyword">if</span>(x &lt;= w) {<br>    <span class="hljs-keyword">if</span>(!vis[x]) ans++;<br>    vis[x] = <span class="hljs-literal">true</span>;<br>    }<br>    }<br>    <span class="hljs-type">int</span> sz = v.<span class="hljs-built_in">size</span>();<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,sz) {<br><span class="hljs-built_in">rep</span>(j,i+<span class="hljs-number">1</span>,sz) {<br>ll tmp = v[i] + v[j];<br><span class="hljs-keyword">if</span>(tmp &lt;= w &amp;&amp; !vis[tmp]) {<br>ans++;<br>vis[tmp] = <span class="hljs-literal">true</span>;<br>}<br>}<br>}<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,sz) {<br><span class="hljs-built_in">rep</span>(j,i+<span class="hljs-number">1</span>,sz) {<br><span class="hljs-built_in">rep</span>(k,j+<span class="hljs-number">1</span>,sz) {<br>ll tmp = v[i] + v[j] + v[k];<br><span class="hljs-keyword">if</span>(tmp &lt;= w &amp;&amp; !vis[tmp]) {<br>ans++;<br>vis[tmp] = <span class="hljs-literal">true</span>;<br>}<br>}<br>}<br>}<br>std::cout &lt;&lt; ans;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="C-Poem-Online-Judge"><a href="#C-Poem-Online-Judge" class="headerlink" title="C.Poem Online Judge"></a>C.Poem Online Judge</h1><h2 id="Problem-Statement-2"><a href="#Problem-Statement-2" class="headerlink" title="Problem Statement"></a>Problem Statement</h2><p>Poem Online Judge (POJ) is an online judge that gives scores to submitted strings.<br>There were N submissions to POJ. In the i-th earliest submission, string Si​ was submitted, and a score of</p><p>Ti​ was given. (The same string may have been submitted multiple times.)<br>Note that POJ may not necessarily give the same score to submissions with the same string.</p><p>A submission is said to be an original submission if the string in the submission is never submitted in any earlier submission.<br>A submission is said to be the best submission if it is an original submission with the highest score. If there are multiple such submissions, only the earliest one is considered the best submission.</p><p>Find the index of the best submission.</p><h2 id="Constraints-2"><a href="#Constraints-2" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1≤N≤1e5</li><li>Si​ is a string consisting of lowercase English characters.</li><li>Si​ has a length between 1 and 10, inclusive.</li><li>0≤Ti​≤1e9</li><li>N and Ti​ are integers.</li></ul><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>找到每个种类第一次出现的数中的最大值下标</p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p>很简单，可以写个结构体存储字符串，分数，下标，然后用std::map完美解决</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for(int i = (int)l; i &lt; (int)n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FAST std::cin.tie(nullptr)-&gt;std::ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> edl std::cout &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a) std::cout &lt;&lt; #a &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; (a) &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3c3c3c3c <span class="hljs-comment">// 1010580540, 7f7f7f7f:2139062143</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> llinf 9223372036854775807</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> cmuticases() int T;scanf(<span class="hljs-string">"%d"</span>,&amp;T);while(T--)solve();</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticases() int T;std::cin&gt;&gt;T;while(T--)solve();</span><br><span class="hljs-function">std::mt19937_64 <span class="hljs-title">mrand</span><span class="hljs-params">(std::random_device{}())</span></span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> ull = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> ll mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rnd</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-built_in">mrand</span>() % x;}<br><span class="hljs-function">ll <span class="hljs-title">powmod</span><span class="hljs-params">(ll a,ll b)</span> </span>{ll res=<span class="hljs-number">1</span>;a%=mod; <span class="hljs-built_in">assert</span>(b&gt;=<span class="hljs-number">0</span>); <span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>){<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)res=res*a%mod;a=a*a%mod;}<span class="hljs-keyword">return</span> res;}<br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a,ll b)</span> </span>{ <span class="hljs-keyword">return</span> b?<span class="hljs-built_in">gcd</span>(b,a%b):a;}<br><span class="hljs-comment">//------------------------------------</span><br><span class="hljs-comment">//--------------zzh-------------------</span><br><span class="hljs-comment">//------------------------------------</span><br><span class="hljs-comment">//using namespace std;</span><br><span class="hljs-comment">//#define int long long</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> {<br>    <span class="hljs-type">int</span> id, score;<br>    std::string s;<br>};<br><br>std::vector&lt;PII&gt; ans;<br>std::unordered_map&lt;std::string, <span class="hljs-type">int</span>&gt; mp;<br><span class="hljs-type">int</span> n; <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    FAST;<br>    std::cin &gt;&gt; n;<br>    <span class="hljs-function">std::vector&lt;node&gt; <span class="hljs-title">v</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) {<br>        v[i].id = i;<br>    std::cin &gt;&gt; v[i].s &gt;&gt; v[i].score;<br>        mp[v[i].s]++;<br>        <span class="hljs-keyword">if</span>(mp[v[i].s] == <span class="hljs-number">1</span>) {<br>            ans.<span class="hljs-built_in">pb</span>({v[i].id, v[i].score});<br>        }<br>    }<br>    std::<span class="hljs-built_in">sort</span>(<span class="hljs-built_in">all</span>(ans), [](PII a, PII b) {<br>        <span class="hljs-keyword">return</span> a.se &gt; b.se;<br>    });<br>    std::cout &lt;&lt; ans[<span class="hljs-number">0</span>].fi;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="D-At-Most-3-Contestant-ver"><a href="#D-At-Most-3-Contestant-ver" class="headerlink" title="D.At Most 3 (Contestant ver.)"></a>D.At Most 3 (Contestant ver.)</h1><h2 id="Problem-Statement-3"><a href="#Problem-Statement-3" class="headerlink" title="Problem Statement"></a>Problem Statement</h2><p>You are given an integer W.<br>You are going to prepare some weights so that all of the conditions below are satisfied.</p><ul><li>The number of weights is between 1 and 300, inclusive.</li><li>Each weight has a mass of positive integer not exceeding 1e6.</li><li>Every integer between 1 and W, inclusive, is a good integer. Here, a positive integer n is said to be a good integer if the following condition is satisfied:<ul><li>We can choose at most 3 different weights from the prepared weights with a total mass of n.<br>Print a combination of weights that satisfies the conditions.</li></ul></li></ul><h2 id="Constraints-3"><a href="#Constraints-3" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>1≤W≤1e6</li><li>W is an integer.</li></ul><h2 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h2><p>逆向求B题</p><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for(int i = (int)l; i &lt; (int)n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FAST std::cin.tie(nullptr)-&gt;std::ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> edl std::cout &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a) std::cout &lt;&lt; #a &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; (a) &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3c3c3c3c <span class="hljs-comment">// 1010580540, 7f7f7f7f:2139062143</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> llinf 9223372036854775807</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> cmuticases() int T;scanf(<span class="hljs-string">"%d"</span>,&amp;T);while(T--)solve();</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticases() int T;std::cin&gt;&gt;T;while(T--)solve();</span><br><span class="hljs-function">std::mt19937_64 <span class="hljs-title">mrand</span><span class="hljs-params">(std::random_device{}())</span></span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> ull = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> ll mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rnd</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-built_in">mrand</span>() % x;}<br><span class="hljs-function">ll <span class="hljs-title">powmod</span><span class="hljs-params">(ll a,ll b)</span> </span>{ll res=<span class="hljs-number">1</span>;a%=mod; <span class="hljs-built_in">assert</span>(b&gt;=<span class="hljs-number">0</span>); <span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>){<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)res=res*a%mod;a=a*a%mod;}<span class="hljs-keyword">return</span> res;}<br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a,ll b)</span> </span>{ <span class="hljs-keyword">return</span> b?<span class="hljs-built_in">gcd</span>(b,a%b):a;}<br><span class="hljs-comment">//------------------------------------</span><br><span class="hljs-comment">//--------------zzh-------------------</span><br><span class="hljs-comment">//------------------------------------</span><br><span class="hljs-comment">//using namespace std;</span><br><span class="hljs-comment">//#define int long long</span><br><br><span class="hljs-type">int</span> W;<br>std::vector&lt;<span class="hljs-type">int</span>&gt; Ans;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>FAST;<br>std::cin &gt;&gt; W;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">100</span>; i++) {<br>Ans.<span class="hljs-built_in">pb</span>(i);<br>}<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">100</span>; i++) {<br>Ans.<span class="hljs-built_in">pb</span>(i*<span class="hljs-number">100</span>);<br>}<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) {<br>Ans.<span class="hljs-built_in">pb</span>(i*<span class="hljs-number">10000</span>);<br>}<br>std::cout &lt;&lt; Ans.<span class="hljs-built_in">size</span>() &lt;&lt; <span class="hljs-string">'\n'</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;i : Ans) std::cout &lt;&lt; i &lt;&lt; <span class="hljs-string">' '</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="E-Takahashi-and-Animals"><a href="#E-Takahashi-and-Animals" class="headerlink" title="E.Takahashi and Animals"></a>E.Takahashi and Animals</h1><h2 id="Problem-Statement-4"><a href="#Problem-Statement-4" class="headerlink" title="Problem Statement"></a>Problem Statement</h2><p>Takahashi is with N animals. The N animals are called Animal 1, Animal 2, …, Animal N.<br>Takahashi will perform the following N kinds of action. Each action can be performed any number of (possibly zero) times.</p><ul><li>Pay A1​ yen (the currency in Japan) to feed Animals 1 and 2.</li><li>Pay A2​ yen to feed Animals 2 and 3.</li><li>Pay A3​ yen to feed Animals 3 and 4.</li><li>…</li><li>Pay Ai​ yen to feed Animals i and (i+1).</li><li>…</li><li>Pay AN−2​ yen to feed Animals (N−2) and (N−1).</li><li>Pay AN−1​ yen to feed Animals (N−1) and N.</li><li>Pay AN​ yen to feed Animals N and 1.<br>Note that the N-th action above feeds “Animals N and 1.”<br>Print the minimum possible total cost to feed every animal at least once.</li></ul><h2 id="Constraints-4"><a href="#Constraints-4" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>2≤N≤3×1e5</li><li>1≤Ai​≤1e9</li><li>All values in input are integers.</li></ul><h2 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h2><p>给定一串数组，你每次可以选中i并支付ai的值的费用来投喂i,i+1。要求出能覆盖所有动物的最小值。</p><h2 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h2><p>DP</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for(int i = (int)l; i &lt; (int)n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FAST std::cin.tie(nullptr)-&gt;std::ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> edl std::cout &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a) std::cout &lt;&lt; #a &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; (a) &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3c3c3c3c <span class="hljs-comment">// 1010580540, 7f7f7f7f:2139062143</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> llinf 9223372036854775807</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> cmuticases() int T;scanf(<span class="hljs-string">"%d"</span>,&amp;T);while(T--)solve();</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticases() int T;std::cin&gt;&gt;T;while(T--)solve();</span><br><span class="hljs-function">std::mt19937_64 <span class="hljs-title">mrand</span><span class="hljs-params">(std::random_device{}())</span></span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> ull = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> ll mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rnd</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-built_in">mrand</span>() % x;}<br><span class="hljs-function">ll <span class="hljs-title">powmod</span><span class="hljs-params">(ll a,ll b)</span> </span>{ll res=<span class="hljs-number">1</span>;a%=mod; <span class="hljs-built_in">assert</span>(b&gt;=<span class="hljs-number">0</span>); <span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>){<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)res=res*a%mod;a=a*a%mod;}<span class="hljs-keyword">return</span> res;}<br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a,ll b)</span> </span>{ <span class="hljs-keyword">return</span> b?<span class="hljs-built_in">gcd</span>(b,a%b):a;}<br><span class="hljs-comment">//using namespace std;</span><br><span class="hljs-comment">//#define int long long</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">301000</span>;<br><span class="hljs-type">int</span> n,a[N];<br>ll dp[N][<span class="hljs-number">2</span>],ans=llinf;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>FAST;<br>std::cin &gt;&gt; n;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">0</span>,n) std::cin &gt;&gt; a[i];<br><br><span class="hljs-built_in">rep</span>(bt,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>) {<br><span class="hljs-keyword">if</span> (bt==<span class="hljs-number">0</span>) dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>,dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=a[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">else</span> dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=a[<span class="hljs-number">0</span>],dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=llinf;<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n) {<br>dp[i][<span class="hljs-number">1</span>]=std::<span class="hljs-built_in">min</span>(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>],dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>])+a[i];<br>dp[i][<span class="hljs-number">0</span>]=dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>];<br>}<br><span class="hljs-keyword">if</span> (bt==<span class="hljs-number">0</span>) ans=dp[n<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>];<br><span class="hljs-keyword">else</span> ans=std::<span class="hljs-built_in">min</span>(ans,std::<span class="hljs-built_in">min</span>(dp[n<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>],dp[n<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]));<br>}<br>std::cout &lt;&lt; ans;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="F-Two-Spanning-Trees"><a href="#F-Two-Spanning-Trees" class="headerlink" title="F.Two Spanning Trees"></a>F.Two Spanning Trees</h1><h2 id="Problem-Statement-5"><a href="#Problem-Statement-5" class="headerlink" title="Problem Statement"></a>Problem Statement</h2><p>You are given an undirected graph<br>G with N vertices and M edges.<br>G is simple (it has no self-loops and multiple edges) and connected.<br>For i=1,2,…,M, the i-th edge is an undirected edge {ui​,vi​} connecting Vertices ui​ and vi​.<br>Construct two spanning trees T1​ and T2​ of G that satisfy both of the two conditions below. (T1​ and T2​ do not necessarily have to be different spanning trees.)</p><ul><li>T1​ satisfies the following.<blockquote><p>If we regard T1​ as a rooted tree rooted at Vertex 1, for any edge {u,v} of G not contained in T1​, one of u and v is an ancestor of the other in T1</p></blockquote></li><li>T2​ satisfies the following.<blockquote><p>If we regard T2​ as a rooted tree rooted at Vertex 1, there is no edge {u,v} of G not contained in T2​ such that one of u and v is an ancestor of the other in T2​.<br>We can show that there always exists T1​ and T2​ that satisfy the conditions above.</p></blockquote></li></ul><h2 id="Constraints-5"><a href="#Constraints-5" class="headerlink" title="Constraints"></a>Constraints</h2><ul><li>2≤N≤2×1e5</li><li>N−1≤M≤min{2×1e5,N(N−1)/2}</li><li>1≤ui​,vi​≤N</li><li>All values in input are integers.</li><li>The given graph is simple and connected.</li></ul><h2 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你一棵树,从1出发，求DFS序和BFS序</p><h2 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h2><p>搜</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for(int i = (int)l; i &lt; (int)n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FAST std::cin.tie(nullptr)-&gt;std::ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> edl std::cout &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a) std::cout &lt;&lt; #a &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; (a) &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3c3c3c3c <span class="hljs-comment">// 1010580540, 7f7f7f7f:2139062143</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> llinf 9223372036854775807</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> cmuticases() int T;scanf(<span class="hljs-string">"%d"</span>,&amp;T);while(T--)solve();</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticases() int T;std::cin&gt;&gt;T;while(T--)solve();</span><br><span class="hljs-function">std::mt19937_64 <span class="hljs-title">mrand</span><span class="hljs-params">(std::random_device{}())</span></span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> ull = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> ll mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rnd</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-built_in">mrand</span>() % x;}<br><span class="hljs-function">ll <span class="hljs-title">powmod</span><span class="hljs-params">(ll a,ll b)</span> </span>{ll res=<span class="hljs-number">1</span>;a%=mod; <span class="hljs-built_in">assert</span>(b&gt;=<span class="hljs-number">0</span>); <span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>){<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)res=res*a%mod;a=a*a%mod;}<span class="hljs-keyword">return</span> res;}<br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a,ll b)</span> </span>{ <span class="hljs-keyword">return</span> b?<span class="hljs-built_in">gcd</span>(b,a%b):a;}<br><span class="hljs-comment">//using namespace std;</span><br><span class="hljs-comment">//#define int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span>+<span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n, m;<br>std::vector&lt;<span class="hljs-type">int</span>&gt; g[N];<br><span class="hljs-type">bool</span> vis[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>{<br>vis[x] = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : g[x]) {<br><span class="hljs-keyword">if</span>(!vis[v]) {<br>std::cout &lt;&lt; x &lt;&lt; <span class="hljs-string">' '</span> &lt;&lt; v &lt;&lt; <span class="hljs-string">'\n'</span>;<br><span class="hljs-built_in">dfs</span>(v);<br>}<br>}<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    FAST;<br>    std::cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) {<br>    <span class="hljs-type">int</span> u, v;<br>    std::cin &gt;&gt; u &gt;&gt; v;<br>        g[u].<span class="hljs-built_in">pb</span>(v);<br>    g[v].<span class="hljs-built_in">pb</span>(u);<br>    }<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-built_in">sizeof</span>(vis));<br>    std::queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>    vis[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>()) {<br>    <span class="hljs-type">int</span> t = q.<span class="hljs-built_in">front</span>();<br>    q.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : g[t]) {<br>    <span class="hljs-keyword">if</span>(!vis[v]) {<br>    std::cout &lt;&lt; t &lt;&lt; <span class="hljs-string">' '</span> &lt;&lt; v &lt;&lt; <span class="hljs-string">'\n'</span>;<br>    vis[v] = <span class="hljs-literal">true</span>;<br>    q.<span class="hljs-built_in">push</span>(v);<br>    }<br>    }<br>    }<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> abc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ABC250 A-E题解</title>
      <link href="/project/2022/05/09/ABC250-A-E%E9%A2%98%E8%A7%A3/"/>
      <url>/project/2022/05/09/ABC250-A-E%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="A-Adjacent-Squares"><a href="#A-Adjacent-Squares" class="headerlink" title="A.Adjacent Squares"></a>A.Adjacent Squares</h2><span id="more"></span><h3 id="题面："><a href="#题面：" class="headerlink" title="题面："></a>题面：</h3><p>There is a grid with H horizontal rows and W vertical columns. Let (i,j) denote the square at the i-th row from the top and the j-th column from the left.<br>Find the number of squares that share a side with Square(R,C).Here, two squares(a,b) and (c,d) are said to share a side if and only if ∣a−c∣+∣b−d∣=1 (where ∣x∣ denotes the absolute value of x).</p><h4 id="大意：在-H-W-中找到符合-R-C-∣a−c∣-∣b−d∣-1条件的组合数"><a href="#大意：在-H-W-中找到符合-R-C-∣a−c∣-∣b−d∣-1条件的组合数" class="headerlink" title="大意：在(H,W)中找到符合(R,C)∣a−c∣+∣b−d∣=1条件的组合数."></a>大意：在(H,W)中找到符合(R,C)∣a−c∣+∣b−d∣=1条件的组合数.</h4><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>照着题目的意思模拟一下即可</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for(int i = (int)l; i &lt; (int)n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FAST std::cin.tie(nullptr)-&gt;std::ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">'\n'</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a) cout &lt;&lt; #a &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; (a) &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3c3c3c3c <span class="hljs-comment">// 1010580540, 7f7f7f7f:2139062143</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> llinf 9223372036854775807</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticase() int T;std::cin&gt;&gt;T;while(T--)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticases() int std::cin&gt;&gt;T;while(T--)solve();</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>FAST;<br><span class="hljs-type">int</span> H, W, R, C, ans = <span class="hljs-number">0</span>;<br>std::cin &gt;&gt; H &gt;&gt; W &gt;&gt; R &gt;&gt; C;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= H; i++)<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= W; j++) {<br><span class="hljs-keyword">if</span>(std::<span class="hljs-built_in">abs</span>(i-R) + std::<span class="hljs-built_in">abs</span>(j-C) == <span class="hljs-number">1</span>)<br>ans++;<br>}<br>std::cout &lt;&lt; ans;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="B-Enlarged-Checker-Board"><a href="#B-Enlarged-Checker-Board" class="headerlink" title="B.Enlarged Checker Board"></a>B.Enlarged Checker Board</h2><h3 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h3><p>Tiles are aligned in N horizontal rows and N vertical columns. Each tile has a grid with A horizontal rows and B vertical columns. On the whole, the tiles form a grid X with (A×N) horizontal rows and (B×N) vertical columns.<br>For 1≤i,j≤N, Tile (i,j) denotes the tile at the i-th row from the top and the j-th column from the left. </p><p>Each square of X is painted as follows.</p><pre><code class="hljs">Each tile is either a white tile or a black tile.Every square in a white tile is painted white; every square in a black tile is painted black.Tile(1,1) is a white tile.Two tiles sharing a side have different colors. Here, Tile(a,b) and Tile (c,d) are said to be sharing a side if and only if ∣a−c∣+∣b−d∣=1 (where ∣x∣ denotes the absolute value of x).</code></pre><p>(1,1) is a white tile.<br>Two tiles sharing a side have different colors. Here, Tile (a,b) and Tile (c,d) are said to be sharing a side if and only if ∣a−c∣+∣b−d∣=1 (where ∣x∣ denotes the absolute value of x).</p><p>Print the grid X in the format specified in the Output section.</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>可以照着样例找规律模拟一下</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for(int i = (int)l; i &lt; (int)n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FAST std::cin.tie(nullptr)-&gt;std::ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">'\n'</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a) cout &lt;&lt; #a &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; (a) &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3c3c3c3c <span class="hljs-comment">// 1010580540, 7f7f7f7f:2139062143</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> llinf 9223372036854775807</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticase() int T;std::cin&gt;&gt;T;while(T--)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticases() int std::cin&gt;&gt;T;while(T--)solve();</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> n, a, b;<br><span class="hljs-type">int</span> tag;<br>std::cin &gt;&gt; n &gt;&gt; a &gt;&gt; b;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n*a; i++) {<br><span class="hljs-keyword">if</span>((i/a)%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>) tag = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> tag = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n*b; j++) {<br><span class="hljs-keyword">if</span>((j / b) % <span class="hljs-number">2</span> == tag)<br>std::cout &lt;&lt; <span class="hljs-string">'#'</span>;<br><span class="hljs-keyword">else</span><br>std::cout &lt;&lt; <span class="hljs-string">'.'</span>;<br>}<br>std::cout &lt;&lt; endl;<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="C-Adjacent-Swaps"><a href="#C-Adjacent-Swaps" class="headerlink" title="C. Adjacent Swaps"></a>C. Adjacent Swaps</h2><h3 id="题面-1"><a href="#题面-1" class="headerlink" title="题面"></a>题面</h3><p>N balls are lined up in a row from left to right. Initially, the i-th (1≤i≤N) ball from the left has an integer i written on it.</p><p>Takahashi has performed Q operations. The i-th (1≤i≤Q) operation was as follows.</p><pre><code class="hljs">Swap the ball with the integer </code></pre><p>xi​ written on it with the next ball to the right. If the ball with the integer</p><pre><code class="hljs">xi​ written on it was originally the rightmost ball, swap it with the next ball to the left instead.</code></pre><p>Let $ai$​ be the integer written on the i-th (1≤i≤N) ball after the operations. Find $a1,…,aN$.</p><h4 id="大意：给出一个长度为q的询问序列-xi-1-lt-xi-lt-q-对于每个-xi-，如果-pos-xi-n-则与左相邻的一个元素交换，如果-pos-xi-n-则与右相邻的元素交换"><a href="#大意：给出一个长度为q的询问序列-xi-1-lt-xi-lt-q-对于每个-xi-，如果-pos-xi-n-则与左相邻的一个元素交换，如果-pos-xi-n-则与右相邻的元素交换" class="headerlink" title="大意：给出一个长度为q的询问序列$xi$, $1<=xi<=q$,对于每个$xi$，如果$pos[xi] == n$则与左相邻的一个元素交换，如果$pos[xi] != n$则与右相邻的元素交换"></a>大意：给出一个长度为q的询问序列$xi$, $1&lt;=xi&lt;=q$,对于每个$xi$，如果$pos[xi] == n$则与左相邻的一个元素交换，如果$pos[xi] != n$则与右相邻的元素交换</h4><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for(int i = (int)l; i &lt; (int)n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FAST std::cin.tie(nullptr)-&gt;std::ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">'\n'</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a) cout &lt;&lt; #a &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; (a) &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3c3c3c3c <span class="hljs-comment">// 1010580540, 7f7f7f7f:2139062143</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> llinf 9223372036854775807</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticase() int T;std::cin&gt;&gt;T;while(T--)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticases() int std::cin&gt;&gt;T;while(T--)solve();</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> n;<br>std::cin &gt;&gt; n;<br><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">val</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span>, <span class="hljs-title">pos</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>val[i] = i, pos[i] = i;<br><span class="hljs-type">int</span> q;<br>std::cin &gt;&gt; q;<br><span class="hljs-keyword">while</span>(q--) {<br><span class="hljs-type">int</span> x;<br>std::cin &gt;&gt; x;<br><span class="hljs-type">int</span> p0 = pos[x];<br><span class="hljs-type">int</span> p1 = p0;<br><span class="hljs-keyword">if</span>(p0 != n) p1++;<br><span class="hljs-keyword">else</span> p1--;<br>std::<span class="hljs-built_in">swap</span>(val[p0], val[p1]);<br>std::<span class="hljs-built_in">swap</span>(pos[val[p0]], pos[val[p1]]);<br>}<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>std::cout &lt;&lt; val[i] &lt;&lt; <span class="hljs-string">' '</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="D-250-like-Number"><a href="#D-250-like-Number" class="headerlink" title="D.250-like Number"></a>D.250-like Number</h2><h3 id="题面-2"><a href="#题面-2" class="headerlink" title="题面"></a>题面</h3><p>Let us regard an integer k as “similar to 250” if the following condition is satisfied:</p><p>k is represented as k=p×q3 with primes</p><pre><code class="hljs">p&lt;q.</code></pre><p>How many integers less than or equal to N are “similar to 250”?</p><blockquote><p>数据范围是1e18</p></blockquote><h4 id="大意：在不大于N的素数中找到符合-k-p-q-3-的个数"><a href="#大意：在不大于N的素数中找到符合-k-p-q-3-的个数" class="headerlink" title="大意：在不大于N的素数中找到符合$k=p*q^3$的个数"></a>大意：在不大于N的素数中找到符合$k=p*q^3$的个数</h4><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>素数筛+列举q</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for(int i = (int)l; i &lt; (int)n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FAST std::cin.tie(nullptr)-&gt;std::ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">'\n'</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a) cout &lt;&lt; #a &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; (a) &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3c3c3c3c <span class="hljs-comment">// 1010580540, 7f7f7f7f:2139062143</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> llinf 9223372036854775807</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticase() int T;std::cin&gt;&gt;T;while(T--)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticases() int std::cin&gt;&gt;T;while(T--)solve();</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000005</span>;<br><br>std::vector&lt;ll&gt; primes;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>{<span class="hljs-comment">//素数筛</span><br><span class="hljs-function">std::vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">fl</span><span class="hljs-params">(N, <span class="hljs-literal">false</span>)</span></span>; <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; N; i++) {<br><span class="hljs-keyword">if</span>(fl[i]) <span class="hljs-keyword">continue</span>;<br>primes.<span class="hljs-built_in">push_back</span>(i);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i*<span class="hljs-number">2</span>; j &lt; N; j+=i)<br>fl[j] = <span class="hljs-literal">true</span>;<br>}<br>}<br><br><span class="hljs-function">ll <span class="hljs-title">f</span><span class="hljs-params">(ll p, ll q)</span> </span>{<br><span class="hljs-type">double</span> est = <span class="hljs-number">1</span>;<br>est = (q * q * q);<br>est *= p;<br><span class="hljs-keyword">return</span> est;<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-built_in">init</span>();<br>ll n;<br>std::cin &gt;&gt; n;<br>ll ans = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> q = primes.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> p = <span class="hljs-number">0</span>; p &lt; primes.<span class="hljs-built_in">size</span>(); p++) {<br><span class="hljs-keyword">while</span>(p &lt; q &amp;&amp; <span class="hljs-built_in">f</span>(primes[p], primes[q]) &gt; n)<br>q--;<br><span class="hljs-keyword">if</span>(p &gt;= q)<br><span class="hljs-keyword">break</span>;<br>ans += q - p;<br>}<br>std::cout &lt;&lt; ans;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="E-Prefix-Equality"><a href="#E-Prefix-Equality" class="headerlink" title="E.Prefix Equality"></a>E.Prefix Equality</h2><h3 id="题面：-1"><a href="#题面：-1" class="headerlink" title="题面："></a>题面：</h3><p>You are given integer sequences A=(a1​,…,aN​) and B=(b1​,…,bN​), each of length N.</p><p>For i=1,…,Q, answer the query in the following format.</p><pre><code class="hljs">If the set of values contained in the first </code></pre><p>xi​ terms of A, (a1​,…,axi​​), and the set of values contained in the first yi​ terms of B, (b1​,…,byi​​), are equal, then print Yes; otherwise, print No.</p><h4 id="大意：给定两个数组a、b，对于每个询问-x-y-，求出-Set-ai-1-lt-i-lt-x-和-Set-bi-1-lt-i-lt-y-是否相同，（可以用c-STL中的set）来实现。"><a href="#大意：给定两个数组a、b，对于每个询问-x-y-，求出-Set-ai-1-lt-i-lt-x-和-Set-bi-1-lt-i-lt-y-是否相同，（可以用c-STL中的set）来实现。" class="headerlink" title="大意：给定两个数组a、b，对于每个询问${x,y}$，求出$Set {-ai(1<=i<=x)}$和$Set{-bi (1<=i<=y)}$是否相同，（可以用c++ STL中的set）来实现。"></a>大意：给定两个数组a、b，对于每个询问${x,y}$，求出$Set {-ai(1&lt;=i&lt;=x)}$和$Set{-bi (1&lt;=i&lt;=y)}$是否相同，（可以用c++ STL中的set）来实现。</h4><h3 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h3><p>可以使用哈希+set的做法实现。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for(int i = (int)l; i &lt; (int)n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FAST std::cin.tie(nullptr)-&gt;std::ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> endl <span class="hljs-string">'\n'</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a) cout &lt;&lt; #a &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; (a) &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3c3c3c3c <span class="hljs-comment">// 1010580540, 7f7f7f7f:2139062143</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> llinf 9223372036854775807</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticase() int T;std::cin&gt;&gt;T;while(T--)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticases() int std::cin&gt;&gt;T;while(T--)solve();</span><br><span class="hljs-function">std::mt19937_64 <span class="hljs-title">mrand</span><span class="hljs-params">(std::random_device{}())</span></span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> ull = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">201000</span>;<br>std::map&lt;<span class="hljs-type">int</span>, ull&gt; cnt;<br>std::set&lt;<span class="hljs-type">int</span>&gt; cnta, cntb;<br>ull ha[N], hb[N];<br><br><span class="hljs-type">int</span> n, a[N], b[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>FAST;<br>std::cin &gt;&gt; n;<br><span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>) {<br>std::cin &gt;&gt; a[i];<br><span class="hljs-keyword">if</span>(!cnt.<span class="hljs-built_in">count</span>(a[i])) cnt[a[i]] = <span class="hljs-built_in">mrand</span>();<br>ha[i] = ha[i<span class="hljs-number">-1</span>];<br><span class="hljs-keyword">if</span>(!cnta.<span class="hljs-built_in">count</span>(a[i])) ha[i] += cnt[a[i]];<br>cnta.<span class="hljs-built_in">insert</span>(a[i]);<br>}<br><span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>) {<br>std::cin &gt;&gt; b[i];<br><span class="hljs-keyword">if</span>(!cnt.<span class="hljs-built_in">count</span>(b[i])) cnt[b[i]] = <span class="hljs-built_in">mrand</span>();<br>hb[i] = hb[i<span class="hljs-number">-1</span>];<br><span class="hljs-keyword">if</span>(!cntb.<span class="hljs-built_in">count</span>(b[i])) hb[i] += cnt[b[i]];<br>cntb.<span class="hljs-built_in">insert</span>(b[i]);<br>}<br><span class="hljs-type">int</span> q;<br>std::cin &gt;&gt; q;<br><span class="hljs-keyword">while</span>(q--) {<br><span class="hljs-type">int</span> x, y;<br>std::cin &gt;&gt; x &gt;&gt; y;<br>std::cout &lt;&lt; (ha[x] == hb[y] ? <span class="hljs-string">"Yes\n"</span> : <span class="hljs-string">"No\n"</span>);<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> abc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码源每日一题（持续更新）</title>
      <link href="/project/2022/05/01/%E4%BB%A3%E7%A0%81%E6%BA%90%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>/project/2022/05/01/%E4%BB%A3%E7%A0%81%E6%BA%90%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><a href="oj.daimayuan.top">代码源链接</a></p><span id="more"></span><h2 id="1day-特殊的正方形"><a href="#1day-特殊的正方形" class="headerlink" title="1day-特殊的正方形"></a>1day-特殊的正方形</h2><p>输入𝑛，输出𝑛行𝑛列的由<code>+</code>和<code>.</code>组成的正方形，其中最外面一圈全是<code>+</code>，第二圈全是<code>.</code>，…，对于第𝑖圈，如果𝑖是奇数，那么全是<code>+</code>，否则全是<code>.</code>。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>一行，一个整数𝑛。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>𝑛行，为满足题目要求的正方形。注意不要有行末空格。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">10<br></code></pre></td></tr></tbody></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight asciidoc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">++++++++++<br>+........+<br>+.++++++.+<br>+.+....+.+<br>+.+.++.+.+<br>+.+.++.+.+<br>+.+....+.+<br>+.++++++.+<br>+........+<br>++++++++++<br></code></pre></td></tr></tbody></table></figure><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>对于100%的数据，保证2≤𝑛≤100。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>模拟一下就好了</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ss</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> t)</span></span>{<br>  <span class="hljs-keyword">if</span>(t==<span class="hljs-number">1</span>){<br>    <span class="hljs-keyword">while</span>(x--){<br>      cout &lt;&lt; <span class="hljs-string">"+"</span>;<br>    }<br>  }<span class="hljs-keyword">else</span>{<br>    <span class="hljs-keyword">while</span>(x--){<br>      cout &lt;&lt; <span class="hljs-string">"."</span>;<br>    }<br>  }<br>}<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">aa</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>{<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= x; i++){<br>    <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)  cout &lt;&lt; <span class="hljs-string">"."</span>;<br>    <span class="hljs-keyword">else</span>{<br>      cout &lt;&lt; <span class="hljs-string">"+"</span>;<br>    }<br>  }<br>}<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bb</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>{<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = x; i &gt;<span class="hljs-number">0</span>; i--){<br>    <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>){<br>      cout &lt;&lt; <span class="hljs-string">"."</span>;<br>    }<span class="hljs-keyword">else</span>{<br>      cout &lt;&lt; <span class="hljs-string">"+"</span>;<br>    }<br>  }<br>}<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br>  <span class="hljs-type">int</span> n;<br>  cin &gt;&gt; n;<br>  <span class="hljs-type">int</span> cnt = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span>(n%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>){<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n/<span class="hljs-number">2</span>; i++){<br>    <span class="hljs-built_in">aa</span>(i);<br>    <span class="hljs-built_in">ss</span>(n<span class="hljs-number">-2</span>*i, cnt);<br>    <span class="hljs-built_in">bb</span>(i);<br>    cnt = -cnt;<br>    cout &lt;&lt; endl;<br>  }<br>   <span class="hljs-keyword">if</span>(n/<span class="hljs-number">2</span> %<span class="hljs-number">2</span> == <span class="hljs-number">0</span>){<br>      cnt = <span class="hljs-number">-1</span>;<br>    }<span class="hljs-keyword">else</span>{<br>      cnt = <span class="hljs-number">1</span>;<br>    }<br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n/<span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--){<br>    <span class="hljs-built_in">aa</span>(i);<br>    <span class="hljs-built_in">ss</span>(n<span class="hljs-number">-2</span>*i, cnt);<br>    <span class="hljs-built_in">bb</span>(i);<br>    cnt = -cnt;<br>    cout &lt;&lt; endl;<br>  }<br>  }<span class="hljs-keyword">else</span>{<br>     <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n/<span class="hljs-number">2</span><span class="hljs-number">-1</span>; i++){<br>      <span class="hljs-built_in">aa</span>(i);<br>      <span class="hljs-built_in">ss</span>(n<span class="hljs-number">-2</span>*i, cnt);<br>      <span class="hljs-built_in">bb</span>(i);<br>      cnt = -cnt;<br>      cout &lt;&lt; endl;<br>    }<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++){<br>    <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>){<br>      cout &lt;&lt; <span class="hljs-string">"."</span>;<br>    }<span class="hljs-keyword">else</span>{<br>      cout &lt;&lt; <span class="hljs-string">"+"</span>;<br>    }<br>  }<br>  cout &lt;&lt; endl;<br>  <span class="hljs-type">int</span> ttt = n/<span class="hljs-number">2</span><span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">if</span>(ttt %<span class="hljs-number">2</span> == <span class="hljs-number">0</span>){<br>    cnt = <span class="hljs-number">1</span>;<br>  }<span class="hljs-keyword">else</span>{<br>    cnt = <span class="hljs-number">-1</span>;<br>  }<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = ttt; i &gt;= <span class="hljs-number">0</span>; i--){<br>    <span class="hljs-built_in">aa</span>(i);<br>    <span class="hljs-built_in">ss</span>(n<span class="hljs-number">-2</span>*i, cnt);<br>    <span class="hljs-built_in">bb</span>(i);<br>    cnt = -cnt;<br>    cout &lt;&lt; endl;<br>  }<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="2day-走楼梯"><a href="#2day-走楼梯" class="headerlink" title="2day-走楼梯"></a>2day-走楼梯</h2><p>楼梯有 𝑛 阶，上楼可以一步上一阶，也可以一步上二阶。</p><p>但你不能连续三步都走两阶，计算走到第𝑛阶共有多少种不同的走法。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>一行，一个数字，表示𝑛。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出走楼梯的方式总数。</p><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">6<br></code></pre></td></tr></tbody></table></figure><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">12<br></code></pre></td></tr></tbody></table></figure><h4 id="数据规模"><a href="#数据规模" class="headerlink" title="数据规模"></a>数据规模</h4><p>对于100%的数据，保证n≤50。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>简单的dp</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>ll f[<span class="hljs-number">100</span>]; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br><span class="hljs-type">int</span> n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>,&amp;n);<br>f[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>f[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>{<br><span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">6</span>)<br>f[i]=f[i<span class="hljs-number">-1</span>]+f[i<span class="hljs-number">-2</span>];<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i==<span class="hljs-number">6</span>) f[i]=f[i<span class="hljs-number">-1</span>]+f[i<span class="hljs-number">-2</span>]<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">else</span><br>f[i]=f[i<span class="hljs-number">-1</span>]+f[i<span class="hljs-number">-2</span>]-f[i<span class="hljs-number">-7</span>];<br>}<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%lld"</span>,f[n]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="3day-走路"><a href="#3day-走路" class="headerlink" title="3day-走路"></a>3day-走路</h2><p>有一条很长的数轴，一开始你在0的位置。接下来你要走<em>𝑛</em>步，第<em>𝑖</em>步你可以往右走<em>𝑎𝑖</em>或者<em>𝑏𝑖</em>。</p><p>问<em>𝑛</em>步之后，0到<em>𝑚</em>的每个位置，能不能走到？</p><h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行，两个整数<em>𝑛</em>,<em>𝑚</em>。</p><p>接下来<em>𝑛</em></p><p>行，每行两个整数<em>𝑎𝑖</em>,<em>𝑏𝑖</em>。</p><h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h3><p>一行，一共<em>𝑚</em>+1</p><p>个数，每个数都是<code>0</code>或<code>1</code>表示能否走到，数字之间不用空格隔开。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">3</span><br></code></pre></td></tr></tbody></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight dns"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">00000011001</span><br></code></pre></td></tr></tbody></table></figure><h3 id="数据规模-1"><a href="#数据规模-1" class="headerlink" title="数据规模"></a>数据规模</h3><p>对于所有数据，保证1≤<em>𝑛</em>≤100,1≤<em>𝑚</em>≤1e5,1≤<em>𝑎𝑖</em>,<em>𝑏𝑖</em>≤1000。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>模拟一下</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">110</span>, M = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> f[N][M]; <span class="hljs-comment">// 一维表示步数，二维表示距离，存储的值为1则能到达，反之则不能</span><br><span class="hljs-type">int</span> a[N], b[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br>ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>cin &gt;&gt; n &gt;&gt; m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++){<br>cin &gt;&gt; a[i] &gt;&gt; b[i];<br>}<br>f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++){<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= m; j++){<br><span class="hljs-keyword">if</span>(f[i][j] &amp;&amp; j+a[i+<span class="hljs-number">1</span>]&lt;=m)f[i+<span class="hljs-number">1</span>][j+a[i+<span class="hljs-number">1</span>]]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(f[i][j] &amp;&amp; j+b[i+<span class="hljs-number">1</span>]&lt;=m)f[i+<span class="hljs-number">1</span>][j+b[i+<span class="hljs-number">1</span>]]=<span class="hljs-number">1</span>;<br>}<br>}<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i  &lt;= m; i++){<br>cout &lt;&lt; f[n][i];<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="4day-简单分数统计"><a href="#4day-简单分数统计" class="headerlink" title="4day-简单分数统计"></a>4day-简单分数统计</h2><p><em>𝑁</em> 个好朋友在codeforces上参加一场包含 <em>𝑀</em> 个题目的比赛, 比赛期间codeforces网站一共有 <em>𝑘</em></p><p> 次提交。</p><p>已知每个题目的分数，</p><p>但是由于他们只能查到在比赛期间codeforces总共的提交记录(其他用户提交的其他题目记录也包含在内, 即存在不属于该场比赛的题目)，</p><p>所以想请你编写一个程序算出他们每个人的分数。</p><h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行三个整数 <em>𝑁</em>, <em>𝑀</em>, <em>𝐾</em> 分别表示好朋友的个数, 题目的个数, 和提交的总次数(其中0&lt;<em>𝑁</em>,<em>𝑀</em>,<em>𝐾</em>&lt;=200）。接下来 <em>𝑁</em> 行 第 <em>𝑖</em> 行输入为第 <em>𝑖</em> 个人的id，接下来 <em>𝑀</em> 行 第 <em>𝑗</em> 行输入为第 <em>𝑗</em> 个题目的名称和分数，接下来 <em>𝐾</em> 行 第 <em>𝑘</em> 行输入为第 <em>𝑘</em> 次提交的提交者id, 题目名称和结果(“WA” 或 “AC”, 如果”AC”代表通过这个题目, 提交者获得对应分数)。</p><p>注: 题目名称和id均为仅包含英文字母和数字的字符串, 题目分数为小于等于 1<em>𝑒</em>6 的正整数. 每一行的多个输入之间用空格隔开。所有输入的字符串长度<em>𝑙<strong>𝑒</strong>𝑛<strong>𝑔</strong>𝑡ℎ</em> 满足 0&lt;<em>𝑙<strong>𝑒</strong>𝑛<strong>𝑔</strong>𝑡ℎ</em>≤500。</p><p>所有用户id和题目名称不存在重名, 用户AC了某个题之后之后不会再重复提交该题, 好朋友们只会提交属于比赛的题目。</p><h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出 <em>𝑁</em> 行, 第 <em>𝑖</em> 行输出第 <em>𝑖</em> 个人的名字和对应分数 (名字和分数用空格隔开)。</p><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span><br><span class="hljs-attribute">GabrielPessoa</span><br><span class="hljs-attribute">beza</span><br><span class="hljs-attribute">metebronca</span> <span class="hljs-number">100</span><br><span class="hljs-attribute">geometry</span> <span class="hljs-number">200</span><br><span class="hljs-attribute">beza</span> metebronca AC<br><span class="hljs-attribute">ffern</span> numbertheory AC<br><span class="hljs-attribute">GabrielPessoa</span> geometry WA<br><span class="hljs-attribute">beza</span> geometry AC<br></code></pre></td></tr></tbody></table></figure><h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GabrielPessoa</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">beza</span> <span class="hljs-number">300</span><br></code></pre></td></tr></tbody></table></figure><h4 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h4><p>beza 过了 metebronca和geometry 拿到 300 分。</p><p>GabrielPessos 没有过题, 所以是 0分。</p><p>还有一些其他选手提交的其他题目忽略不计。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ios&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n,m,k;<br>map&lt;string, <span class="hljs-type">int</span>&gt; cnt;<br>map&lt;string, <span class="hljs-type">int</span>&gt; playerscore;<br><span class="hljs-type">bool</span> f[<span class="hljs-number">101</span>][<span class="hljs-number">101</span>];<br>string name[<span class="hljs-number">101</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br>ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++){<br>cin &gt;&gt; name[i];<br>playerscore[name[i]] = <span class="hljs-number">0</span>;<br>}<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++){<br>string a; cin &gt;&gt; a;<br><span class="hljs-type">int</span> b; cin &gt;&gt; b;<br>cnt[a] = b; <br>}<br><span class="hljs-keyword">while</span>(k--){<br>string a, b, c;<br>cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br><span class="hljs-keyword">if</span>(c == <span class="hljs-string">"AC"</span>){<br>playerscore[a] += cnt[b];<br>}<br>}<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++){<br>cout &lt;&lt; name[i] &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; playerscore[name[i]] &lt;&lt; endl;<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="5day-Alice的德州扑克"><a href="#5day-Alice的德州扑克" class="headerlink" title="5day-Alice的德州扑克"></a>5day-Alice的德州扑克</h2><blockquote><p>德州扑克是目前世界上最流行的扑克游戏，全世界有众多相关的比赛，例如是  WSOP，WPT，EPT等，也让这款游戏的玩法变得层出不穷，丰富多变。  不要被简单的游戏规则而误导，复杂多变的比赛状况，让这款游戏在高水平的竞技中会变得非常复杂，这也让人们为德州扑克给出了这样一句评价  ”用一刻就能学会，但要用一生才能掌握” 。 </p></blockquote><p>现在我们并不在乎游戏规则是什么，因为 Alice 是一个德州扑克高手，他对于德州扑克的规则烂熟于心，不过他每次都记不得牌型的大小关系，他知道你是一个编程高手，所以他想让你帮他写一个程序：输入五张牌的大小和花色，输出这五张牌能组成的最大牌型.你能帮帮他吗?</p><p>为了降低你的编程难度，我们规定：</p><ol><li><strong>输入的牌都是来源于同一副扑克牌</strong></li><li><strong>输入的牌的点数都是非递减的</strong></li><li><strong>所有花色没有大小之分</strong></li></ol><p>下面给出各牌型，(从大到小)</p><ol><li>**皇家同花顺(ROYAL FLUSH)<strong>：五张顺连的牌(点数连续单调递增)，</strong>且最大的一张牌是A(Ace)**，并且五张牌的花色相同</li><li>**同花顺(STRAIGHT FLUSH)<strong>：五张顺连的牌(点数连续单调递增)，</strong>不规定最大的一张牌是A(Ace)**，并且五张牌的花色相同</li><li>**四条(FOUR OF A KIND)**：至少四张牌的点数相同</li><li>**葫芦(FULL HOUSE)**：至少三张牌的点数相同，并且除此之外还有两张牌的点数相同</li><li>**同花(FLUSH)**：五张牌的花色都相同</li><li>**顺子(STRAIGHT)**：五张顺连的牌(点数连续单调递增)，不要求五张牌的花色相同</li><li><strong>特别注意</strong>：由于 Alice 是个谨慎的人，所以比 <strong>三条(THREE OF A KIND)</strong> (包括三条) 小的牌型 Alice 不在乎他们的大小关系，你只需要告诉 Alice 弃牌就行</li></ol><h4 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入两行，每行五个数字，第一行的第 <em>𝑖</em></p><p> 个字符表示第 <em>𝑖</em></p><p> 张扑克的点数，</p><p>第二行的第 <em>𝑖</em></p><p> 个数字表示第 <em>𝑖</em></p><p> 张扑克花色。**(保证输入的牌的点数是非递减的，且所有输入均合法)**。</p><p>点数和对应输入的数字：</p><ul><li>2−10</li></ul><p> 对应 2 - 10</p><p><em>𝐽</em>(<em>𝐽<strong>𝑎</strong>𝑐**𝑘</em>)</p><p> 对应 11</p><p><em>𝑄</em>(<em>𝑄<strong>𝑢</strong>𝑒<strong>𝑒</strong>𝑛</em>)</p><p> 对应 12</p><p><em>𝐾</em>(<em>𝐾<strong>𝑖</strong>𝑛**𝑔</em>)</p><p> 对应 13</p><p><em>𝐴</em>(<em>𝐴<strong>𝑐</strong>𝑒</em>)</p><ul><li> 对应 14</li></ul><p>花色和对应输入的数字：</p><ul><li>黑桃 (Spades) 对应 1</li><li>方片 (Diamonds) 对应 2</li><li>红桃 (Hearts) 对应 3</li><li>梅花 (Clubs) 对应 4</li></ul><h4 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出这五张牌能组成的最大牌型。</p><ul><li>如果最大是皇家同花顺输出 “ROYAL FLUSH”</li><li>如果最大是同花顺输出 “STRAIGHT FLUSH”</li><li>如果最大是四条输出 “FOUR OF A KIND”</li><li>如果最大是葫芦输出 “FULL HOUSE”</li><li>如果最大是同花输出 “FLUSH”</li><li>如果最大是顺子输出 “STRAIGHT”</li><li>如果最大的牌型小于等于三条输出”FOLD”，劝 Alice 弃牌</li><li>输出不包括引号</li></ul><h4 id="样例输入1"><a href="#样例输入1" class="headerlink" title="样例输入1"></a>样例输入1</h4><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><h4 id="样例输出1"><a href="#样例输出1" class="headerlink" title="样例输出1"></a>样例输出1</h4><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ROYAL FLUSH</span><br></code></pre></td></tr></tbody></table></figure><h4 id="样例输入2"><a href="#样例输入2" class="headerlink" title="样例输入2"></a>样例输入2</h4><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br></code></pre></td></tr></tbody></table></figure><h4 id="样例输出2"><a href="#样例输出2" class="headerlink" title="样例输出2"></a>样例输出2</h4><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">STRAIGHT</span><br></code></pre></td></tr></tbody></table></figure><h4 id="样例输入3"><a href="#样例输入3" class="headerlink" title="样例输入3"></a>样例输入3</h4><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">6 </span><span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">7</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span><br></code></pre></td></tr></tbody></table></figure><h4 id="样例输出3"><a href="#样例输出3" class="headerlink" title="样例输出3"></a>样例输出3</h4><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">FULL HOUSE</span><br></code></pre></td></tr></tbody></table></figure><h4 id="样例输入4"><a href="#样例输入4" class="headerlink" title="样例输入4"></a>样例输入4</h4><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">3</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">9</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><h4 id="样例输出4"><a href="#样例输出4" class="headerlink" title="样例输出4"></a>样例输出4</h4><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">FOLD</span><br></code></pre></td></tr></tbody></table></figure><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><p>模拟一下</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ios&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> dianshu[<span class="hljs-number">15</span>];<br><span class="hljs-type">int</span> huase[<span class="hljs-number">5</span>];<br><span class="hljs-type">int</span> j = <span class="hljs-number">0</span>, s, d;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br>ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)cin &gt;&gt; dianshu[i];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)cin &gt;&gt; huase[i];<br><br><span class="hljs-built_in">sort</span>(huase,huase+<span class="hljs-number">5</span>);<br>s = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++){<br><span class="hljs-keyword">if</span>(huase[i] == huase[i+<span class="hljs-number">1</span>])s++;<br>}<br>d = <span class="hljs-number">0</span>;<br><span class="hljs-type">bool</span> tmp = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++){<br><span class="hljs-keyword">if</span>(dianshu[i] == dianshu[i+<span class="hljs-number">1</span>]){<br>d++;<br>}<br><span class="hljs-keyword">if</span>(d==<span class="hljs-number">3</span>&amp;&amp; ((dianshu[i] != dianshu[i<span class="hljs-number">-1</span>]) || (dianshu[i<span class="hljs-number">-1</span>]!=dianshu[i<span class="hljs-number">-2</span>])))<br>tmp = <span class="hljs-literal">true</span>;<br>}<br><br><br><br><span class="hljs-keyword">if</span>(dianshu[<span class="hljs-number">4</span>]-dianshu[<span class="hljs-number">3</span>] == <span class="hljs-number">1</span> &amp;&amp; dianshu[<span class="hljs-number">3</span>]-dianshu[<span class="hljs-number">2</span>] == <span class="hljs-number">1</span> &amp;&amp; dianshu[<span class="hljs-number">2</span>]-dianshu[<span class="hljs-number">1</span>] == <span class="hljs-number">1</span> &amp;&amp; dianshu[<span class="hljs-number">1</span>]-dianshu[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span>)<br>j = <span class="hljs-number">6</span>;<br><br><span class="hljs-keyword">if</span>(s == <span class="hljs-number">4</span>)j = <span class="hljs-number">5</span>;<br><br><span class="hljs-keyword">if</span>(d &gt;= <span class="hljs-number">3</span>){<br><span class="hljs-keyword">if</span>(tmp)j = <span class="hljs-number">4</span>;<br><span class="hljs-keyword">else</span> j = <span class="hljs-number">3</span>;<br>}<br><br><span class="hljs-keyword">if</span>(s == <span class="hljs-number">4</span> &amp;&amp; dianshu[<span class="hljs-number">4</span>]-dianshu[<span class="hljs-number">3</span>] == <span class="hljs-number">1</span> &amp;&amp; dianshu[<span class="hljs-number">3</span>]-dianshu[<span class="hljs-number">2</span>] == <span class="hljs-number">1</span> &amp;&amp; dianshu[<span class="hljs-number">2</span>]-dianshu[<span class="hljs-number">1</span>] == <span class="hljs-number">1</span> &amp;&amp; dianshu[<span class="hljs-number">1</span>]-dianshu[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span>){<br><span class="hljs-keyword">if</span>(dianshu[<span class="hljs-number">4</span>]==<span class="hljs-number">14</span>)<br>j = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br>j = <span class="hljs-number">2</span>;<br>}<br><br><span class="hljs-keyword">if</span>(j == <span class="hljs-number">0</span>)cout &lt;&lt; <span class="hljs-string">"FOLD"</span>;<br><span class="hljs-keyword">if</span>(j == <span class="hljs-number">1</span>)cout &lt;&lt; <span class="hljs-string">"ROYAL FLUSH"</span>;<br><span class="hljs-keyword">if</span>(j == <span class="hljs-number">2</span>)cout &lt;&lt; <span class="hljs-string">"STRAIGHT FLUSH"</span>;<br><span class="hljs-keyword">if</span>(j == <span class="hljs-number">3</span>)cout &lt;&lt; <span class="hljs-string">"FOUR OF A KIND"</span>;<br><span class="hljs-keyword">if</span>(j == <span class="hljs-number">4</span>)cout &lt;&lt; <span class="hljs-string">"FULL HOUSE"</span>;<br><span class="hljs-keyword">if</span>(j == <span class="hljs-number">5</span>)cout &lt;&lt; <span class="hljs-string">"FLUSH"</span>;<br><span class="hljs-keyword">if</span>(j == <span class="hljs-number">6</span>)cout &lt;&lt; <span class="hljs-string">"STRAIGHT"</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="6day-订单编号"><a href="#6day-订单编号" class="headerlink" title="6day-订单编号"></a>6day-订单编号</h2><p>   <a href="https://space.bilibili.com/5055">小缘</a>开了一家公司，生意很好，每天都会收到很多订单，自动交易系统会自动给这些订单生成没有重复的订单编号。但是有一天，系统出现了未知的错误，导致当天的订单编号可能有重复的，这可把小缘急坏了。你可以帮助小缘按照规则给这些订单重新编号吗？</p><p>   按照时间先后顺序给出 <em>𝑁</em> 个正整数作为原订单编号，你需要按照规则依次赋予这些订单新的编号，对于任意一个订单，要找到大于等于其原订单编号且未被使用过的（没有被之前的订单作为新的订单编号）的最小整数，作为它的新订单编号。</p><p>   例如：   原订单编号依次为1 2 3 1，则新订单编号应该为1 2 3 4   （前3个订单的原订单编号都没有使用过，所以用其原订单编号即可，对于第四个订单，原订单编号为1，而1, 2, 3都已经被使用过，所以新订单编号为4）。</p><h4 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h4><p>   第一行输入一个整数 <em>𝑁</em>(1≤<em>𝑁</em>≤5×1e5)。</p><p>   第二行输入 <em>𝑁</em> 个数 <em>𝑎𝑖</em>(1≤<em>𝑎</em>𝑖*≤1e9) 作为原订单编号。</p><h4 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h4><p>   输出一行，包含 <em>𝑁</em> 个整数为新的订单编号。</p><h4 id="样例输入1-1"><a href="#样例输入1-1" class="headerlink" title="样例输入1"></a>样例输入1</h4><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">6</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><h4 id="样例输出1-1"><a href="#样例输出1-1" class="headerlink" title="样例输出1"></a>样例输出1</h4><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span><br></code></pre></td></tr></tbody></table></figure><h4 id="样例输入2-1"><a href="#样例输入2-1" class="headerlink" title="样例输入2"></a>样例输入2</h4><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-symbol">1000000000 </span><span class="hljs-number">1000000000</span> <span class="hljs-number">1000000000</span><br></code></pre></td></tr></tbody></table></figure><h4 id="样例输出2-1"><a href="#样例输出2-1" class="headerlink" title="样例输出2"></a>样例输出2</h4><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1000000000 </span><span class="hljs-number">1000000001</span> <span class="hljs-number">1000000002</span><br></code></pre></td></tr></tbody></table></figure><h4 id="样例输入3-1"><a href="#样例输入3-1" class="headerlink" title="样例输入3"></a>样例输入3</h4><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">6</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><h4 id="样例输出3-1"><a href="#样例输出3-1" class="headerlink" title="样例输出3"></a>样例输出3</h4><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">6</span><br></code></pre></td></tr></tbody></table></figure><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n;<br>set&lt; pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; &gt; c;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span>{<br><span class="hljs-keyword">if</span> (l &gt; r)<br><span class="hljs-keyword">return</span>;<br>c.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(r, l));<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;n);<br>c.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">2e9</span>, <span class="hljs-number">1</span>));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++){<br><span class="hljs-type">int</span> x;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%d"</span>, &amp;x);<br>    <span class="hljs-keyword">auto</span> itr = c.<span class="hljs-built_in">lower_bound</span>(<span class="hljs-built_in">make_pair</span>(x, <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">if</span>(itr-&gt;second&lt;=x){<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>, x);<br><span class="hljs-built_in">insert</span>(itr-&gt;second, x<span class="hljs-number">-1</span>);<br><span class="hljs-built_in">insert</span>(x+<span class="hljs-number">1</span>, itr-&gt;first);<br>c.<span class="hljs-built_in">erase</span>(itr);<br>}<span class="hljs-keyword">else</span>{<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>, itr-&gt;second);<br><span class="hljs-built_in">insert</span>(itr-&gt;second+<span class="hljs-number">1</span>, itr-&gt;first);<br>c.<span class="hljs-built_in">erase</span>(itr);<br>}<br>}<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="day7-饿饿放饭"><a href="#day7-饿饿放饭" class="headerlink" title="day7-饿饿放饭"></a>day7-饿饿放饭</h2><p>有<em>𝑛</em>个同学正在排队打饭，第<em>𝑖</em>个同学排在从前往后第<em>𝑖</em>个位置。但是这天食堂内只有一个食堂阿姨，为了使同学们都能尽快的吃上饭，每一个同学在打完一份饭之后就会排在队伍的末尾先吃着打到的饭，我们知道第<em>𝑖</em>个同学的饭量为<em>𝑎𝑖</em>，也就是说第<em>𝑖</em>个同学要吃<em>𝑎𝑖</em>份饭才能吃饱，当一位同学吃饱后，他就会立刻离开食堂，不会排在队伍的末尾。食堂阿姨想知道，在打完k份饭之后，队伍的样子是怎样的，但是食堂阿姨数学不太好，想让你帮忙想想办法。</p><h4 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行给出两个整数<em>𝑛</em>，<em>𝑘</em>。</p><p>第二行给出<em>𝑛</em>个整数<em>𝑎</em>1,<em>𝑎</em>2,……<em>𝑎𝑛</em>。</p><h4 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h4><p>如果食堂阿姨打饭数少于k，请输出”-1”。</p><p>否则按照队伍顺序输出每一个同学的编号。</p><h4 id="样例输入1-2"><a href="#样例输入1-2" class="headerlink" title="样例输入1"></a>样例输入1</h4><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><h4 id="样例输出1-2"><a href="#样例输出1-2" class="headerlink" title="样例输出1"></a>样例输出1</h4><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></tbody></table></figure><h4 id="样例输入2-2"><a href="#样例输入2-2" class="headerlink" title="样例输入2"></a>样例输入2</h4><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><h4 id="样例输出2-2"><a href="#样例输出2-2" class="headerlink" title="样例输出2"></a>样例输出2</h4><figure class="highlight diff"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-1</span><br></code></pre></td></tr></tbody></table></figure><h4 id="样例输入3-2"><a href="#样例输入3-2" class="headerlink" title="样例输入3"></a>样例输入3</h4><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">7 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span><br></code></pre></td></tr></tbody></table></figure><h4 id="样例输出3-2"><a href="#样例输出3-2" class="headerlink" title="样例输出3"></a>样例输出3</h4><figure class="highlight basic"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">6 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br></code></pre></td></tr></tbody></table></figure><h4 id="数据规模-2"><a href="#数据规模-2" class="headerlink" title="数据规模"></a>数据规模</h4><p>数据保证1≤<em>𝑛</em>≤1e5, 0≤<em>𝑘</em>≤1e14, 1≤<em>𝑎𝑖</em>≤1e9。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ios&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 1000000001</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showpq</span><span class="hljs-params">(priority_queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; &gt; g)</span></span><br><span class="hljs-function"></span>{<br><span class="hljs-keyword">while</span> (!g.<span class="hljs-built_in">empty</span>()) {<br>cout &lt;&lt; g.<span class="hljs-built_in">top</span>().first &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; g.<span class="hljs-built_in">top</span>().second &lt;&lt; endl;<br>g.<span class="hljs-built_in">pop</span>();<br>}<br>cout &lt;&lt; endl;<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>{<br>ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>priority_queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; &gt; p1;<br><span class="hljs-type">int</span> n, k;<br>cin &gt;&gt; n &gt;&gt; k;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++){<br><span class="hljs-type">int</span> x; cin &gt;&gt; x;<br>p1.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(i, x));<br>}<br><span class="hljs-built_in">showpq</span>(p1);<br><span class="hljs-comment">// while(!p1.empty()){</span><br><span class="hljs-comment">// </span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br><br><br><span class="hljs-comment">// ll s;</span><br><span class="hljs-comment">// ll a[]={};</span><br><span class="hljs-comment">// int n, k;</span><br><br><br><span class="hljs-comment">// int main(){</span><br><span class="hljs-comment">// cin &gt;&gt; n &gt;&gt; k;</span><br><span class="hljs-comment">// for(int i = 1; i &lt;= n; i++){</span><br><span class="hljs-comment">// cin &gt;&gt; a[i];</span><br><span class="hljs-comment">// s+=a[i];</span><br><span class="hljs-comment">// }</span><br><span class="hljs-comment">// if(s &lt;= k){</span><br><span class="hljs-comment">// cout &lt;&lt; -1;</span><br><span class="hljs-comment">// }else{</span><br><span class="hljs-comment">// while()</span><br><span class="hljs-comment">// for(int i = 1; i &lt;= n; i++){</span><br><span class="hljs-comment">// a[i]-=1;</span><br><span class="hljs-comment">// }</span><br><span class="hljs-comment">// for(int i = 1; i &lt;= n; i++){</span><br><span class="hljs-comment">// s+=a[i];</span><br><span class="hljs-comment">// }</span><br><span class="hljs-comment">// }</span><br><span class="hljs-comment">// }</span><br></code></pre></td></tr></tbody></table></figure><h2 id="好多啊，最近没有什么时间整理，-先贴最新的吧"><a href="#好多啊，最近没有什么时间整理，-先贴最新的吧" class="headerlink" title="好多啊，最近没有什么时间整理， 先贴最新的吧"></a>好多啊，最近没有什么时间整理， 先贴最新的吧</h2><h2 id="day74-农田划分"><a href="#day74-农田划分" class="headerlink" title="day74-农田划分"></a>day74-农田划分</h2><p><a herf="http://oj.daimayuan.top/course/11/problem/917">题目链接</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>约翰是一个农场主，他的农场有n块田，编号从 1到 𝑛，这 𝑛块田通过 𝑚条双向道路相连(数据保证这n块田都是联通的)，我们假设第𝑖块田会产生 2𝑖kg 的收益，现在约翰想把农田的工作全部交给自己的两个孩子，划分方式必须满足以下规则:</p><p>1.每一块田都需要恰好被分给一个孩子.</p><p>2.分给两个孩子的农田必须是联通的.就是说对于任意一个孩子在划分给自己的任意一块田，都可以不经过另外一个孩子的田，到达自己的任意一块田.</p><p>3.划分给两个孩子的收益必须尽可能的相等，如果无法相等，年长的孩子会得到大的那一份.</p><p>对于第 𝑖块田，如果你要把它分给年长的孩子，请输出A,否则输出B.</p><p>题目输入<br>第一行输入两个整数分别代表 𝑛,𝑚 接下来 𝑚行，每个两个整数𝑢,𝑣，代表这两块农田通过一条双向道路直接相连，数据保证没有重边和自环</p><p>题目输出<br>输出一个字符串，代表答案</p><p>样例输入1<br>3 2<br>1 3<br>3 2<br>样例输出1<br>ABA<br>样例输入2<br>6 6<br>3 5<br>2 6<br>1 3<br>3 6<br>5 1<br>4 6<br>样例输出2<br>BABABA<br>数据范围<br>2≤𝑛≤3𝑒5,1≤𝑚≤3𝑒5</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h3><p>由于每块田都需要被分配到哥哥或者弟弟名下，而且点权为2^i。并且要求两者获得的收益：sumO &gt;= sumY,<br>可以发现，假如最后一块土地分给哥哥，那么无论弟弟分到多少土地，其点权和都不会超过哥哥，所以我们可以对于点n-1开始搜索，对于所有与n-1连通的点都把这个点的值设为’B’，其他的点设为’A’。</p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><ul><li>DFS</li><li>并查集</li><li>图</li></ul><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a>题解</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for(int i = (int)l; i &lt; (int)n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FAST std::cin.tie(nullptr)-&gt;std::ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> edl std::cout &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a) cout &lt;&lt; #a &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; (a) &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3c3c3c3c <span class="hljs-comment">// 1010580540, 7f7f7f7f:2139062143</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> llinf 9223372036854775807</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> cmuticases() int T;scanf(<span class="hljs-string">"%d"</span>,&amp;T);while(T--) solve();</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticases() int T;std::cin&gt;&gt;T;while(T--)solve();</span><br><span class="hljs-function">std::mt19937_64 <span class="hljs-title">mrand</span><span class="hljs-params">(std::random_device{}())</span></span>;<br><span class="hljs-comment">//using namespace std;</span><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> ull = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-comment">//#define int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">3e5</span>+<span class="hljs-number">10</span>;<br>std::vector&lt;<span class="hljs-type">int</span>&gt; g[N];<br><span class="hljs-type">char</span> a[N];<br><span class="hljs-type">bool</span> vis[N];<br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>{<br>vis[x] = <span class="hljs-literal">true</span>;<br>a[x] = <span class="hljs-string">'B'</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> to : g[x]) <br><span class="hljs-keyword">if</span>(!vis[to] &amp;&amp; to != n)<br><span class="hljs-built_in">dfs</span>(to);<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>FAST;<br>std::cin &gt;&gt; n &gt;&gt; m;<br><span class="hljs-keyword">while</span>(m--) {<br><span class="hljs-type">int</span> u, v;<br>std::cin &gt;&gt; u &gt;&gt; v;<br>g[u].<span class="hljs-built_in">pb</span>(v);<br>g[v].<span class="hljs-built_in">pb</span>(u);<br>}<br><span class="hljs-built_in">memset</span>(vis, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> vis);<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>) a[i] = <span class="hljs-string">'A'</span>;<br><span class="hljs-built_in">dfs</span>(n<span class="hljs-number">-1</span>);<br><span class="hljs-built_in">rep</span>(i,<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>) std::cout &lt;&lt; a[i];<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="day78-最喜欢数学了（高数除外）"><a href="#day78-最喜欢数学了（高数除外）" class="headerlink" title="day78-最喜欢数学了（高数除外）"></a>day78-最喜欢数学了（高数除外）</h2><h3 id="题面："><a href="#题面：" class="headerlink" title="题面："></a>题面：</h3><p>小明的数学很好，所以他认为世界上所有的数学问题都很简单。</p><p>但是有一天，他遇到了一个他无法解决的数学问题，所以他请求你帮助他。</p><p>小明会给你两个数字 𝑎 和 𝑏 ，然后你应该选择一个正奇数 𝑥 和一个正偶数 𝑦 ，你可以让 𝑎 加上 𝑥 或让 𝑎 减去 𝑦，在一次运算中。你应该在最少的操作中把 𝑎 变成 𝑏。请注意，在同一次运算中，你不允许改变 𝑥 和 𝑦 的值。</p><p>输入格式<br>在第一行，有一个整数 𝑇。</p><p>接下来 𝑇 行每行2个整数 𝑎、𝑏。表示由小明给出的数字。</p><p>输出格式<br>一个数，表示将 𝑎 变为 𝑏 所需的最小操作数。。</p><p>样例输入<br>1<br>10 7<br>样例输出<br>2<br>数据规模<br>所有数据保证 1≤𝑇≤105,1≤𝑎,𝑏≤106。</p><h3 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a>题解</h3><p>对于任意的a, b。我们可以分为三种情况来讨论：</p><ol><li>a &lt; b. 对于任意的a &lt; b，当b-a的值为奇数，那么很显然1次操作就能使a变成b；当b-a为偶数，那么又可以分为((b-a)/2)为偶数和((b-a)/2)为奇数，当情况为前者的时候，这时我们可以先加上一个奇数再减去一个偶数再加上一个奇数，例如：2 34，我们可以让2+35-38+3 = 34. 而且没有其他操作能同样满足条件并且操作数比3小，所以此时答案为3；当情况为后者的时候，显然我们可以加上两个奇数就可以做到，例如：10 48， 我们让10+19+19，此时答案为2；</li><li>a &gt; b. 这种情况比较简单，若a与b奇偶性相同，则答案为1，否则为2.</li><li>a = b. 0次操作。<figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rep(i,l,n) for(int i = (int)l; i &lt; (int)n; i++)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII std::pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FAST std::cin.tie(nullptr)-&gt;std::ios_base::sync_with_stdio(false)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> all(x) (x).begin(), (x).end()</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> edl std::cout &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(a) std::cout &lt;&lt; #a &lt;&lt; <span class="hljs-string">" = "</span> &lt;&lt; (a) &lt;&lt; <span class="hljs-string">'\n'</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x3c3c3c3c <span class="hljs-comment">// 1010580540, 7f7f7f7f:2139062143</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> llinf 9223372036854775807</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> cmuticases() int T;scanf(<span class="hljs-string">"%d"</span>,&amp;T);while(T--)solve();</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> muticases() int T;std::cin&gt;&gt;T;while(T--)solve();</span><br><span class="hljs-function">std::mt19937_64 <span class="hljs-title">mrand</span><span class="hljs-params">(std::random_device{}())</span></span>;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">using</span> ull = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> ll mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rnd</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>{ <span class="hljs-keyword">return</span> <span class="hljs-built_in">mrand</span>() % x;}<br><span class="hljs-function">ll <span class="hljs-title">powmod</span><span class="hljs-params">(ll a,ll b)</span> </span>{ll res=<span class="hljs-number">1</span>;a%=mod; <span class="hljs-built_in">assert</span>(b&gt;=<span class="hljs-number">0</span>); <span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>){<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)res=res*a%mod;a=a*a%mod;}<span class="hljs-keyword">return</span> res;}<br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a,ll b)</span> </span>{ <span class="hljs-keyword">return</span> b?<span class="hljs-built_in">gcd</span>(b,a%b):a;}<br><span class="hljs-comment">//using namespace std;</span><br><span class="hljs-comment">//#define int long long</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-type">int</span> a, b;<br>std::cin &gt;&gt; a &gt;&gt; b;<br><span class="hljs-keyword">if</span>(a &lt; b) {<br><span class="hljs-keyword">if</span>((b - a) % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br>std::cout &lt;&lt; <span class="hljs-string">"1\n"</span>;<br><span class="hljs-keyword">else</span> {<br><span class="hljs-type">int</span> res = ((b-a)/<span class="hljs-number">2</span>)%<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(res == <span class="hljs-number">1</span>) std::cout &lt;&lt; <span class="hljs-string">"2\n"</span>;<br><span class="hljs-keyword">else</span> std::cout &lt;&lt; <span class="hljs-string">"3\n"</span>;<br>}<br>} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a &gt; b) {<br><span class="hljs-keyword">if</span>(a%<span class="hljs-number">2</span> == b%<span class="hljs-number">2</span>) std::cout &lt;&lt; <span class="hljs-string">"1\n"</span>;<br><span class="hljs-keyword">else</span> std::cout &lt;&lt; <span class="hljs-string">"2\n"</span>;<br>} <span class="hljs-keyword">else</span> std::cout &lt;&lt; <span class="hljs-string">"0\n"</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>    FAST;<br>    <span class="hljs-built_in">muticases</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS添加c++万能头-Vol0.2</title>
      <link href="/project/2022/04/13/macOS%E6%B7%BB%E5%8A%A0c-%E4%B8%87%E8%83%BD%E5%A4%B4-Vol0-2/"/>
      <url>/project/2022/04/13/macOS%E6%B7%BB%E5%8A%A0c-%E4%B8%87%E8%83%BD%E5%A4%B4-Vol0-2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="为什么会有vol0-2"><a href="#为什么会有vol0-2" class="headerlink" title="为什么会有vol0.2 ?"></a>为什么会有vol0.2 ?</h3><p>最近几次Xcode更新我的万能头都会消失，上一篇的方法失效。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ol><li>打开访达，选中Xcode.app，command+I 打开简介，</li><li>将读和写的权限打开，然后右键Xcode.app, 显示包内容。</li><li>进入目标目录<figure class="highlight gradle"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/Applications/</span>Xcode.app<span class="hljs-regexp">/Contents/</span>Developer<span class="hljs-regexp">/Platforms/M</span>acOSX.platform<span class="hljs-regexp">/Developer/</span>SDKs<span class="hljs-regexp">/MacOSX.sdk/u</span>sr/<span class="hljs-keyword">include</span><br></code></pre></td></tr></tbody></table></figure></li></ol><ol start="4"><li>然后新建一个bits文件夹，在文件夹内新建stdc++.h文件<br></li><li>最后将以下内容复制到stdc++.h文件内即可。</li></ol><figure class="highlight sqf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-comment">// C++ includes used for precompiling -*- C++ -*-</span><br> <br><span class="hljs-comment">// Copyright (C) 2003-2014 Free Software Foundation, Inc.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// This file is part of the GNU ISO C++ Library.  This library is free</span><br><span class="hljs-comment">// software; you can redistribute it and/or modify it under the</span><br><span class="hljs-comment">// terms of the GNU General Public License as published by the</span><br><span class="hljs-comment">// Free Software Foundation; either version 3, or (at your option)</span><br><span class="hljs-comment">// any later version.</span><br> <br><span class="hljs-comment">// This library is distributed in the hope that it will be useful,</span><br><span class="hljs-comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="hljs-comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span><br><span class="hljs-comment">// GNU General Public License for more details.</span><br> <br><span class="hljs-comment">// Under Section 7 of GPL version 3, you are granted additional</span><br><span class="hljs-comment">// permissions described in the GCC Runtime Library Exception, version</span><br><span class="hljs-comment">// 3.1, as published by the Free Software Foundation.</span><br> <br><span class="hljs-comment">// You should have received a copy of the GNU General Public License and</span><br><span class="hljs-comment">// a copy of the GCC Runtime Library Exception along with this program;</span><br><span class="hljs-comment">// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see</span><br><span class="hljs-comment">// &lt;http://www.gnu.org/licenses/&gt;.</span><br> <br><span class="hljs-comment">/** @file stdc++.h</span><br><span class="hljs-comment"> *  This is an implementation file for a precompiled header.</span><br><span class="hljs-comment"> */</span><br> <br><span class="hljs-comment">// 17.4.1.2 Headers</span><br> <br><span class="hljs-comment">// C</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _GLIBCXX_NO_ASSERT</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cassert&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cerrno&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cfloat&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ciso646&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;climits&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;clocale&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;csetjmp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;csignal&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdarg&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstddef&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctime&gt;</span></span><br> <br><span class="hljs-meta">#if __cplusplus &gt;= 201103L</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ccomplex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cfenv&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cinttypes&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdbool&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdint&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctgmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cwchar&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cwctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br> <br><span class="hljs-comment">// C++</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;deque&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;exception&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ios&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iosfwd&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;istream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iterator&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;locale&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;new&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;numeric&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;streambuf&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;typeinfo&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;valarray&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br> <br><span class="hljs-meta">#if __cplusplus &gt;= 201103L</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;array&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;atomic&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;chrono&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;condition_variable&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;forward_list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;future&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;initializer_list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mutex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;random&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ratio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;regex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;scoped_allocator&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;system_error&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;tuple&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;typeindex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;type_traits&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> macOs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现实与理想，哪个更重要呢？</title>
      <link href="/project/2022/03/16/%E7%8E%B0%E5%AE%9E%E4%B8%8E%E7%90%86%E6%83%B3%EF%BC%8C%E5%93%AA%E4%B8%AA%E6%9B%B4%E9%87%8D%E8%A6%81%E5%91%A2%EF%BC%9F/"/>
      <url>/project/2022/03/16/%E7%8E%B0%E5%AE%9E%E4%B8%8E%E7%90%86%E6%83%B3%EF%BC%8C%E5%93%AA%E4%B8%AA%E6%9B%B4%E9%87%8D%E8%A6%81%E5%91%A2%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>今天刷题快把自己菜哭了，想着转换心情买了杯到店自取，结果学校不给出。<br><br>最后免费送人了（感觉没人会拿吧<br><br>有时候真的能被自己蠢死。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>macOS添加c++万能头</title>
      <link href="/project/2022/02/15/macOS%E6%B7%BB%E5%8A%A0c-%E4%B8%87%E8%83%BD%E5%A4%B4/"/>
      <url>/project/2022/02/15/macOS%E6%B7%BB%E5%8A%A0c-%E4%B8%87%E8%83%BD%E5%A4%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="方法有很多我只列举一种"><a href="#方法有很多我只列举一种" class="headerlink" title="方法有很多我只列举一种."></a>方法有很多我只列举一种.</h2><span id="more"></span><blockquote><p>在xcode包里添加效果一样</p></blockquote><ol><li>聚焦搜索/Library/Developer/CommandLineTools/SDKS</li><li>找到自己当前的系统版本, 例如我目前的系统版本是Monterey 12.1, 文件夹的名字就是MacOSX12.1.sdk</li><li>进入usr文件夹</li><li>右键include文件夹, 设置全部为读和写</li><li>新建一个名为bits的文件夹</li><li>新建名为stdc++.h的文件</li></ol><p>macOS默认finder(访达)不能右键添加文件就很蛋疼, 我列举一种解决方法:</p><ul><li><p>复制当前目录, cmd+空格 输入terminal, 打开终端, 以我的系统版本12.1输入</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">cd /Library/Developer/CommandLineTools/SDKS/MacOSX12.1.sdk/usr/include/bits/<br></code></pre></td></tr></tbody></table></figure></li><li><p>进入到目录之后然后,你可以</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">touch stdc++.h<br></code></pre></td></tr></tbody></table></figure></li><li><p>或者你比较熟悉终端操作,你可以用你喜欢的编辑器编辑<br>例如:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">vim stdc++.h<br></code></pre></td></tr></tbody></table></figure></li></ul><h3 id="最后一步"><a href="#最后一步" class="headerlink" title="最后一步"></a>最后一步</h3><p>复制以下内容:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs .h">// C++ includes used for precompiling -*- C++ -*-<br> <br>// Copyright (C) 2003-2014 Free Software Foundation, Inc.<br>//<br>// This file is part of the GNU ISO C++ Library.  This library is free<br>// software; you can redistribute it and/or modify it under the<br>// terms of the GNU General Public License as published by the<br>// Free Software Foundation; either version 3, or (at your option)<br>// any later version.<br> <br>// This library is distributed in the hope that it will be useful,<br>// but WITHOUT ANY WARRANTY; without even the implied warranty of<br>// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the<br>// GNU General Public License for more details.<br> <br>// Under Section 7 of GPL version 3, you are granted additional<br>// permissions described in the GCC Runtime Library Exception, version<br>// 3.1, as published by the Free Software Foundation.<br> <br>// You should have received a copy of the GNU General Public License and<br>// a copy of the GCC Runtime Library Exception along with this program;<br>// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see<br>// &lt;http://www.gnu.org/licenses/&gt;.<br> <br>/** @file stdc++.h<br> *  This is an implementation file for a precompiled header.<br> */<br> <br>// 17.4.1.2 Headers<br> <br>// C<br>#ifndef _GLIBCXX_NO_ASSERT<br>#include &lt;cassert&gt;<br>#endif<br>#include &lt;cctype&gt;<br>#include &lt;cerrno&gt;<br>#include &lt;cfloat&gt;<br>#include &lt;ciso646&gt;<br>#include &lt;climits&gt;<br>#include &lt;clocale&gt;<br>#include &lt;cmath&gt;<br>#include &lt;csetjmp&gt;<br>#include &lt;csignal&gt;<br>#include &lt;cstdarg&gt;<br>#include &lt;cstddef&gt;<br>#include &lt;cstdio&gt;<br>#include &lt;cstdlib&gt;<br>#include &lt;cstring&gt;<br>#include &lt;ctime&gt;<br> <br>#if __cplusplus &gt;= 201103L<br>#include &lt;ccomplex&gt;<br>#include &lt;cfenv&gt;<br>#include &lt;cinttypes&gt;<br>#include &lt;cstdbool&gt;<br>#include &lt;cstdint&gt;<br>#include &lt;ctgmath&gt;<br>#include &lt;cwchar&gt;<br>#include &lt;cwctype&gt;<br>#endif<br> <br>// C++<br>#include &lt;algorithm&gt;<br>#include &lt;bitset&gt;<br>#include &lt;complex&gt;<br>#include &lt;deque&gt;<br>#include &lt;exception&gt;<br>#include &lt;fstream&gt;<br>#include &lt;functional&gt;<br>#include &lt;iomanip&gt;<br>#include &lt;ios&gt;<br>#include &lt;iosfwd&gt;<br>#include &lt;iostream&gt;<br>#include &lt;istream&gt;<br>#include &lt;iterator&gt;<br>#include &lt;limits&gt;<br>#include &lt;list&gt;<br>#include &lt;locale&gt;<br>#include &lt;map&gt;<br>#include &lt;memory&gt;<br>#include &lt;new&gt;<br>#include &lt;numeric&gt;<br>#include &lt;ostream&gt;<br>#include &lt;queue&gt;<br>#include &lt;set&gt;<br>#include &lt;sstream&gt;<br>#include &lt;stack&gt;<br>#include &lt;stdexcept&gt;<br>#include &lt;streambuf&gt;<br>#include &lt;string&gt;<br>#include &lt;typeinfo&gt;<br>#include &lt;utility&gt;<br>#include &lt;valarray&gt;<br>#include &lt;vector&gt;<br> <br>#if __cplusplus &gt;= 201103L<br>#include &lt;array&gt;<br>#include &lt;atomic&gt;<br>#include &lt;chrono&gt;<br>#include &lt;condition_variable&gt;<br>#include &lt;forward_list&gt;<br>#include &lt;future&gt;<br>#include &lt;initializer_list&gt;<br>#include &lt;mutex&gt;<br>#include &lt;random&gt;<br>#include &lt;ratio&gt;<br>#include &lt;regex&gt;<br>#include &lt;scoped_allocator&gt;<br>#include &lt;system_error&gt;<br>#include &lt;thread&gt;<br>#include &lt;tuple&gt;<br>#include &lt;typeindex&gt;<br>#include &lt;type_traits&gt;<br>#include &lt;unordered_map&gt;<br>#include &lt;unordered_set&gt;<br>#endif<br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> macOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeForces-Educational-Round-122-A&amp;B&amp;C</title>
      <link href="/project/2022/02/03/CodeForces-Educational-Round-122-A-B-C/"/>
      <url>/project/2022/02/03/CodeForces-Educational-Round-122-A-B-C/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Div-7"><a href="#A-Div-7" class="headerlink" title="A. Div. 7"></a>A. Div. 7</h1><span id="more"></span><h2 id="Detils"><a href="#Detils" class="headerlink" title="Detils"></a>Detils</h2><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> OI</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">"input.txt"</span>, <span class="hljs-string">"r"</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">"output.txt"</span>, <span class="hljs-string">"w"</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>  cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br>  <br>  <span class="hljs-type">int</span> t;<br>  cin &gt;&gt; t;<br>  <span class="hljs-keyword">while</span> (t--) {<br>    <span class="hljs-type">int</span> a;<br>    cin &gt;&gt; a;<br>    <span class="hljs-type">int</span> tmp = a / <span class="hljs-number">7</span> * <span class="hljs-number">7</span>;<br>    <span class="hljs-type">int</span> c = a / <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> d = tmp / <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> v = a % <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">if</span> (a % <span class="hljs-number">7</span> == <span class="hljs-number">0</span>) {<br>      cout &lt;&lt; a &lt;&lt; endl;<br>    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c == d) {<br>      cout &lt;&lt; tmp &lt;&lt; endl;<br>    } <span class="hljs-keyword">else</span> {<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) {<br>        <span class="hljs-type">int</span> ss = c * <span class="hljs-number">10</span> + i;<br>        <span class="hljs-keyword">if</span> (ss % <span class="hljs-number">7</span> == <span class="hljs-number">0</span>) {<br>          cout &lt;&lt; ss &lt;&lt; endl;<br>          <span class="hljs-keyword">break</span>;<br>        }<br>      }<br>    }<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="B-Minority"><a href="#B-Minority" class="headerlink" title="B. Minority"></a>B. Minority</h1><h2 id="Detils-1"><a href="#Detils-1" class="headerlink" title="Detils"></a>Detils</h2><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>{<br>  string s;<br>  cin &gt;&gt; s;<br>  <span class="hljs-type">int</span> zero = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">count</span>(s.<span class="hljs-built_in">begin</span>(),s.<span class="hljs-built_in">end</span>(),<span class="hljs-string">'0'</span>));<br>  <span class="hljs-type">int</span> one = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">count</span>(s.<span class="hljs-built_in">begin</span>(),s.<span class="hljs-built_in">end</span>(),<span class="hljs-string">'1'</span>));<br>  <span class="hljs-type">int</span> ans = <span class="hljs-built_in">min</span>(zero,one);<br>  ans -= zero ==one;<br>  cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">'\n'</span>;<br>}<br><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>  <span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> OI</span><br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">"input.txt"</span>, <span class="hljs-string">"r"</span>, stdin);<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">"output.txt"</span>, <span class="hljs-string">"w"</span>, stdout);<br>  <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>  <span class="hljs-type">int</span> t;<br>  cin &gt;&gt; t;<br>  <span class="hljs-keyword">while</span> (t--) {<br>    <span class="hljs-built_in">solve</span>();<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h1 id="C-Kill-the-Monster"><a href="#C-Kill-the-Monster" class="headerlink" title="C. Kill the Monster"></a>C. Kill the Monster</h1><h2 id="Detils-2"><a href="#Detils-2" class="headerlink" title="Detils"></a>Detils</h2><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdint&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int64_t</span> <span class="hljs-title">ceil_div</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> a, <span class="hljs-type">int64_t</span> b)</span></span>{<br>  <span class="hljs-keyword">return</span> a / b +((a ^ b) &gt; <span class="hljs-number">0</span> &amp;&amp; a % b != <span class="hljs-number">0</span>);<br>}<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">win</span><span class="hljs-params">(<span class="hljs-type">int64_t</span> HC, <span class="hljs-type">int64_t</span> DC, <span class="hljs-type">int64_t</span> HM, <span class="hljs-type">int64_t</span> DM)</span></span>{<br>  <span class="hljs-type">int64_t</span> our_attacks = <span class="hljs-built_in">ceil_div</span>(HM, DC);<br>  <span class="hljs-type">int64_t</span> their_attacks = <span class="hljs-built_in">ceil_div</span>(HC, DM);<br>  <span class="hljs-keyword">return</span>  our_attacks &lt;= their_attacks;<br>}<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>{<br>  <span class="hljs-type">int64_t</span> HC, DC, HM, DM, K, W, A;<br>  cin &gt;&gt; HC &gt;&gt; DC &gt;&gt; HM &gt;&gt; DM &gt;&gt; K &gt;&gt; W &gt;&gt; A;<br>  <span class="hljs-type">bool</span> ans = <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int64_t</span> w = <span class="hljs-number">0</span>; w &lt;= K; w++) {<br>    <span class="hljs-type">int64_t</span> a = K - w;<br>    ans = ans || <span class="hljs-built_in">win</span>(HC + a * A, DC + w * W, HM, DM);<br>  }<br>  cout &lt;&lt; (ans ? <span class="hljs-string">"YES"</span> : <span class="hljs-string">"NO"</span>) &lt;&lt; <span class="hljs-string">'\n'</span>;<br>}<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{<br>  ios_base::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>  cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> OI</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">"input.txt"</span>, <span class="hljs-string">"r"</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">"output.txt"</span>, <span class="hljs-string">"w"</span>, stdout);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-type">int</span> n;<br>  cin &gt;&gt; n;<br>  <span class="hljs-keyword">while</span> (n--) {<br>    <span class="hljs-built_in">solve</span>();<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code </tag>
            
            <tag> CF </tag>
            
            <tag> Solution </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS 配置VSCode code runner c++</title>
      <link href="/project/2022/01/30/macOS-%E9%85%8D%E7%BD%AEVSCode-code-runner-c/"/>
      <url>/project/2022/01/30/macOS-%E9%85%8D%E7%BD%AEVSCode-code-runner-c/</url>
      
        <content type="html"><![CDATA[<h1 id="配置前准备"><a href="#配置前准备" class="headerlink" title="配置前准备"></a>配置前准备</h1><ul><li> VSCode</li></ul><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><span id="more"></span><h2 id="下载code-runner插件"><a href="#下载code-runner插件" class="headerlink" title="下载code runner插件"></a>下载code runner插件</h2><h2 id="在settings-json添加"><a href="#在settings-json添加" class="headerlink" title="在settings.json添加"></a>在settings.json添加</h2><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">"cpp"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"cd $dir &amp;&amp; g++ -std=c++17 $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt"</span><br></code></pre></td></tr></tbody></table></figure><h2 id="创建如下几个文件"><a href="#创建如下几个文件" class="headerlink" title="创建如下几个文件"></a>创建如下几个文件</h2><pre><code class="hljs">- input.txt- output.txt- main.cpp</code></pre><h2 id="在main-cpp里添加下列"><a href="#在main-cpp里添加下列" class="headerlink" title="在main.cpp里添加下列"></a>在main.cpp里添加下列</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> OI</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">"input.txt"</span>, <span class="hljs-string">"r"</span>, stdin) ;<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">"output.txt"</span>, <span class="hljs-string">"w"</span>, stdout) ;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></tbody></table></figure><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1>    ]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VS Code </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ncm/qmc转mp3</title>
      <link href="/project/2022/01/21/ncm-qmc%E8%BD%ACmp3/"/>
      <url>/project/2022/01/21/ncm-qmc%E8%BD%ACmp3/</url>
      
        <content type="html"><![CDATA[<h1 id="你需要准备"><a href="#你需要准备" class="headerlink" title="你需要准备"></a>你需要准备</h1><ul><li>浏览器</li><li>准备转换格式的ncm/qmc文件</li></ul><h1 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h1><span id="more"></span><blockquote><p><a href="https://ncm.worthsee.com/">https://ncm.worthsee.com/</a></p></blockquote><p>没错, 我只是安利一个网站, 希望觉得不错的朋友, 有能力的可以支持下这个网站.</p>]]></content>
      
      
      <categories>
          
          <category> Music </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Music </tag>
            
            <tag> NeteaseMusic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云服务器重装系统后ssh无法登陆的问题及解决方案</title>
      <link href="/project/2022/01/19/Debug/"/>
      <url>/project/2022/01/19/Debug/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="提示警告信息如下："><a href="#提示警告信息如下：" class="headerlink" title="提示警告信息如下："></a>提示警告信息如下：</h2><p>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<br>@ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @<br>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<br>IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!<br>Someone could be eavesdropping on you right now (man-in-the-middle attack)!<br>It is also possible that the RSA host key has just been changed.<br>The fingerprint for the RSA key sent by the remote host is<br>08:98:a9:cc:f8:37:20:6b:b4:b1:6c:3a:15:b9:a9:92.<br>Please contact your system administrator.<br>Add correct host key in /home/arnold/.ssh/known_hosts to get rid of this message.<br>Offending key in /home/arnold/.ssh/known_hosts:2<br>RSA host key for 10.18.46.111 has changed and you have requested strict checking.<br>Host key verification failed.</p><h2 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h2><p>It is also possible that a host key has just been changed.</p><p>我之前对ssh服务器重装了系统，导致所有与原系统建立过ssh连接的系统都无法再建立连接，因为在于原系统建立首次连接时，双方相互记录了对方的公钥（ssh基于非对称密钥技术），在ssh服务主机重装系统后，公钥改变了，任以旧版本公钥的主机自然是无法与新系统连接的。</p><p>网上还有分析为ssh主机被人黑了，并在消除入侵记录时对known_hosts文件做了改动。当然也不排除这种可能，但我估计我是没那个福气了：）</p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>删除~/.ssh/known_hosts文件，或者如果你可以判断出known_hosts中原ssh服务器的公钥，删去那部分，</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">rm ~/.ssh/known_hosts<br></code></pre></td></tr></tbody></table></figure><p>然后后再次建立新的连接，即可获得新的公钥。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>clashx如何实现终端代理</title>
      <link href="/project/2022/01/18/clashx%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BB%88%E7%AB%AF%E4%BB%A3%E7%90%86/"/>
      <url>/project/2022/01/18/clashx%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BB%88%E7%AB%AF%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="一-在clashx中复制终端代理命令"><a href="#一-在clashx中复制终端代理命令" class="headerlink" title="一.在clashx中复制终端代理命令"></a>一.在clashx中复制终端代理命令</h1><blockquote><p>macOS中为cmd+c</p></blockquote><span id="more"></span>    <h1 id="二-设置clashx为全局模式"><a href="#二-设置clashx为全局模式" class="headerlink" title="二.设置clashx为全局模式"></a>二.设置clashx为全局模式</h1><h1 id="三-打开终端复制命令"><a href="#三-打开终端复制命令" class="headerlink" title="三.打开终端复制命令"></a>三.打开终端复制命令</h1><h2 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h2><p>这样就能在当前终端的窗口实现代理, 但是存在一个问题: 关闭当前终端窗口代理就消失了.</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>编辑.zshrc. (这是我的路径, 每个系统可能有所不同)</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">vim ~/.zshrc<br></code></pre></td></tr></tbody></table></figure><p>如果你是bash, 那么:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.bashrc<br></code></pre></td></tr></tbody></table></figure><p>在.zshrc或者.bashrc中添加在clashx复制的终端代理命令</p><h2 id="检验是否成功代理"><a href="#检验是否成功代理" class="headerlink" title="检验是否成功代理"></a>检验是否成功代理</h2><p>在终端输入以下:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">curl cip.cc<br></code></pre></td></tr></tbody></table></figure><p>如果显示的ip已经变成代理, 那么大功告成!</p><blockquote><p>OK, 享受秒连的快感吧~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> proxy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> proxy </tag>
            
            <tag> clashx </tag>
            
            <tag> terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在华为手机安装苹方字体</title>
      <link href="/project/2022/01/18/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%8D%8E%E4%B8%BA%E6%89%8B%E6%9C%BA%E5%AE%89%E8%A3%85%E8%8B%B9%E6%96%B9%E5%AD%97%E4%BD%93/"/>
      <url>/project/2022/01/18/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%8D%8E%E4%B8%BA%E6%89%8B%E6%9C%BA%E5%AE%89%E8%A3%85%E8%8B%B9%E6%96%B9%E5%AD%97%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h1 id="只需三步"><a href="#只需三步" class="headerlink" title="只需三步"></a>只需三步</h1><span id="more"></span>    <ul><li><p>Step 1: Download the hwt document. CV and download it. URL:<a href="https://pan.baidu.com/1ChDuPnvAQWmMrldhsXazog">https://pan.baidu.com/1ChDuPnvAQWmMrldhsXazog</a>. And the extraction code is : yikk</p></li><li><p>Step 2: Move this document to System catalog in Huawei/theme.</p></li><li><p>Step 3:Open the default theme application. And you can install that theme including the fonts you need.</p></li></ul><blockquote><p>I just want the fonts, so I just install the fonts. If you like the theme, keep it fine.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Font </category>
          
      </categories>
      
      
        <tags>
            
            <tag> font </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于bumblebee的安装Archlinux双显卡驱动</title>
      <link href="/project/2022/01/18/%E5%9F%BA%E4%BA%8Ebumblebee%E7%9A%84%E5%AE%89%E8%A3%85Archlinux%E5%8F%8C%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/"/>
      <url>/project/2022/01/18/%E5%9F%BA%E4%BA%8Ebumblebee%E7%9A%84%E5%AE%89%E8%A3%85Archlinux%E5%8F%8C%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>众所周知，自从高性能独立图形处理器出现之后，很多便携式计算机就会采取一种双显卡的设计：节能的核心图形处理器用于渲染常规的桌面环境，而高性能的独立图形处理器则负责渲染高需求的应用程序。这种技术被称作Optimus智能显卡切换。但是英伟达经常被Linux用户诟病的原因之一，便是一直不对Linux平台上心，不仅没有Linux下的Optimus支持，驱动程序更新也慢半拍。<br>这意味着，Linux用户必须在一次会话中一直使用核心显卡或者一直使用独立显卡;一直使用核心显卡会很节能，但是Hold不住某些应用程序(比如现在很多巨型的3D游戏已经通过Steam登陆了Linux平台)，而一直使用独立显卡将会非常耗电，即使你在做很简单的工作。<br>所幸的是，Linux平台上有一个有名的第三方项目，名叫Bumblebee(大黄蜂)。这个项目目的就是给Linux提供类似Optimus技术的支持。这个项目以前并不出名，但是它某个版本的安装脚本install.sh多敲了一个空格，从而错误地删掉了所有用户的整个/usr，这个事件使它迅速出名并获得了大量的技术支持。这么想也是因祸得福吧。</p><h1 id="一、配置bumblebee"><a href="#一、配置bumblebee" class="headerlink" title="一、配置bumblebee"></a>一、配置bumblebee</h1><p>笔者所有指令对应于Arch Linux 64位版。<br>闲话收住，现在开始正式配置我们的双显卡。首先，安装英伟达官方的显卡驱动程序：<br>sudo pacman -S nvidia</p><p>选择和你目前的操作系统相匹配的驱动程序，比如笔者的是Linux 4.9内核，我就应该选带有linux49字样的包。等待安装完成，期间你应该会看到类似的输出：</p><p>然后安装：bumblebee软件包：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs zsh">sudo pacman -S bumblebee<br></code></pre></td></tr></tbody></table></figure><p>安装完成之后，记得检查当前用户是否在用户组“bumblebee”内。如果不是，请手动添加。重启计算机，以使英伟达驱动被正确加载，并使bumblebee守护进程启动。</p><h1 id="二、测试bumblebee"><a href="#二、测试bumblebee" class="headerlink" title="二、测试bumblebee"></a>二、测试bumblebee</h1><p>Bumblebee提供了指令optirun，以使用户在会话仍然以集成显卡渲染的情况下，使用独立显卡渲染指定的应用。<br>如果你能正常使用optirun指令，那么你的配置就完成了。</p><h1 id="三、注意"><a href="#三、注意" class="headerlink" title="三、注意"></a>三、注意</h1><p>如果你遇到了使用optirun指令会让整个会话崩溃的情况，那么有两个地方你需要检查：</p><ol><li><p> 你是否安装了正确的nvidia包;</p></li><li><p> 尝试使用最新的bumblebee仓库里的代码自行编译，不要使用发行版仓库提供的版本。</p></li></ol><p>Bumblebee项目不兼容Vulkan(新的图形接口)，这意味着如果你想体验Vulkan就必须让整个会话使用独立显卡渲染。</p><p>在Steam下，可以通过修改游戏的高级启动选项为：optirun %command% 来指定该游戏运行在独立显卡上。</p><p>虽然Bumblebee有很多缺陷，包括不能支持Vulkan，但是对于Linux用户来说，它是在Linux上实现Optimus技术的唯一途径。希望本教程能对部分Linux用户有所帮助。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Archlinux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
